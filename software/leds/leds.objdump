
leds.elf:     file format elf32-littlenios2
leds.elf
architecture: nios2:r1, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x00010244

Program Header:
    LOAD off    0x00001000 vaddr 0x00010000 paddr 0x00010000 align 2**12
         filesz 0x00000020 memsz 0x00000020 flags r-x
    LOAD off    0x00001020 vaddr 0x00010020 paddr 0x00010020 align 2**12
         filesz 0x00005a28 memsz 0x00005a28 flags r-x
    LOAD off    0x00006a48 vaddr 0x00015a48 paddr 0x000174b4 align 2**12
         filesz 0x00001a6c memsz 0x00001a6c flags rw-
    LOAD off    0x00008f20 vaddr 0x00018f20 paddr 0x00018f20 align 2**12
         filesz 0x00000000 memsz 0x00000154 flags rw-

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .entry        00000020  00010000  00010000  00001000  2**5
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .exceptions   00000224  00010020  00010020  00001020  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .text         000057bc  00010244  00010244  00001244  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .rodata       00000048  00015a00  00015a00  00006a00  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .rwdata       00001a6c  00015a48  000174b4  00006a48  2**2
                  CONTENTS, ALLOC, LOAD, DATA, SMALL_DATA
  5 .bss          00000154  00018f20  00018f20  00008f20  2**2
                  ALLOC, SMALL_DATA
  6 .onchip_memory2 00000000  00019074  00019074  000084b4  2**0
                  CONTENTS
  7 .comment      00000023  00000000  00000000  000084b4  2**0
                  CONTENTS, READONLY
  8 .debug_aranges 00000a70  00000000  00000000  000084d8  2**3
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_info   0001665c  00000000  00000000  00008f48  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_abbrev 0000617b  00000000  00000000  0001f5a4  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_line   00006a0b  00000000  00000000  0002571f  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_frame  00001600  00000000  00000000  0002c12c  2**2
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_str    00002742  00000000  00000000  0002d72c  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_loc    00004a4c  00000000  00000000  0002fe6e  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_alt_sim_info 00000060  00000000  00000000  000348bc  2**2
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_ranges 00000680  00000000  00000000  00034920  2**3
                  CONTENTS, READONLY, DEBUGGING
 17 .thread_model 00000003  00000000  00000000  00037596  2**0
                  CONTENTS, READONLY
 18 .cpu          0000000a  00000000  00000000  00037599  2**0
                  CONTENTS, READONLY
 19 .qsys         00000001  00000000  00000000  000375a3  2**0
                  CONTENTS, READONLY
 20 .simulation_enabled 00000001  00000000  00000000  000375a4  2**0
                  CONTENTS, READONLY
 21 .sysid_hash   00000004  00000000  00000000  000375a5  2**0
                  CONTENTS, READONLY
 22 .sysid_base   00000004  00000000  00000000  000375a9  2**0
                  CONTENTS, READONLY
 23 .sysid_time   00000004  00000000  00000000  000375ad  2**0
                  CONTENTS, READONLY
 24 .stderr_dev   00000009  00000000  00000000  000375b1  2**0
                  CONTENTS, READONLY
 25 .stdin_dev    00000009  00000000  00000000  000375ba  2**0
                  CONTENTS, READONLY
 26 .stdout_dev   00000009  00000000  00000000  000375c3  2**0
                  CONTENTS, READONLY
 27 .sopc_system_name 00000009  00000000  00000000  000375cc  2**0
                  CONTENTS, READONLY
 28 .quartus_project_dir 00000012  00000000  00000000  000375d5  2**0
                  CONTENTS, READONLY
 29 .jdi          00004661  00000000  00000000  000375e7  2**0
                  CONTENTS, READONLY
 30 .sopcinfo     0005098d  00000000  00000000  0003bc48  2**0
                  CONTENTS, READONLY
SYMBOL TABLE:
00010000 l    d  .entry	00000000 .entry
00010020 l    d  .exceptions	00000000 .exceptions
00010244 l    d  .text	00000000 .text
00015a00 l    d  .rodata	00000000 .rodata
00015a48 l    d  .rwdata	00000000 .rwdata
00018f20 l    d  .bss	00000000 .bss
00019074 l    d  .onchip_memory2	00000000 .onchip_memory2
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    d  .debug_alt_sim_info	00000000 .debug_alt_sim_info
00000000 l    d  .debug_ranges	00000000 .debug_ranges
00000000 l    df *ABS*	00000000 ../leds_bsp//obj/HAL/src/crt0.o
0001028c l       .text	00000000 alt_after_alt_main
00000000 l    df *ABS*	00000000 alt_irq_handler.c
00000000 l    df *ABS*	00000000 alt_instruction_exception_entry.c
00000000 l    df *ABS*	00000000 hello_world.c
00000000 l    df *ABS*	00000000 puts.c
00000000 l    df *ABS*	00000000 strlen.c
00000000 l    df *ABS*	00000000 findfp.c
0001046c l     F .text	00000008 __fp_unlock
00010480 l     F .text	0000019c __sinit.part.1
0001061c l     F .text	00000008 __fp_lock
00000000 l    df *ABS*	00000000 fvwrite.c
00000000 l    df *ABS*	00000000 fwalk.c
00000000 l    df *ABS*	00000000 impure.c
00015a48 l     O .rwdata	00000424 impure_data
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 memchr.c
00000000 l    df *ABS*	00000000 memcpy.c
00000000 l    df *ABS*	00000000 memmove.c
00000000 l    df *ABS*	00000000 memset.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 sbrkr.c
00000000 l    df *ABS*	00000000 stdio.c
00000000 l    df *ABS*	00000000 writer.c
00000000 l    df *ABS*	00000000 wsetup.c
00000000 l    df *ABS*	00000000 closer.c
00000000 l    df *ABS*	00000000 fclose.c
00000000 l    df *ABS*	00000000 fflush.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 int_errno.c
00000000 l    df *ABS*	00000000 lseekr.c
00000000 l    df *ABS*	00000000 makebuf.c
00000000 l    df *ABS*	00000000 readr.c
00000000 l    df *ABS*	00000000 fstatr.c
00000000 l    df *ABS*	00000000 isattyr.c
00000000 l    df *ABS*	00000000 lib2-divmod.c
00000000 l    df *ABS*	00000000 alt_close.c
000130c8 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_dev.c
000131d4 l     F .text	0000002c alt_dev_null_write
00000000 l    df *ABS*	00000000 alt_errno.c
00000000 l    df *ABS*	00000000 alt_fstat.c
00013200 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_isatty.c
000132ec l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_load.c
000133cc l     F .text	00000068 alt_load_section
00000000 l    df *ABS*	00000000 alt_lseek.c
000134b8 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_main.c
00000000 l    df *ABS*	00000000 alt_malloc_lock.c
00000000 l    df *ABS*	00000000 alt_read.c
0001368c l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_release_fd.c
00000000 l    df *ABS*	00000000 alt_sbrk.c
000174a4 l     O .rwdata	00000004 heap_end
00000000 l    df *ABS*	00000000 alt_usleep.c
00000000 l    df *ABS*	00000000 alt_write.c
00013908 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_sys_init.c
00013a3c l     F .text	00000034 alt_dev_reg
0001641c l     O .rwdata	00001060 jtag_uart
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_fd.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_init.c
00013d30 l     F .text	0000020c altera_avalon_jtag_uart_irq
00013f3c l     F .text	000000a0 altera_avalon_jtag_uart_timeout
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_ioctl.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_read.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_write.c
00000000 l    df *ABS*	00000000 altera_avalon_timer_sc.c
00014574 l     F .text	00000078 alt_avalon_timer_sc_irq
00000000 l    df *ABS*	00000000 alt_alarm_start.c
00000000 l    df *ABS*	00000000 alt_busy_sleep.c
00000000 l    df *ABS*	00000000 alt_dcache_flush_all.c
00000000 l    df *ABS*	00000000 alt_dev_llist_insert.c
00014934 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_do_ctors.c
00000000 l    df *ABS*	00000000 alt_do_dtors.c
00000000 l    df *ABS*	00000000 alt_icache_flush_all.c
00000000 l    df *ABS*	00000000 alt_iic.c
00000000 l    df *ABS*	00000000 alt_iic_isr_register.c
00000000 l    df *ABS*	00000000 alt_io_redirect.c
00014da8 l     F .text	000000c4 alt_open_fd
00000000 l    df *ABS*	00000000 alt_irq_vars.c
00000000 l    df *ABS*	00000000 alt_open.c
00014ee8 l     F .text	0000003c alt_get_errno
00014f24 l     F .text	000000c4 alt_file_locked
00000000 l    df *ABS*	00000000 alt_tick.c
00000000 l    df *ABS*	00000000 altera_nios2_gen2_irq.c
00000000 l    df *ABS*	00000000 alt_find_dev.c
00000000 l    df *ABS*	00000000 alt_find_file.c
00000000 l    df *ABS*	00000000 alt_get_fd.c
00000000 l    df *ABS*	00000000 alt_icache_flush.c
00000000 l    df *ABS*	00000000 atexit.c
00000000 l    df *ABS*	00000000 exit.c
00000000 l    df *ABS*	00000000 memcmp.c
00000000 l    df *ABS*	00000000 __atexit.c
00000000 l    df *ABS*	00000000 __call_atexit.c
00000000 l    df *ABS*	00000000 alt_exit.c
00018f48 g     O .bss	00000004 alt_instruction_exception_handler
00012ec0 g     F .text	00000054 _isatty_r
000135c8 g     F .text	0000007c alt_main
00010300 g     F .text	000000c0 _puts_r
00018f74 g     O .bss	00000100 alt_irq
00012be8 g     F .text	00000060 _lseek_r
000174b4 g       *ABS*	00000000 __flash_rwdata_start
00019074 g       *ABS*	00000000 __alt_heap_start
0001219c g     F .text	0000005c __sseek
000107bc g     F .text	00000010 __sinit
00010624 g     F .text	00000068 __sfmoreglue
00013668 g     F .text	00000024 __malloc_unlock
00011888 g     F .text	0000015c memmove
000107a4 g     F .text	00000018 _cleanup
000152e0 g     F .text	00000024 altera_nios2_gen2_irq_init
00010000 g     F .entry	0000001c __reset
00010020 g       *ABS*	00000000 __flash_exceptions_start
00012e64 g     F .text	0000005c _fstat_r
00018f2c g     O .bss	00000004 errno
00012118 g     F .text	00000008 __seofread
00018f34 g     O .bss	00000004 alt_argv
0001f47c g       *ABS*	00000000 _gp
000138d8 g     F .text	00000030 usleep
0001629c g     O .rwdata	00000180 alt_fd_list
00015304 g     F .text	00000090 alt_find_dev
00011740 g     F .text	00000148 memcpy
00010474 g     F .text	0000000c _cleanup_r
00014e6c g     F .text	0000007c alt_io_redirect
00015a00 g       *ABS*	00000000 __DTOR_END__
000103c0 g     F .text	00000014 puts
000155d0 g     F .text	0000009c alt_exception_cause_generated_bad_addr
00014134 g     F .text	0000021c altera_avalon_jtag_uart_read
0001300c g     F .text	00000064 .hidden __udivsi3
00013328 g     F .text	000000a4 isatty
00015540 g     F .text	00000090 alt_icache_flush
00018f28 g     O .bss	00000004 __malloc_top_pad
0001080c g     F .text	000004bc __sfvwrite_r
00012070 g     F .text	00000054 _sbrk_r
00012e04 g     F .text	00000060 _read_r
0001749c g     O .rwdata	00000004 alt_max_fd
00012408 g     F .text	000000f0 _fclose_r
00012784 g     F .text	00000030 fflush
00018f24 g     O .bss	00000004 __malloc_max_sbrked_mem
000134f4 g     F .text	000000d4 lseek
0001747c g     O .rwdata	00000004 _global_impure_ptr
00011b0c g     F .text	00000564 _realloc_r
00019074 g       *ABS*	00000000 __bss_end
00014cb8 g     F .text	000000f0 alt_iic_isr_register
000151d8 g     F .text	00000108 alt_tick
000107dc g     F .text	00000018 __fp_lock_all
00014c6c g     F .text	0000004c alt_ic_irq_enabled
0001513c g     F .text	0000009c alt_alarm_stop
00018f3c g     O .bss	00000004 alt_irq_active
000100fc g     F .exceptions	000000d4 alt_irq_handler
00016274 g     O .rwdata	00000028 alt_dev_null
000148ec g     F .text	00000048 alt_dcache_flush_all
000174b4 g       *ABS*	00000000 __ram_rwdata_end
00017494 g     O .rwdata	00000008 alt_dev_list
00013944 g     F .text	000000f8 write
00015a48 g       *ABS*	00000000 __ram_rodata_end
0001323c g     F .text	000000b0 fstat
00013070 g     F .text	00000058 .hidden __umodsi3
00019074 g       *ABS*	00000000 end
00013c70 g     F .text	000000c0 altera_avalon_jtag_uart_init
000101d0 g     F .exceptions	00000074 alt_instruction_exception_entry
00015a00 g       *ABS*	00000000 __CTOR_LIST__
00020000 g       *ABS*	00000000 __alt_stack_pointer
000145ec g     F .text	0000007c alt_avalon_timer_sc_init
00014350 g     F .text	00000224 altera_avalon_jtag_uart_write
000107cc g     F .text	00000004 __sfp_lock_acquire
0001165c g     F .text	000000e4 memchr
000128d8 g     F .text	00000310 _free_r
0001584c g     F .text	00000180 __call_exitprocs
00017484 g     O .rwdata	00000004 __malloc_sbrk_base
00010244 g     F .text	0000004c _start
00018f40 g     O .bss	00000004 _alt_tick_rate
00018f44 g     O .bss	00000004 _alt_nticks
000136c8 g     F .text	000000fc read
00013aa8 g     F .text	00000064 alt_sys_init
00015734 g     F .text	00000118 __register_exitproc
00013fdc g     F .text	00000068 altera_avalon_jtag_uart_close
00015a48 g       *ABS*	00000000 __ram_rwdata_start
00015a00 g       *ABS*	00000000 __ram_rodata_start
00018f4c g     O .bss	00000028 __malloc_current_mallinfo
00013b0c g     F .text	00000060 altera_avalon_jtag_uart_read_fd
0001549c g     F .text	000000a4 alt_get_fd
00014794 g     F .text	00000158 alt_busy_sleep
000123b4 g     F .text	00000054 _close_r
000156b8 g     F .text	0000007c memcmp
00013bcc g     F .text	00000050 altera_avalon_jtag_uart_close_fd
00019074 g       *ABS*	00000000 __alt_stack_base
00013c1c g     F .text	00000054 altera_avalon_jtag_uart_ioctl_fd
00012260 g     F .text	00000154 __swsetup_r
0001068c g     F .text	00000118 __sfp
00015e6c g     O .rwdata	00000408 __malloc_av_
000107d8 g     F .text	00000004 __sinit_lock_release
000120c4 g     F .text	00000054 __sread
00015394 g     F .text	00000108 alt_find_file
00014970 g     F .text	000000a4 alt_dev_llist_insert
00013644 g     F .text	00000024 __malloc_lock
00013828 g     F .text	000000b0 sbrk
00012728 g     F .text	0000005c _fflush_r
00018f20 g       *ABS*	00000000 __bss_start
000119e4 g     F .text	00000128 memset
00010290 g     F .text	00000070 main
00018f38 g     O .bss	00000004 alt_envp
00018f20 g     O .bss	00000004 __malloc_max_total_mem
00013b6c g     F .text	00000060 altera_avalon_jtag_uart_write_fd
000121f8 g     F .text	00000008 __sclose
00020000 g       *ABS*	00000000 __alt_heap_limit
000124f8 g     F .text	00000014 fclose
00010e50 g     F .text	0000080c _malloc_r
000174a0 g     O .rwdata	00000004 alt_errno
00010cc8 g     F .text	000000c4 _fwalk
00012f14 g     F .text	00000084 .hidden __divsi3
000127b4 g     F .text	00000124 _malloc_trim_r
00015a00 g       *ABS*	00000000 __CTOR_END__
00015a00 g       *ABS*	00000000 __flash_rodata_start
00015a00 g       *ABS*	00000000 __DTOR_LIST__
00013a70 g     F .text	00000038 alt_irq_init
000137c4 g     F .text	00000064 alt_release_fd
0001566c g     F .text	00000014 atexit
00012200 g     F .text	00000060 _write_r
00017480 g     O .rwdata	00000004 _impure_ptr
00018f30 g     O .bss	00000004 alt_argc
0001250c g     F .text	0000021c __sflush_r
00014a74 g     F .text	00000060 _do_dtors
00010020 g       .exceptions	00000000 alt_irq_entry
000107f4 g     F .text	00000018 __fp_unlock_all
0001748c g     O .rwdata	00000008 alt_fs_list
00010020 g       *ABS*	00000000 __ram_exceptions_start
00010000 g       *ABS*	00000000 __alt_mem_onchip_memory2
00014b08 g     F .text	00000050 alt_ic_isr_register
000174b4 g       *ABS*	00000000 _edata
00019074 g       *ABS*	00000000 _end
00010244 g       *ABS*	00000000 __ram_exceptions_end
00014044 g     F .text	000000f0 altera_avalon_jtag_uart_ioctl
00014be0 g     F .text	0000008c alt_ic_irq_disable
00012120 g     F .text	0000007c __swrite
00017488 g     O .rwdata	00000004 __malloc_trim_threshold
00015680 g     F .text	00000038 exit
00010d8c g     F .text	000000c4 _fwalk_reent
00012f98 g     F .text	00000074 .hidden __modsi3
00020000 g       *ABS*	00000000 __alt_data_end
00010020 g     F .exceptions	00000000 alt_exception
000107d0 g     F .text	00000004 __sfp_lock_release
000159cc g     F .text	00000034 _exit
00014668 g     F .text	0000012c alt_alarm_start
00012c48 g     F .text	000001bc __smakebuf_r
000103d4 g     F .text	00000098 strlen
00014fe8 g     F .text	00000154 open
00014ad4 g     F .text	00000034 alt_icache_flush_all
000174a8 g     O .rwdata	00000004 alt_priority_mask
00014b58 g     F .text	00000088 alt_ic_irq_enable
000174ac g     O .rwdata	00000008 alt_alarm_list
00014a14 g     F .text	00000060 _do_ctors
00013104 g     F .text	000000d0 close
00013434 g     F .text	00000084 alt_load
000107d4 g     F .text	00000004 __sinit_lock_acquire



Disassembly of section .entry:

00010000 <__reset>:
#if NIOS2_ICACHE_SIZE > 0 && defined(ALT_ALLOW_CODE_AT_RESET) && (!defined(ALT_SIM_OPTIMIZE) || defined(NIOS2_ECC_PRESENT))
    /* Assume the instruction cache size is always a power of two. */
#if NIOS2_ICACHE_SIZE > 0x8000
    movhi r2, %hi(NIOS2_ICACHE_SIZE)
#else
    movui r2, NIOS2_ICACHE_SIZE
   10000:	00840014 	movui	r2,4096
#endif

0:
    initi r2
   10004:	1001483a 	initi	r2
    addi r2, r2, -NIOS2_ICACHE_LINE_SIZE
   10008:	10bff804 	addi	r2,r2,-32
    bgt r2, zero, 0b
   1000c:	00bffd16 	blt	zero,r2,10004 <__alt_data_end+0xffff0004>
 * Jump to the _start entry point in the .text section if reset code
 * is allowed or if optimizing for RTL simulation.
 */
#if defined(ALT_ALLOW_CODE_AT_RESET) || defined(ALT_SIM_OPTIMIZE)
    /* Jump to the _start entry point in the .text section. */
    movhi r1, %hi(_start)
   10010:	00400074 	movhi	at,1
    ori r1, r1, %lo(_start)
   10014:	08409114 	ori	at,at,580
    jmp r1
   10018:	0800683a 	jmp	at
   1001c:	00000000 	call	0 <__reset-0x10000>

Disassembly of section .exceptions:

00010020 <alt_exception>:

#else /* ALT_EXCEPTION_STACK disabled */
        /* 
         * Reserve space on normal stack for registers about to be pushed.
         */
        addi  sp, sp, -76
   10020:	deffed04 	addi	sp,sp,-76
         * documentation for details).
         *
         * Leave a gap in the stack frame at 4(sp) for the muldiv handler to
         * store zero into.
         */
        stw   ra,  0(sp)
   10024:	dfc00015 	stw	ra,0(sp)
        stw   r1,   8(sp)
   10028:	d8400215 	stw	at,8(sp)
        stw   r2,  12(sp)
   1002c:	d8800315 	stw	r2,12(sp)
        stw   r3,  16(sp)
   10030:	d8c00415 	stw	r3,16(sp)
        stw   r4,  20(sp)
   10034:	d9000515 	stw	r4,20(sp)
        stw   r5,  24(sp)
   10038:	d9400615 	stw	r5,24(sp)
        stw   r6,  28(sp)
   1003c:	d9800715 	stw	r6,28(sp)
        stw   r7,  32(sp)
   10040:	d9c00815 	stw	r7,32(sp)
        rdctl r5, estatus   /* Read early to avoid usage stall */
   10044:	000b307a 	rdctl	r5,estatus
        stw   r8,  36(sp)
   10048:	da000915 	stw	r8,36(sp)
        stw   r9,  40(sp)
   1004c:	da400a15 	stw	r9,40(sp)
        stw   r10, 44(sp)
   10050:	da800b15 	stw	r10,44(sp)
        stw   r11, 48(sp)
   10054:	dac00c15 	stw	r11,48(sp)
        stw   r12, 52(sp)
   10058:	db000d15 	stw	r12,52(sp)
        stw   r13, 56(sp)
   1005c:	db400e15 	stw	r13,56(sp)
        stw   r14, 60(sp)
   10060:	db800f15 	stw	r14,60(sp)
        stw   r15, 64(sp)
   10064:	dbc01015 	stw	r15,64(sp)
        /*
         * ea-4 contains the address of the instruction being executed
         * when the exception occured. For interrupt exceptions, we will
         * will be re-issue the isntruction. Store it in 72(sp)
         */
        stw   r5,  68(sp)  /* estatus */
   10068:	d9401115 	stw	r5,68(sp)
        addi  r15, ea, -4  /* instruction that caused exception */
   1006c:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
   10070:	dbc01215 	stw	r15,72(sp)
#else
        /*
         * Test to see if the exception was a software exception or caused 
         * by an external interrupt, and vector accordingly.
         */
        rdctl r4, ipending
   10074:	0009313a 	rdctl	r4,ipending
        andi  r2, r5, 1
   10078:	2880004c 	andi	r2,r5,1
        beq   r2, zero, .Lnot_irq
   1007c:	10000326 	beq	r2,zero,1008c <alt_exception+0x6c>
        beq   r4, zero, .Lnot_irq
   10080:	20000226 	beq	r4,zero,1008c <alt_exception+0x6c>
        /*
         * Now that all necessary registers have been preserved, call 
         * alt_irq_handler() to process the interrupts.
         */

        call alt_irq_handler
   10084:	00100fc0 	call	100fc <alt_irq_handler>

        .section .exceptions.irqreturn, "xa"

        br    .Lexception_exit
   10088:	00000706 	br	100a8 <alt_exception+0x88>
         * upon completion, so we write ea (address of instruction *after*
         * the one where the exception occured) into 72(sp). The actual
         * instruction that caused the exception is written in r2, which these
         * handlers will utilize.
         */
        stw ea, 72(sp) /* EA is PC+4 so will skip over instruction causing exception */
   1008c:	df401215 	stw	ea,72(sp)
.Lunknown_16bit:
        addi.n r4, r4, 2 /* Need PC+2 to skip over instruction causing exception */
        stw r4, 72(sp)

#else /* CDX is not Enabled and all instructions are 32bits */
        ldw r2, -4(ea) /* Instruction value that caused exception */
   10090:	e8bfff17 	ldw	r2,-4(ea)
         * debugger is present) or go into an infinite loop since the
         * handling behavior is undefined; in that case we will not return here.
         */

        /* Load exception-causing address as first argument (r4) */
        addi   r4, ea, -4
   10094:	e93fff04 	addi	r4,ea,-4

        /* Call the instruction-exception entry */
        call   alt_instruction_exception_entry
   10098:	00101d00 	call	101d0 <alt_instruction_exception_entry>
         * instruction
         *
         * Return code was 0: Skip. The instruction after the exception is
         * already stored in 72(sp).
         */
        bne   r2, r0, .Lexception_exit
   1009c:	1000021e 	bne	r2,zero,100a8 <alt_exception+0x88>

        /*
         * Otherwise, modify 72(sp) to re-issue the instruction that caused the
         * exception.
         */
        addi  r15, ea, -4  /* instruction that caused exception */
   100a0:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
   100a4:	dbc01215 	stw	r15,72(sp)
        /* 
         * Restore the saved registers, so that all general purpose registers 
         * have been restored to their state at the time the interrupt occured.
         */

        ldw   r5,  68(sp)
   100a8:	d9401117 	ldw	r5,68(sp)
        ldw   ea,  72(sp)  /* This becomes the PC once eret is executed */
   100ac:	df401217 	ldw	ea,72(sp)
        ldw   ra,   0(sp)
   100b0:	dfc00017 	ldw	ra,0(sp)

        wrctl estatus, r5
   100b4:	2801707a 	wrctl	estatus,r5

        ldw   r1,   8(sp)
   100b8:	d8400217 	ldw	at,8(sp)
        ldw   r2,  12(sp)
   100bc:	d8800317 	ldw	r2,12(sp)
        ldw   r3,  16(sp)
   100c0:	d8c00417 	ldw	r3,16(sp)
        ldw   r4,  20(sp)
   100c4:	d9000517 	ldw	r4,20(sp)
        ldw   r5,  24(sp)
   100c8:	d9400617 	ldw	r5,24(sp)
        ldw   r6,  28(sp)
   100cc:	d9800717 	ldw	r6,28(sp)
        ldw   r7,  32(sp)
   100d0:	d9c00817 	ldw	r7,32(sp)

#if defined(ALT_EXCEPTION_STACK) && defined(ALT_STACK_CHECK)
        ldw   et, %gprel(alt_exception_old_stack_limit)(gp)
#endif

        ldw   r8,  36(sp)
   100d4:	da000917 	ldw	r8,36(sp)
        ldw   r9,  40(sp)
   100d8:	da400a17 	ldw	r9,40(sp)
        ldw   r10, 44(sp)
   100dc:	da800b17 	ldw	r10,44(sp)
        ldw   r11, 48(sp)
   100e0:	dac00c17 	ldw	r11,48(sp)
        ldw   r12, 52(sp)
   100e4:	db000d17 	ldw	r12,52(sp)
        ldw   r13, 56(sp)
   100e8:	db400e17 	ldw	r13,56(sp)
        ldw   r14, 60(sp)
   100ec:	db800f17 	ldw	r14,60(sp)
        ldw   r15, 64(sp)
   100f0:	dbc01017 	ldw	r15,64(sp)
        stw   et, %gprel(alt_stack_limit_value)(gp)
        stw   zero, %gprel(alt_exception_old_stack_limit)(gp)
#endif /* ALT_STACK_CHECK */
        ldw   sp,  76(sp)
#else /* ALT_EXCEPTION_STACK disabled */
        addi  sp, sp, 76
   100f4:	dec01304 	addi	sp,sp,76

        /*
         * Return to the interrupted instruction.
         */

        eret
   100f8:	ef80083a 	eret

000100fc <alt_irq_handler>:
 * instruction is present if the macro ALT_CI_INTERRUPT_VECTOR defined.
 */

void alt_irq_handler (void) __attribute__ ((section (".exceptions")));
void alt_irq_handler (void)
{
   100fc:	defff904 	addi	sp,sp,-28
   10100:	dfc00615 	stw	ra,24(sp)
   10104:	df000515 	stw	fp,20(sp)
   10108:	df000504 	addi	fp,sp,20
  
  /*
   * Notify the operating system that we are at interrupt level.
   */ 
  
  ALT_OS_INT_ENTER();
   1010c:	0001883a 	nop
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
   10110:	0005313a 	rdctl	r2,ipending
   10114:	e0bffe15 	stw	r2,-8(fp)

  return active;
   10118:	e0bffe17 	ldw	r2,-8(fp)
   * Consider the case where the high priority interupt is asserted during
   * the interrupt entry sequence for a lower priority interrupt to see why
   * this is the case.
   */

  active = alt_irq_pending ();
   1011c:	e0bffb15 	stw	r2,-20(fp)

  do
  {
    i = 0;
   10120:	e03ffd15 	stw	zero,-12(fp)
    mask = 1;
   10124:	00800044 	movi	r2,1
   10128:	e0bffc15 	stw	r2,-16(fp)
     * called to clear the interrupt condition.
     */

    do
    {
      if (active & mask)
   1012c:	e0fffb17 	ldw	r3,-20(fp)
   10130:	e0bffc17 	ldw	r2,-16(fp)
   10134:	1884703a 	and	r2,r3,r2
   10138:	10001426 	beq	r2,zero,1018c <alt_irq_handler+0x90>
      { 
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
        alt_irq[i].handler(alt_irq[i].context); 
   1013c:	008000b4 	movhi	r2,2
   10140:	10a3dd04 	addi	r2,r2,-28812
   10144:	e0fffd17 	ldw	r3,-12(fp)
   10148:	180690fa 	slli	r3,r3,3
   1014c:	10c5883a 	add	r2,r2,r3
   10150:	10c00017 	ldw	r3,0(r2)
   10154:	008000b4 	movhi	r2,2
   10158:	10a3dd04 	addi	r2,r2,-28812
   1015c:	e13ffd17 	ldw	r4,-12(fp)
   10160:	200890fa 	slli	r4,r4,3
   10164:	1105883a 	add	r2,r2,r4
   10168:	10800104 	addi	r2,r2,4
   1016c:	10800017 	ldw	r2,0(r2)
   10170:	1009883a 	mov	r4,r2
   10174:	183ee83a 	callr	r3
#else
        alt_irq[i].handler(alt_irq[i].context, i); 
#endif
        break;
   10178:	0001883a 	nop
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
   1017c:	0005313a 	rdctl	r2,ipending
   10180:	e0bfff15 	stw	r2,-4(fp)

  return active;
   10184:	e0bfff17 	ldw	r2,-4(fp)
   10188:	00000706 	br	101a8 <alt_irq_handler+0xac>
      }
      mask <<= 1;
   1018c:	e0bffc17 	ldw	r2,-16(fp)
   10190:	1085883a 	add	r2,r2,r2
   10194:	e0bffc15 	stw	r2,-16(fp)
      i++;
   10198:	e0bffd17 	ldw	r2,-12(fp)
   1019c:	10800044 	addi	r2,r2,1
   101a0:	e0bffd15 	stw	r2,-12(fp)

    } while (1);
   101a4:	003fe106 	br	1012c <__alt_data_end+0xffff012c>

    active = alt_irq_pending ();
   101a8:	e0bffb15 	stw	r2,-20(fp)
    
  } while (active);
   101ac:	e0bffb17 	ldw	r2,-20(fp)
   101b0:	103fdb1e 	bne	r2,zero,10120 <__alt_data_end+0xffff0120>

  /*
   * Notify the operating system that interrupt processing is complete.
   */ 

  ALT_OS_INT_EXIT();
   101b4:	0001883a 	nop
}
   101b8:	0001883a 	nop
   101bc:	e037883a 	mov	sp,fp
   101c0:	dfc00117 	ldw	ra,4(sp)
   101c4:	df000017 	ldw	fp,0(sp)
   101c8:	dec00204 	addi	sp,sp,8
   101cc:	f800283a 	ret

000101d0 <alt_instruction_exception_entry>:
 * that handler if it has been registered. Absent a handler, it will
 * break break or hang as discussed below.
 */
int 
alt_instruction_exception_entry (alt_u32 exception_pc)
{
   101d0:	defffb04 	addi	sp,sp,-20
   101d4:	dfc00415 	stw	ra,16(sp)
   101d8:	df000315 	stw	fp,12(sp)
   101dc:	df000304 	addi	fp,sp,12
   101e0:	e13fff15 	stw	r4,-4(fp)
 * NIOS2_EXCEPTION_CAUSE_NOT_PRESENT. Your handling routine should
 * check the validity of the cause argument before proceeding.
 */
#ifdef NIOS2_HAS_EXTRA_EXCEPTION_INFO
  /* Get exception cause & "badaddr" */
  NIOS2_READ_EXCEPTION(cause);
   101e4:	000531fa 	rdctl	r2,exception
   101e8:	e0bffd15 	stw	r2,-12(fp)
  cause = ( (cause & NIOS2_EXCEPTION_REG_CAUSE_MASK) >>
   101ec:	e0bffd17 	ldw	r2,-12(fp)
   101f0:	10801f0c 	andi	r2,r2,124
   101f4:	1004d0ba 	srli	r2,r2,2
   101f8:	e0bffd15 	stw	r2,-12(fp)
              NIOS2_EXCEPTION_REG_CAUSE_OFST );

  NIOS2_READ_BADADDR(badaddr);
   101fc:	0005333a 	rdctl	r2,badaddr
   10200:	e0bffe15 	stw	r2,-8(fp)
#else
  cause = NIOS2_EXCEPTION_CAUSE_NOT_PRESENT;
  badaddr = 0;
#endif /* NIOS2_HAS_EXTRA_EXCEPTION_INFO */

  if(alt_instruction_exception_handler) {
   10204:	d0a6b317 	ldw	r2,-25908(gp)
   10208:	10000726 	beq	r2,zero,10228 <alt_instruction_exception_entry+0x58>
     * Call handler. Its return value indicates whether the exception-causing
     * instruction should be re-issued. The code that called us,
     * alt_eceptions_entry.S, will look at this value and adjust the ea
     * register as necessary
     */
    return alt_instruction_exception_handler(cause, exception_pc, badaddr);
   1020c:	d0a6b317 	ldw	r2,-25908(gp)
   10210:	e0fffd17 	ldw	r3,-12(fp)
   10214:	e1bffe17 	ldw	r6,-8(fp)
   10218:	e17fff17 	ldw	r5,-4(fp)
   1021c:	1809883a 	mov	r4,r3
   10220:	103ee83a 	callr	r2
   10224:	00000206 	br	10230 <alt_instruction_exception_entry+0x60>
   *    (a peripheral which negates its interrupt output before its
   *    interrupt handler has been executed will cause spurious interrupts)
   */
  else {
#ifdef NIOS2_HAS_DEBUG_STUB
    NIOS2_BREAK();
   10228:	003da03a 	break	0
      ;
#endif /* NIOS2_HAS_DEBUG_STUB */
  }

  /* We should not get here. Remove compiler warning. */
  return NIOS2_EXCEPTION_RETURN_REISSUE_INST;
   1022c:	0005883a 	mov	r2,zero
}
   10230:	e037883a 	mov	sp,fp
   10234:	dfc00117 	ldw	ra,4(sp)
   10238:	df000017 	ldw	fp,0(sp)
   1023c:	dec00204 	addi	sp,sp,8
   10240:	f800283a 	ret

Disassembly of section .text:

00010244 <_start>:

    /* Assume the data cache size is always a power of two. */
#if NIOS2_DCACHE_SIZE > 0x8000
    movhi r2, %hi(NIOS2_DCACHE_SIZE)
#else
    movui r2, NIOS2_DCACHE_SIZE
   10244:	00820014 	movui	r2,2048
#endif

0:
    initd 0(r2)
   10248:	10000033 	initd	0(r2)
#ifdef NIOS2_ECC_PRESENT
    addi r2, r2, -4
#else
    addi r2, r2, -NIOS2_DCACHE_LINE_SIZE
   1024c:	10bff804 	addi	r2,r2,-32
#endif
    bgt r2, zero, 0b
   10250:	00bffd16 	blt	zero,r2,10248 <__alt_data_end+0xffff0248>

    /*
     * Now that the caches are initialized, set up the stack pointer and global pointer.
     * The values provided by the linker are assumed to be correctly aligned.
     */
    movhi sp, %hi(__alt_stack_pointer)
   10254:	06c000b4 	movhi	sp,2
    ori sp, sp, %lo(__alt_stack_pointer)
   10258:	dec00014 	ori	sp,sp,0
    movhi gp, %hi(_gp)
   1025c:	06800074 	movhi	gp,1
    ori gp, gp, %lo(_gp)
   10260:	d6bd1f14 	ori	gp,gp,62588
 */
#ifndef ALT_SIM_OPTIMIZE
    /* Log that the BSS is about to be cleared. */
    ALT_LOG_PUTS(alt_log_msg_bss)

    movhi r2, %hi(__bss_start)
   10264:	00800074 	movhi	r2,1
    ori r2, r2, %lo(__bss_start)
   10268:	10a3c814 	ori	r2,r2,36640

    movhi r3, %hi(__bss_end)
   1026c:	00c00074 	movhi	r3,1
    ori r3, r3, %lo(__bss_end)
   10270:	18e41d14 	ori	r3,r3,36980

    beq r2, r3, 1f
   10274:	10c00326 	beq	r2,r3,10284 <_start+0x40>

0:
    stw zero, (r2)
   10278:	10000015 	stw	zero,0(r2)
    addi r2, r2, 4
   1027c:	10800104 	addi	r2,r2,4
    bltu r2, r3, 0b
   10280:	10fffd36 	bltu	r2,r3,10278 <__alt_data_end+0xffff0278>
     * section aren't defined until alt_load() has been called).
     */
    mov   et, zero
#endif

    call alt_load
   10284:	00134340 	call	13434 <alt_load>

    /* Log that alt_main is about to be called. */
    ALT_LOG_PUTS(alt_log_msg_alt_main)

    /* Call the C entry point. It should never return. */
    call alt_main
   10288:	00135c80 	call	135c8 <alt_main>

0001028c <alt_after_alt_main>:

    /* Wait in infinite loop in case alt_main does return. */
alt_after_alt_main:
    br alt_after_alt_main
   1028c:	003fff06 	br	1028c <__alt_data_end+0xffff028c>

00010290 <main>:
#include "sys/alt_stdio.h"
#include "sys/unistd.h"
#include "system.h"
#include "altera_avalon_pio_regs.h"
int main(){
   10290:	defffc04 	addi	sp,sp,-16
   10294:	dfc00315 	stw	ra,12(sp)
   10298:	df000215 	stw	fp,8(sp)
   1029c:	df000204 	addi	fp,sp,8
    printf("Hello from Nios II!\n");
   102a0:	01000074 	movhi	r4,1
   102a4:	21168004 	addi	r4,r4,23040
   102a8:	00103c00 	call	103c0 <puts>
    int sw = 0;
   102ac:	e03fff15 	stw	zero,-4(fp)
    int count = 0;
   102b0:	e03ffe15 	stw	zero,-8(fp)
    while (1){
	    sw = IORD_ALTERA_AVALON_PIO_DATA(SW_BASE);
   102b4:	008000b4 	movhi	r2,2
   102b8:	10840c04 	addi	r2,r2,4144
   102bc:	10800037 	ldwio	r2,0(r2)
   102c0:	e0bfff15 	stw	r2,-4(fp)
	    IOWR_ALTERA_AVALON_PIO_DATA(LEDR_BASE, sw);
   102c4:	008000b4 	movhi	r2,2
   102c8:	10841004 	addi	r2,r2,4160
   102cc:	e0ffff17 	ldw	r3,-4(fp)
   102d0:	10c00035 	stwio	r3,0(r2)
	    IOWR_ALTERA_AVALON_PIO_DATA(LEDG_BASE, count);
   102d4:	008000b4 	movhi	r2,2
   102d8:	10841404 	addi	r2,r2,4176
   102dc:	e0fffe17 	ldw	r3,-8(fp)
   102e0:	10c00035 	stwio	r3,0(r2)
	    usleep(100000);
   102e4:	010000b4 	movhi	r4,2
   102e8:	2121a804 	addi	r4,r4,-31072
   102ec:	00138d80 	call	138d8 <usleep>
	    count++;
   102f0:	e0bffe17 	ldw	r2,-8(fp)
   102f4:	10800044 	addi	r2,r2,1
   102f8:	e0bffe15 	stw	r2,-8(fp)
     };
   102fc:	003fed06 	br	102b4 <__alt_data_end+0xffff02b4>

00010300 <_puts_r>:
   10300:	defff604 	addi	sp,sp,-40
   10304:	dc000715 	stw	r16,28(sp)
   10308:	2021883a 	mov	r16,r4
   1030c:	2809883a 	mov	r4,r5
   10310:	dc400815 	stw	r17,32(sp)
   10314:	dfc00915 	stw	ra,36(sp)
   10318:	2823883a 	mov	r17,r5
   1031c:	00103d40 	call	103d4 <strlen>
   10320:	10c00044 	addi	r3,r2,1
   10324:	d8800115 	stw	r2,4(sp)
   10328:	00800074 	movhi	r2,1
   1032c:	10968504 	addi	r2,r2,23060
   10330:	d8800215 	stw	r2,8(sp)
   10334:	00800044 	movi	r2,1
   10338:	d8800315 	stw	r2,12(sp)
   1033c:	00800084 	movi	r2,2
   10340:	dc400015 	stw	r17,0(sp)
   10344:	d8c00615 	stw	r3,24(sp)
   10348:	dec00415 	stw	sp,16(sp)
   1034c:	d8800515 	stw	r2,20(sp)
   10350:	80000226 	beq	r16,zero,1035c <_puts_r+0x5c>
   10354:	80800e17 	ldw	r2,56(r16)
   10358:	10001426 	beq	r2,zero,103ac <_puts_r+0xac>
   1035c:	81400217 	ldw	r5,8(r16)
   10360:	2880030b 	ldhu	r2,12(r5)
   10364:	10c8000c 	andi	r3,r2,8192
   10368:	1800061e 	bne	r3,zero,10384 <_puts_r+0x84>
   1036c:	29001917 	ldw	r4,100(r5)
   10370:	00f7ffc4 	movi	r3,-8193
   10374:	10880014 	ori	r2,r2,8192
   10378:	20c6703a 	and	r3,r4,r3
   1037c:	2880030d 	sth	r2,12(r5)
   10380:	28c01915 	stw	r3,100(r5)
   10384:	d9800404 	addi	r6,sp,16
   10388:	8009883a 	mov	r4,r16
   1038c:	001080c0 	call	1080c <__sfvwrite_r>
   10390:	1000091e 	bne	r2,zero,103b8 <_puts_r+0xb8>
   10394:	00800284 	movi	r2,10
   10398:	dfc00917 	ldw	ra,36(sp)
   1039c:	dc400817 	ldw	r17,32(sp)
   103a0:	dc000717 	ldw	r16,28(sp)
   103a4:	dec00a04 	addi	sp,sp,40
   103a8:	f800283a 	ret
   103ac:	8009883a 	mov	r4,r16
   103b0:	00107bc0 	call	107bc <__sinit>
   103b4:	003fe906 	br	1035c <__alt_data_end+0xffff035c>
   103b8:	00bfffc4 	movi	r2,-1
   103bc:	003ff606 	br	10398 <__alt_data_end+0xffff0398>

000103c0 <puts>:
   103c0:	00800074 	movhi	r2,1
   103c4:	109d2004 	addi	r2,r2,29824
   103c8:	200b883a 	mov	r5,r4
   103cc:	11000017 	ldw	r4,0(r2)
   103d0:	00103001 	jmpi	10300 <_puts_r>

000103d4 <strlen>:
   103d4:	208000cc 	andi	r2,r4,3
   103d8:	10002026 	beq	r2,zero,1045c <strlen+0x88>
   103dc:	20800007 	ldb	r2,0(r4)
   103e0:	10002026 	beq	r2,zero,10464 <strlen+0x90>
   103e4:	2005883a 	mov	r2,r4
   103e8:	00000206 	br	103f4 <strlen+0x20>
   103ec:	10c00007 	ldb	r3,0(r2)
   103f0:	18001826 	beq	r3,zero,10454 <strlen+0x80>
   103f4:	10800044 	addi	r2,r2,1
   103f8:	10c000cc 	andi	r3,r2,3
   103fc:	183ffb1e 	bne	r3,zero,103ec <__alt_data_end+0xffff03ec>
   10400:	10c00017 	ldw	r3,0(r2)
   10404:	01ffbff4 	movhi	r7,65279
   10408:	39ffbfc4 	addi	r7,r7,-257
   1040c:	00ca303a 	nor	r5,zero,r3
   10410:	01a02074 	movhi	r6,32897
   10414:	19c7883a 	add	r3,r3,r7
   10418:	31a02004 	addi	r6,r6,-32640
   1041c:	1946703a 	and	r3,r3,r5
   10420:	1986703a 	and	r3,r3,r6
   10424:	1800091e 	bne	r3,zero,1044c <strlen+0x78>
   10428:	10800104 	addi	r2,r2,4
   1042c:	10c00017 	ldw	r3,0(r2)
   10430:	19cb883a 	add	r5,r3,r7
   10434:	00c6303a 	nor	r3,zero,r3
   10438:	28c6703a 	and	r3,r5,r3
   1043c:	1986703a 	and	r3,r3,r6
   10440:	183ff926 	beq	r3,zero,10428 <__alt_data_end+0xffff0428>
   10444:	00000106 	br	1044c <strlen+0x78>
   10448:	10800044 	addi	r2,r2,1
   1044c:	10c00007 	ldb	r3,0(r2)
   10450:	183ffd1e 	bne	r3,zero,10448 <__alt_data_end+0xffff0448>
   10454:	1105c83a 	sub	r2,r2,r4
   10458:	f800283a 	ret
   1045c:	2005883a 	mov	r2,r4
   10460:	003fe706 	br	10400 <__alt_data_end+0xffff0400>
   10464:	0005883a 	mov	r2,zero
   10468:	f800283a 	ret

0001046c <__fp_unlock>:
   1046c:	0005883a 	mov	r2,zero
   10470:	f800283a 	ret

00010474 <_cleanup_r>:
   10474:	01400074 	movhi	r5,1
   10478:	29490204 	addi	r5,r5,9224
   1047c:	0010d8c1 	jmpi	10d8c <_fwalk_reent>

00010480 <__sinit.part.1>:
   10480:	defff704 	addi	sp,sp,-36
   10484:	00c00074 	movhi	r3,1
   10488:	dfc00815 	stw	ra,32(sp)
   1048c:	ddc00715 	stw	r23,28(sp)
   10490:	dd800615 	stw	r22,24(sp)
   10494:	dd400515 	stw	r21,20(sp)
   10498:	dd000415 	stw	r20,16(sp)
   1049c:	dcc00315 	stw	r19,12(sp)
   104a0:	dc800215 	stw	r18,8(sp)
   104a4:	dc400115 	stw	r17,4(sp)
   104a8:	dc000015 	stw	r16,0(sp)
   104ac:	18c11d04 	addi	r3,r3,1140
   104b0:	24000117 	ldw	r16,4(r4)
   104b4:	20c00f15 	stw	r3,60(r4)
   104b8:	2080bb04 	addi	r2,r4,748
   104bc:	00c000c4 	movi	r3,3
   104c0:	20c0b915 	stw	r3,740(r4)
   104c4:	2080ba15 	stw	r2,744(r4)
   104c8:	2000b815 	stw	zero,736(r4)
   104cc:	05c00204 	movi	r23,8
   104d0:	00800104 	movi	r2,4
   104d4:	2025883a 	mov	r18,r4
   104d8:	b80d883a 	mov	r6,r23
   104dc:	81001704 	addi	r4,r16,92
   104e0:	000b883a 	mov	r5,zero
   104e4:	80000015 	stw	zero,0(r16)
   104e8:	80000115 	stw	zero,4(r16)
   104ec:	80000215 	stw	zero,8(r16)
   104f0:	8080030d 	sth	r2,12(r16)
   104f4:	80001915 	stw	zero,100(r16)
   104f8:	8000038d 	sth	zero,14(r16)
   104fc:	80000415 	stw	zero,16(r16)
   10500:	80000515 	stw	zero,20(r16)
   10504:	80000615 	stw	zero,24(r16)
   10508:	00119e40 	call	119e4 <memset>
   1050c:	05800074 	movhi	r22,1
   10510:	94400217 	ldw	r17,8(r18)
   10514:	05400074 	movhi	r21,1
   10518:	05000074 	movhi	r20,1
   1051c:	04c00074 	movhi	r19,1
   10520:	b5883104 	addi	r22,r22,8388
   10524:	ad484804 	addi	r21,r21,8480
   10528:	a5086704 	addi	r20,r20,8604
   1052c:	9cc87e04 	addi	r19,r19,8696
   10530:	85800815 	stw	r22,32(r16)
   10534:	85400915 	stw	r21,36(r16)
   10538:	85000a15 	stw	r20,40(r16)
   1053c:	84c00b15 	stw	r19,44(r16)
   10540:	84000715 	stw	r16,28(r16)
   10544:	00800284 	movi	r2,10
   10548:	8880030d 	sth	r2,12(r17)
   1054c:	00800044 	movi	r2,1
   10550:	b80d883a 	mov	r6,r23
   10554:	89001704 	addi	r4,r17,92
   10558:	000b883a 	mov	r5,zero
   1055c:	88000015 	stw	zero,0(r17)
   10560:	88000115 	stw	zero,4(r17)
   10564:	88000215 	stw	zero,8(r17)
   10568:	88001915 	stw	zero,100(r17)
   1056c:	8880038d 	sth	r2,14(r17)
   10570:	88000415 	stw	zero,16(r17)
   10574:	88000515 	stw	zero,20(r17)
   10578:	88000615 	stw	zero,24(r17)
   1057c:	00119e40 	call	119e4 <memset>
   10580:	94000317 	ldw	r16,12(r18)
   10584:	00800484 	movi	r2,18
   10588:	8c400715 	stw	r17,28(r17)
   1058c:	8d800815 	stw	r22,32(r17)
   10590:	8d400915 	stw	r21,36(r17)
   10594:	8d000a15 	stw	r20,40(r17)
   10598:	8cc00b15 	stw	r19,44(r17)
   1059c:	8080030d 	sth	r2,12(r16)
   105a0:	00800084 	movi	r2,2
   105a4:	80000015 	stw	zero,0(r16)
   105a8:	80000115 	stw	zero,4(r16)
   105ac:	80000215 	stw	zero,8(r16)
   105b0:	80001915 	stw	zero,100(r16)
   105b4:	8080038d 	sth	r2,14(r16)
   105b8:	80000415 	stw	zero,16(r16)
   105bc:	80000515 	stw	zero,20(r16)
   105c0:	80000615 	stw	zero,24(r16)
   105c4:	b80d883a 	mov	r6,r23
   105c8:	000b883a 	mov	r5,zero
   105cc:	81001704 	addi	r4,r16,92
   105d0:	00119e40 	call	119e4 <memset>
   105d4:	00800044 	movi	r2,1
   105d8:	84000715 	stw	r16,28(r16)
   105dc:	85800815 	stw	r22,32(r16)
   105e0:	85400915 	stw	r21,36(r16)
   105e4:	85000a15 	stw	r20,40(r16)
   105e8:	84c00b15 	stw	r19,44(r16)
   105ec:	90800e15 	stw	r2,56(r18)
   105f0:	dfc00817 	ldw	ra,32(sp)
   105f4:	ddc00717 	ldw	r23,28(sp)
   105f8:	dd800617 	ldw	r22,24(sp)
   105fc:	dd400517 	ldw	r21,20(sp)
   10600:	dd000417 	ldw	r20,16(sp)
   10604:	dcc00317 	ldw	r19,12(sp)
   10608:	dc800217 	ldw	r18,8(sp)
   1060c:	dc400117 	ldw	r17,4(sp)
   10610:	dc000017 	ldw	r16,0(sp)
   10614:	dec00904 	addi	sp,sp,36
   10618:	f800283a 	ret

0001061c <__fp_lock>:
   1061c:	0005883a 	mov	r2,zero
   10620:	f800283a 	ret

00010624 <__sfmoreglue>:
   10624:	defffc04 	addi	sp,sp,-16
   10628:	dc400115 	stw	r17,4(sp)
   1062c:	2c7fffc4 	addi	r17,r5,-1
   10630:	8c401a24 	muli	r17,r17,104
   10634:	dc800215 	stw	r18,8(sp)
   10638:	2825883a 	mov	r18,r5
   1063c:	89401d04 	addi	r5,r17,116
   10640:	dc000015 	stw	r16,0(sp)
   10644:	dfc00315 	stw	ra,12(sp)
   10648:	0010e500 	call	10e50 <_malloc_r>
   1064c:	1021883a 	mov	r16,r2
   10650:	10000726 	beq	r2,zero,10670 <__sfmoreglue+0x4c>
   10654:	11000304 	addi	r4,r2,12
   10658:	10000015 	stw	zero,0(r2)
   1065c:	14800115 	stw	r18,4(r2)
   10660:	11000215 	stw	r4,8(r2)
   10664:	89801a04 	addi	r6,r17,104
   10668:	000b883a 	mov	r5,zero
   1066c:	00119e40 	call	119e4 <memset>
   10670:	8005883a 	mov	r2,r16
   10674:	dfc00317 	ldw	ra,12(sp)
   10678:	dc800217 	ldw	r18,8(sp)
   1067c:	dc400117 	ldw	r17,4(sp)
   10680:	dc000017 	ldw	r16,0(sp)
   10684:	dec00404 	addi	sp,sp,16
   10688:	f800283a 	ret

0001068c <__sfp>:
   1068c:	defffb04 	addi	sp,sp,-20
   10690:	dc000015 	stw	r16,0(sp)
   10694:	04000074 	movhi	r16,1
   10698:	841d1f04 	addi	r16,r16,29820
   1069c:	dcc00315 	stw	r19,12(sp)
   106a0:	2027883a 	mov	r19,r4
   106a4:	81000017 	ldw	r4,0(r16)
   106a8:	dfc00415 	stw	ra,16(sp)
   106ac:	dc800215 	stw	r18,8(sp)
   106b0:	20800e17 	ldw	r2,56(r4)
   106b4:	dc400115 	stw	r17,4(sp)
   106b8:	1000021e 	bne	r2,zero,106c4 <__sfp+0x38>
   106bc:	00104800 	call	10480 <__sinit.part.1>
   106c0:	81000017 	ldw	r4,0(r16)
   106c4:	2480b804 	addi	r18,r4,736
   106c8:	047fffc4 	movi	r17,-1
   106cc:	91000117 	ldw	r4,4(r18)
   106d0:	94000217 	ldw	r16,8(r18)
   106d4:	213fffc4 	addi	r4,r4,-1
   106d8:	20000a16 	blt	r4,zero,10704 <__sfp+0x78>
   106dc:	8080030f 	ldh	r2,12(r16)
   106e0:	10000c26 	beq	r2,zero,10714 <__sfp+0x88>
   106e4:	80c01d04 	addi	r3,r16,116
   106e8:	00000206 	br	106f4 <__sfp+0x68>
   106ec:	18bfe60f 	ldh	r2,-104(r3)
   106f0:	10000826 	beq	r2,zero,10714 <__sfp+0x88>
   106f4:	213fffc4 	addi	r4,r4,-1
   106f8:	1c3ffd04 	addi	r16,r3,-12
   106fc:	18c01a04 	addi	r3,r3,104
   10700:	247ffa1e 	bne	r4,r17,106ec <__alt_data_end+0xffff06ec>
   10704:	90800017 	ldw	r2,0(r18)
   10708:	10001d26 	beq	r2,zero,10780 <__sfp+0xf4>
   1070c:	1025883a 	mov	r18,r2
   10710:	003fee06 	br	106cc <__alt_data_end+0xffff06cc>
   10714:	00bfffc4 	movi	r2,-1
   10718:	8080038d 	sth	r2,14(r16)
   1071c:	00800044 	movi	r2,1
   10720:	8080030d 	sth	r2,12(r16)
   10724:	80001915 	stw	zero,100(r16)
   10728:	80000015 	stw	zero,0(r16)
   1072c:	80000215 	stw	zero,8(r16)
   10730:	80000115 	stw	zero,4(r16)
   10734:	80000415 	stw	zero,16(r16)
   10738:	80000515 	stw	zero,20(r16)
   1073c:	80000615 	stw	zero,24(r16)
   10740:	01800204 	movi	r6,8
   10744:	000b883a 	mov	r5,zero
   10748:	81001704 	addi	r4,r16,92
   1074c:	00119e40 	call	119e4 <memset>
   10750:	8005883a 	mov	r2,r16
   10754:	80000c15 	stw	zero,48(r16)
   10758:	80000d15 	stw	zero,52(r16)
   1075c:	80001115 	stw	zero,68(r16)
   10760:	80001215 	stw	zero,72(r16)
   10764:	dfc00417 	ldw	ra,16(sp)
   10768:	dcc00317 	ldw	r19,12(sp)
   1076c:	dc800217 	ldw	r18,8(sp)
   10770:	dc400117 	ldw	r17,4(sp)
   10774:	dc000017 	ldw	r16,0(sp)
   10778:	dec00504 	addi	sp,sp,20
   1077c:	f800283a 	ret
   10780:	01400104 	movi	r5,4
   10784:	9809883a 	mov	r4,r19
   10788:	00106240 	call	10624 <__sfmoreglue>
   1078c:	90800015 	stw	r2,0(r18)
   10790:	103fde1e 	bne	r2,zero,1070c <__alt_data_end+0xffff070c>
   10794:	00800304 	movi	r2,12
   10798:	98800015 	stw	r2,0(r19)
   1079c:	0005883a 	mov	r2,zero
   107a0:	003ff006 	br	10764 <__alt_data_end+0xffff0764>

000107a4 <_cleanup>:
   107a4:	00800074 	movhi	r2,1
   107a8:	109d1f04 	addi	r2,r2,29820
   107ac:	11000017 	ldw	r4,0(r2)
   107b0:	01400074 	movhi	r5,1
   107b4:	29490204 	addi	r5,r5,9224
   107b8:	0010d8c1 	jmpi	10d8c <_fwalk_reent>

000107bc <__sinit>:
   107bc:	20800e17 	ldw	r2,56(r4)
   107c0:	10000126 	beq	r2,zero,107c8 <__sinit+0xc>
   107c4:	f800283a 	ret
   107c8:	00104801 	jmpi	10480 <__sinit.part.1>

000107cc <__sfp_lock_acquire>:
   107cc:	f800283a 	ret

000107d0 <__sfp_lock_release>:
   107d0:	f800283a 	ret

000107d4 <__sinit_lock_acquire>:
   107d4:	f800283a 	ret

000107d8 <__sinit_lock_release>:
   107d8:	f800283a 	ret

000107dc <__fp_lock_all>:
   107dc:	00800074 	movhi	r2,1
   107e0:	109d2004 	addi	r2,r2,29824
   107e4:	11000017 	ldw	r4,0(r2)
   107e8:	01400074 	movhi	r5,1
   107ec:	29418704 	addi	r5,r5,1564
   107f0:	0010cc81 	jmpi	10cc8 <_fwalk>

000107f4 <__fp_unlock_all>:
   107f4:	00800074 	movhi	r2,1
   107f8:	109d2004 	addi	r2,r2,29824
   107fc:	11000017 	ldw	r4,0(r2)
   10800:	01400074 	movhi	r5,1
   10804:	29411b04 	addi	r5,r5,1132
   10808:	0010cc81 	jmpi	10cc8 <_fwalk>

0001080c <__sfvwrite_r>:
   1080c:	30800217 	ldw	r2,8(r6)
   10810:	10006726 	beq	r2,zero,109b0 <__sfvwrite_r+0x1a4>
   10814:	28c0030b 	ldhu	r3,12(r5)
   10818:	defff404 	addi	sp,sp,-48
   1081c:	dd400715 	stw	r21,28(sp)
   10820:	dd000615 	stw	r20,24(sp)
   10824:	dc000215 	stw	r16,8(sp)
   10828:	dfc00b15 	stw	ra,44(sp)
   1082c:	df000a15 	stw	fp,40(sp)
   10830:	ddc00915 	stw	r23,36(sp)
   10834:	dd800815 	stw	r22,32(sp)
   10838:	dcc00515 	stw	r19,20(sp)
   1083c:	dc800415 	stw	r18,16(sp)
   10840:	dc400315 	stw	r17,12(sp)
   10844:	1880020c 	andi	r2,r3,8
   10848:	2821883a 	mov	r16,r5
   1084c:	202b883a 	mov	r21,r4
   10850:	3029883a 	mov	r20,r6
   10854:	10002726 	beq	r2,zero,108f4 <__sfvwrite_r+0xe8>
   10858:	28800417 	ldw	r2,16(r5)
   1085c:	10002526 	beq	r2,zero,108f4 <__sfvwrite_r+0xe8>
   10860:	1880008c 	andi	r2,r3,2
   10864:	a4400017 	ldw	r17,0(r20)
   10868:	10002a26 	beq	r2,zero,10914 <__sfvwrite_r+0x108>
   1086c:	05a00034 	movhi	r22,32768
   10870:	0027883a 	mov	r19,zero
   10874:	0025883a 	mov	r18,zero
   10878:	b5bf0004 	addi	r22,r22,-1024
   1087c:	980d883a 	mov	r6,r19
   10880:	a809883a 	mov	r4,r21
   10884:	90004626 	beq	r18,zero,109a0 <__sfvwrite_r+0x194>
   10888:	900f883a 	mov	r7,r18
   1088c:	b480022e 	bgeu	r22,r18,10898 <__sfvwrite_r+0x8c>
   10890:	01e00034 	movhi	r7,32768
   10894:	39ff0004 	addi	r7,r7,-1024
   10898:	80800917 	ldw	r2,36(r16)
   1089c:	81400717 	ldw	r5,28(r16)
   108a0:	103ee83a 	callr	r2
   108a4:	0080570e 	bge	zero,r2,10a04 <__sfvwrite_r+0x1f8>
   108a8:	a0c00217 	ldw	r3,8(r20)
   108ac:	98a7883a 	add	r19,r19,r2
   108b0:	90a5c83a 	sub	r18,r18,r2
   108b4:	1885c83a 	sub	r2,r3,r2
   108b8:	a0800215 	stw	r2,8(r20)
   108bc:	103fef1e 	bne	r2,zero,1087c <__alt_data_end+0xffff087c>
   108c0:	0005883a 	mov	r2,zero
   108c4:	dfc00b17 	ldw	ra,44(sp)
   108c8:	df000a17 	ldw	fp,40(sp)
   108cc:	ddc00917 	ldw	r23,36(sp)
   108d0:	dd800817 	ldw	r22,32(sp)
   108d4:	dd400717 	ldw	r21,28(sp)
   108d8:	dd000617 	ldw	r20,24(sp)
   108dc:	dcc00517 	ldw	r19,20(sp)
   108e0:	dc800417 	ldw	r18,16(sp)
   108e4:	dc400317 	ldw	r17,12(sp)
   108e8:	dc000217 	ldw	r16,8(sp)
   108ec:	dec00c04 	addi	sp,sp,48
   108f0:	f800283a 	ret
   108f4:	800b883a 	mov	r5,r16
   108f8:	a809883a 	mov	r4,r21
   108fc:	00122600 	call	12260 <__swsetup_r>
   10900:	1000eb1e 	bne	r2,zero,10cb0 <__sfvwrite_r+0x4a4>
   10904:	80c0030b 	ldhu	r3,12(r16)
   10908:	a4400017 	ldw	r17,0(r20)
   1090c:	1880008c 	andi	r2,r3,2
   10910:	103fd61e 	bne	r2,zero,1086c <__alt_data_end+0xffff086c>
   10914:	1880004c 	andi	r2,r3,1
   10918:	10003f1e 	bne	r2,zero,10a18 <__sfvwrite_r+0x20c>
   1091c:	0039883a 	mov	fp,zero
   10920:	0025883a 	mov	r18,zero
   10924:	90001a26 	beq	r18,zero,10990 <__sfvwrite_r+0x184>
   10928:	1880800c 	andi	r2,r3,512
   1092c:	84c00217 	ldw	r19,8(r16)
   10930:	10002126 	beq	r2,zero,109b8 <__sfvwrite_r+0x1ac>
   10934:	982f883a 	mov	r23,r19
   10938:	94c09336 	bltu	r18,r19,10b88 <__sfvwrite_r+0x37c>
   1093c:	1881200c 	andi	r2,r3,1152
   10940:	10009e1e 	bne	r2,zero,10bbc <__sfvwrite_r+0x3b0>
   10944:	81000017 	ldw	r4,0(r16)
   10948:	b80d883a 	mov	r6,r23
   1094c:	e00b883a 	mov	r5,fp
   10950:	00118880 	call	11888 <memmove>
   10954:	80c00217 	ldw	r3,8(r16)
   10958:	81000017 	ldw	r4,0(r16)
   1095c:	9005883a 	mov	r2,r18
   10960:	1ce7c83a 	sub	r19,r3,r19
   10964:	25cf883a 	add	r7,r4,r23
   10968:	84c00215 	stw	r19,8(r16)
   1096c:	81c00015 	stw	r7,0(r16)
   10970:	a0c00217 	ldw	r3,8(r20)
   10974:	e0b9883a 	add	fp,fp,r2
   10978:	90a5c83a 	sub	r18,r18,r2
   1097c:	18a7c83a 	sub	r19,r3,r2
   10980:	a4c00215 	stw	r19,8(r20)
   10984:	983fce26 	beq	r19,zero,108c0 <__alt_data_end+0xffff08c0>
   10988:	80c0030b 	ldhu	r3,12(r16)
   1098c:	903fe61e 	bne	r18,zero,10928 <__alt_data_end+0xffff0928>
   10990:	8f000017 	ldw	fp,0(r17)
   10994:	8c800117 	ldw	r18,4(r17)
   10998:	8c400204 	addi	r17,r17,8
   1099c:	003fe106 	br	10924 <__alt_data_end+0xffff0924>
   109a0:	8cc00017 	ldw	r19,0(r17)
   109a4:	8c800117 	ldw	r18,4(r17)
   109a8:	8c400204 	addi	r17,r17,8
   109ac:	003fb306 	br	1087c <__alt_data_end+0xffff087c>
   109b0:	0005883a 	mov	r2,zero
   109b4:	f800283a 	ret
   109b8:	81000017 	ldw	r4,0(r16)
   109bc:	80800417 	ldw	r2,16(r16)
   109c0:	11005736 	bltu	r2,r4,10b20 <__sfvwrite_r+0x314>
   109c4:	85c00517 	ldw	r23,20(r16)
   109c8:	95c05536 	bltu	r18,r23,10b20 <__sfvwrite_r+0x314>
   109cc:	00a00034 	movhi	r2,32768
   109d0:	10bfffc4 	addi	r2,r2,-1
   109d4:	9009883a 	mov	r4,r18
   109d8:	1480012e 	bgeu	r2,r18,109e0 <__sfvwrite_r+0x1d4>
   109dc:	1009883a 	mov	r4,r2
   109e0:	b80b883a 	mov	r5,r23
   109e4:	0012f140 	call	12f14 <__divsi3>
   109e8:	15cf383a 	mul	r7,r2,r23
   109ec:	81400717 	ldw	r5,28(r16)
   109f0:	80800917 	ldw	r2,36(r16)
   109f4:	e00d883a 	mov	r6,fp
   109f8:	a809883a 	mov	r4,r21
   109fc:	103ee83a 	callr	r2
   10a00:	00bfdb16 	blt	zero,r2,10970 <__alt_data_end+0xffff0970>
   10a04:	8080030b 	ldhu	r2,12(r16)
   10a08:	10801014 	ori	r2,r2,64
   10a0c:	8080030d 	sth	r2,12(r16)
   10a10:	00bfffc4 	movi	r2,-1
   10a14:	003fab06 	br	108c4 <__alt_data_end+0xffff08c4>
   10a18:	0027883a 	mov	r19,zero
   10a1c:	0011883a 	mov	r8,zero
   10a20:	0039883a 	mov	fp,zero
   10a24:	0025883a 	mov	r18,zero
   10a28:	90001f26 	beq	r18,zero,10aa8 <__sfvwrite_r+0x29c>
   10a2c:	40005a26 	beq	r8,zero,10b98 <__sfvwrite_r+0x38c>
   10a30:	982d883a 	mov	r22,r19
   10a34:	94c0012e 	bgeu	r18,r19,10a3c <__sfvwrite_r+0x230>
   10a38:	902d883a 	mov	r22,r18
   10a3c:	81000017 	ldw	r4,0(r16)
   10a40:	80800417 	ldw	r2,16(r16)
   10a44:	b02f883a 	mov	r23,r22
   10a48:	81c00517 	ldw	r7,20(r16)
   10a4c:	1100032e 	bgeu	r2,r4,10a5c <__sfvwrite_r+0x250>
   10a50:	80c00217 	ldw	r3,8(r16)
   10a54:	38c7883a 	add	r3,r7,r3
   10a58:	1d801816 	blt	r3,r22,10abc <__sfvwrite_r+0x2b0>
   10a5c:	b1c03e16 	blt	r22,r7,10b58 <__sfvwrite_r+0x34c>
   10a60:	80800917 	ldw	r2,36(r16)
   10a64:	81400717 	ldw	r5,28(r16)
   10a68:	e00d883a 	mov	r6,fp
   10a6c:	da000115 	stw	r8,4(sp)
   10a70:	a809883a 	mov	r4,r21
   10a74:	103ee83a 	callr	r2
   10a78:	102f883a 	mov	r23,r2
   10a7c:	da000117 	ldw	r8,4(sp)
   10a80:	00bfe00e 	bge	zero,r2,10a04 <__alt_data_end+0xffff0a04>
   10a84:	9de7c83a 	sub	r19,r19,r23
   10a88:	98001f26 	beq	r19,zero,10b08 <__sfvwrite_r+0x2fc>
   10a8c:	a0800217 	ldw	r2,8(r20)
   10a90:	e5f9883a 	add	fp,fp,r23
   10a94:	95e5c83a 	sub	r18,r18,r23
   10a98:	15efc83a 	sub	r23,r2,r23
   10a9c:	a5c00215 	stw	r23,8(r20)
   10aa0:	b83f8726 	beq	r23,zero,108c0 <__alt_data_end+0xffff08c0>
   10aa4:	903fe11e 	bne	r18,zero,10a2c <__alt_data_end+0xffff0a2c>
   10aa8:	8f000017 	ldw	fp,0(r17)
   10aac:	8c800117 	ldw	r18,4(r17)
   10ab0:	0011883a 	mov	r8,zero
   10ab4:	8c400204 	addi	r17,r17,8
   10ab8:	003fdb06 	br	10a28 <__alt_data_end+0xffff0a28>
   10abc:	180d883a 	mov	r6,r3
   10ac0:	e00b883a 	mov	r5,fp
   10ac4:	da000115 	stw	r8,4(sp)
   10ac8:	d8c00015 	stw	r3,0(sp)
   10acc:	00118880 	call	11888 <memmove>
   10ad0:	d8c00017 	ldw	r3,0(sp)
   10ad4:	80800017 	ldw	r2,0(r16)
   10ad8:	800b883a 	mov	r5,r16
   10adc:	a809883a 	mov	r4,r21
   10ae0:	10c5883a 	add	r2,r2,r3
   10ae4:	80800015 	stw	r2,0(r16)
   10ae8:	d8c00015 	stw	r3,0(sp)
   10aec:	00127280 	call	12728 <_fflush_r>
   10af0:	d8c00017 	ldw	r3,0(sp)
   10af4:	da000117 	ldw	r8,4(sp)
   10af8:	103fc21e 	bne	r2,zero,10a04 <__alt_data_end+0xffff0a04>
   10afc:	182f883a 	mov	r23,r3
   10b00:	9de7c83a 	sub	r19,r19,r23
   10b04:	983fe11e 	bne	r19,zero,10a8c <__alt_data_end+0xffff0a8c>
   10b08:	800b883a 	mov	r5,r16
   10b0c:	a809883a 	mov	r4,r21
   10b10:	00127280 	call	12728 <_fflush_r>
   10b14:	103fbb1e 	bne	r2,zero,10a04 <__alt_data_end+0xffff0a04>
   10b18:	0011883a 	mov	r8,zero
   10b1c:	003fdb06 	br	10a8c <__alt_data_end+0xffff0a8c>
   10b20:	94c0012e 	bgeu	r18,r19,10b28 <__sfvwrite_r+0x31c>
   10b24:	9027883a 	mov	r19,r18
   10b28:	980d883a 	mov	r6,r19
   10b2c:	e00b883a 	mov	r5,fp
   10b30:	00118880 	call	11888 <memmove>
   10b34:	80800217 	ldw	r2,8(r16)
   10b38:	80c00017 	ldw	r3,0(r16)
   10b3c:	14c5c83a 	sub	r2,r2,r19
   10b40:	1cc7883a 	add	r3,r3,r19
   10b44:	80800215 	stw	r2,8(r16)
   10b48:	80c00015 	stw	r3,0(r16)
   10b4c:	10004326 	beq	r2,zero,10c5c <__sfvwrite_r+0x450>
   10b50:	9805883a 	mov	r2,r19
   10b54:	003f8606 	br	10970 <__alt_data_end+0xffff0970>
   10b58:	b00d883a 	mov	r6,r22
   10b5c:	e00b883a 	mov	r5,fp
   10b60:	da000115 	stw	r8,4(sp)
   10b64:	00118880 	call	11888 <memmove>
   10b68:	80800217 	ldw	r2,8(r16)
   10b6c:	80c00017 	ldw	r3,0(r16)
   10b70:	da000117 	ldw	r8,4(sp)
   10b74:	1585c83a 	sub	r2,r2,r22
   10b78:	1dad883a 	add	r22,r3,r22
   10b7c:	80800215 	stw	r2,8(r16)
   10b80:	85800015 	stw	r22,0(r16)
   10b84:	003fbf06 	br	10a84 <__alt_data_end+0xffff0a84>
   10b88:	81000017 	ldw	r4,0(r16)
   10b8c:	9027883a 	mov	r19,r18
   10b90:	902f883a 	mov	r23,r18
   10b94:	003f6c06 	br	10948 <__alt_data_end+0xffff0948>
   10b98:	900d883a 	mov	r6,r18
   10b9c:	01400284 	movi	r5,10
   10ba0:	e009883a 	mov	r4,fp
   10ba4:	001165c0 	call	1165c <memchr>
   10ba8:	10003e26 	beq	r2,zero,10ca4 <__sfvwrite_r+0x498>
   10bac:	10800044 	addi	r2,r2,1
   10bb0:	1727c83a 	sub	r19,r2,fp
   10bb4:	02000044 	movi	r8,1
   10bb8:	003f9d06 	br	10a30 <__alt_data_end+0xffff0a30>
   10bbc:	80800517 	ldw	r2,20(r16)
   10bc0:	81400417 	ldw	r5,16(r16)
   10bc4:	81c00017 	ldw	r7,0(r16)
   10bc8:	10a7883a 	add	r19,r2,r2
   10bcc:	9885883a 	add	r2,r19,r2
   10bd0:	1026d7fa 	srli	r19,r2,31
   10bd4:	396dc83a 	sub	r22,r7,r5
   10bd8:	b1000044 	addi	r4,r22,1
   10bdc:	9885883a 	add	r2,r19,r2
   10be0:	1027d07a 	srai	r19,r2,1
   10be4:	2485883a 	add	r2,r4,r18
   10be8:	980d883a 	mov	r6,r19
   10bec:	9880022e 	bgeu	r19,r2,10bf8 <__sfvwrite_r+0x3ec>
   10bf0:	1027883a 	mov	r19,r2
   10bf4:	100d883a 	mov	r6,r2
   10bf8:	18c1000c 	andi	r3,r3,1024
   10bfc:	18001c26 	beq	r3,zero,10c70 <__sfvwrite_r+0x464>
   10c00:	300b883a 	mov	r5,r6
   10c04:	a809883a 	mov	r4,r21
   10c08:	0010e500 	call	10e50 <_malloc_r>
   10c0c:	102f883a 	mov	r23,r2
   10c10:	10002926 	beq	r2,zero,10cb8 <__sfvwrite_r+0x4ac>
   10c14:	81400417 	ldw	r5,16(r16)
   10c18:	b00d883a 	mov	r6,r22
   10c1c:	1009883a 	mov	r4,r2
   10c20:	00117400 	call	11740 <memcpy>
   10c24:	8080030b 	ldhu	r2,12(r16)
   10c28:	00fedfc4 	movi	r3,-1153
   10c2c:	10c4703a 	and	r2,r2,r3
   10c30:	10802014 	ori	r2,r2,128
   10c34:	8080030d 	sth	r2,12(r16)
   10c38:	bd89883a 	add	r4,r23,r22
   10c3c:	9d8fc83a 	sub	r7,r19,r22
   10c40:	85c00415 	stw	r23,16(r16)
   10c44:	84c00515 	stw	r19,20(r16)
   10c48:	81000015 	stw	r4,0(r16)
   10c4c:	9027883a 	mov	r19,r18
   10c50:	81c00215 	stw	r7,8(r16)
   10c54:	902f883a 	mov	r23,r18
   10c58:	003f3b06 	br	10948 <__alt_data_end+0xffff0948>
   10c5c:	800b883a 	mov	r5,r16
   10c60:	a809883a 	mov	r4,r21
   10c64:	00127280 	call	12728 <_fflush_r>
   10c68:	103fb926 	beq	r2,zero,10b50 <__alt_data_end+0xffff0b50>
   10c6c:	003f6506 	br	10a04 <__alt_data_end+0xffff0a04>
   10c70:	a809883a 	mov	r4,r21
   10c74:	0011b0c0 	call	11b0c <_realloc_r>
   10c78:	102f883a 	mov	r23,r2
   10c7c:	103fee1e 	bne	r2,zero,10c38 <__alt_data_end+0xffff0c38>
   10c80:	81400417 	ldw	r5,16(r16)
   10c84:	a809883a 	mov	r4,r21
   10c88:	00128d80 	call	128d8 <_free_r>
   10c8c:	8080030b 	ldhu	r2,12(r16)
   10c90:	00ffdfc4 	movi	r3,-129
   10c94:	1884703a 	and	r2,r3,r2
   10c98:	00c00304 	movi	r3,12
   10c9c:	a8c00015 	stw	r3,0(r21)
   10ca0:	003f5906 	br	10a08 <__alt_data_end+0xffff0a08>
   10ca4:	94c00044 	addi	r19,r18,1
   10ca8:	02000044 	movi	r8,1
   10cac:	003f6006 	br	10a30 <__alt_data_end+0xffff0a30>
   10cb0:	00bfffc4 	movi	r2,-1
   10cb4:	003f0306 	br	108c4 <__alt_data_end+0xffff08c4>
   10cb8:	00800304 	movi	r2,12
   10cbc:	a8800015 	stw	r2,0(r21)
   10cc0:	8080030b 	ldhu	r2,12(r16)
   10cc4:	003f5006 	br	10a08 <__alt_data_end+0xffff0a08>

00010cc8 <_fwalk>:
   10cc8:	defff704 	addi	sp,sp,-36
   10ccc:	dd000415 	stw	r20,16(sp)
   10cd0:	dfc00815 	stw	ra,32(sp)
   10cd4:	ddc00715 	stw	r23,28(sp)
   10cd8:	dd800615 	stw	r22,24(sp)
   10cdc:	dd400515 	stw	r21,20(sp)
   10ce0:	dcc00315 	stw	r19,12(sp)
   10ce4:	dc800215 	stw	r18,8(sp)
   10ce8:	dc400115 	stw	r17,4(sp)
   10cec:	dc000015 	stw	r16,0(sp)
   10cf0:	2500b804 	addi	r20,r4,736
   10cf4:	a0002326 	beq	r20,zero,10d84 <_fwalk+0xbc>
   10cf8:	282b883a 	mov	r21,r5
   10cfc:	002f883a 	mov	r23,zero
   10d00:	05800044 	movi	r22,1
   10d04:	04ffffc4 	movi	r19,-1
   10d08:	a4400117 	ldw	r17,4(r20)
   10d0c:	a4800217 	ldw	r18,8(r20)
   10d10:	8c7fffc4 	addi	r17,r17,-1
   10d14:	88000d16 	blt	r17,zero,10d4c <_fwalk+0x84>
   10d18:	94000304 	addi	r16,r18,12
   10d1c:	94800384 	addi	r18,r18,14
   10d20:	8080000b 	ldhu	r2,0(r16)
   10d24:	8c7fffc4 	addi	r17,r17,-1
   10d28:	813ffd04 	addi	r4,r16,-12
   10d2c:	b080042e 	bgeu	r22,r2,10d40 <_fwalk+0x78>
   10d30:	9080000f 	ldh	r2,0(r18)
   10d34:	14c00226 	beq	r2,r19,10d40 <_fwalk+0x78>
   10d38:	a83ee83a 	callr	r21
   10d3c:	b8aeb03a 	or	r23,r23,r2
   10d40:	84001a04 	addi	r16,r16,104
   10d44:	94801a04 	addi	r18,r18,104
   10d48:	8cfff51e 	bne	r17,r19,10d20 <__alt_data_end+0xffff0d20>
   10d4c:	a5000017 	ldw	r20,0(r20)
   10d50:	a03fed1e 	bne	r20,zero,10d08 <__alt_data_end+0xffff0d08>
   10d54:	b805883a 	mov	r2,r23
   10d58:	dfc00817 	ldw	ra,32(sp)
   10d5c:	ddc00717 	ldw	r23,28(sp)
   10d60:	dd800617 	ldw	r22,24(sp)
   10d64:	dd400517 	ldw	r21,20(sp)
   10d68:	dd000417 	ldw	r20,16(sp)
   10d6c:	dcc00317 	ldw	r19,12(sp)
   10d70:	dc800217 	ldw	r18,8(sp)
   10d74:	dc400117 	ldw	r17,4(sp)
   10d78:	dc000017 	ldw	r16,0(sp)
   10d7c:	dec00904 	addi	sp,sp,36
   10d80:	f800283a 	ret
   10d84:	002f883a 	mov	r23,zero
   10d88:	003ff206 	br	10d54 <__alt_data_end+0xffff0d54>

00010d8c <_fwalk_reent>:
   10d8c:	defff704 	addi	sp,sp,-36
   10d90:	dd000415 	stw	r20,16(sp)
   10d94:	dfc00815 	stw	ra,32(sp)
   10d98:	ddc00715 	stw	r23,28(sp)
   10d9c:	dd800615 	stw	r22,24(sp)
   10da0:	dd400515 	stw	r21,20(sp)
   10da4:	dcc00315 	stw	r19,12(sp)
   10da8:	dc800215 	stw	r18,8(sp)
   10dac:	dc400115 	stw	r17,4(sp)
   10db0:	dc000015 	stw	r16,0(sp)
   10db4:	2500b804 	addi	r20,r4,736
   10db8:	a0002326 	beq	r20,zero,10e48 <_fwalk_reent+0xbc>
   10dbc:	282b883a 	mov	r21,r5
   10dc0:	2027883a 	mov	r19,r4
   10dc4:	002f883a 	mov	r23,zero
   10dc8:	05800044 	movi	r22,1
   10dcc:	04bfffc4 	movi	r18,-1
   10dd0:	a4400117 	ldw	r17,4(r20)
   10dd4:	a4000217 	ldw	r16,8(r20)
   10dd8:	8c7fffc4 	addi	r17,r17,-1
   10ddc:	88000c16 	blt	r17,zero,10e10 <_fwalk_reent+0x84>
   10de0:	84000304 	addi	r16,r16,12
   10de4:	8080000b 	ldhu	r2,0(r16)
   10de8:	8c7fffc4 	addi	r17,r17,-1
   10dec:	817ffd04 	addi	r5,r16,-12
   10df0:	b080052e 	bgeu	r22,r2,10e08 <_fwalk_reent+0x7c>
   10df4:	8080008f 	ldh	r2,2(r16)
   10df8:	9809883a 	mov	r4,r19
   10dfc:	14800226 	beq	r2,r18,10e08 <_fwalk_reent+0x7c>
   10e00:	a83ee83a 	callr	r21
   10e04:	b8aeb03a 	or	r23,r23,r2
   10e08:	84001a04 	addi	r16,r16,104
   10e0c:	8cbff51e 	bne	r17,r18,10de4 <__alt_data_end+0xffff0de4>
   10e10:	a5000017 	ldw	r20,0(r20)
   10e14:	a03fee1e 	bne	r20,zero,10dd0 <__alt_data_end+0xffff0dd0>
   10e18:	b805883a 	mov	r2,r23
   10e1c:	dfc00817 	ldw	ra,32(sp)
   10e20:	ddc00717 	ldw	r23,28(sp)
   10e24:	dd800617 	ldw	r22,24(sp)
   10e28:	dd400517 	ldw	r21,20(sp)
   10e2c:	dd000417 	ldw	r20,16(sp)
   10e30:	dcc00317 	ldw	r19,12(sp)
   10e34:	dc800217 	ldw	r18,8(sp)
   10e38:	dc400117 	ldw	r17,4(sp)
   10e3c:	dc000017 	ldw	r16,0(sp)
   10e40:	dec00904 	addi	sp,sp,36
   10e44:	f800283a 	ret
   10e48:	002f883a 	mov	r23,zero
   10e4c:	003ff206 	br	10e18 <__alt_data_end+0xffff0e18>

00010e50 <_malloc_r>:
   10e50:	defff504 	addi	sp,sp,-44
   10e54:	dc800315 	stw	r18,12(sp)
   10e58:	dfc00a15 	stw	ra,40(sp)
   10e5c:	df000915 	stw	fp,36(sp)
   10e60:	ddc00815 	stw	r23,32(sp)
   10e64:	dd800715 	stw	r22,28(sp)
   10e68:	dd400615 	stw	r21,24(sp)
   10e6c:	dd000515 	stw	r20,20(sp)
   10e70:	dcc00415 	stw	r19,16(sp)
   10e74:	dc400215 	stw	r17,8(sp)
   10e78:	dc000115 	stw	r16,4(sp)
   10e7c:	288002c4 	addi	r2,r5,11
   10e80:	00c00584 	movi	r3,22
   10e84:	2025883a 	mov	r18,r4
   10e88:	18807f2e 	bgeu	r3,r2,11088 <_malloc_r+0x238>
   10e8c:	047ffe04 	movi	r17,-8
   10e90:	1462703a 	and	r17,r2,r17
   10e94:	8800a316 	blt	r17,zero,11124 <_malloc_r+0x2d4>
   10e98:	8940a236 	bltu	r17,r5,11124 <_malloc_r+0x2d4>
   10e9c:	00136440 	call	13644 <__malloc_lock>
   10ea0:	00807dc4 	movi	r2,503
   10ea4:	1441e92e 	bgeu	r2,r17,1164c <_malloc_r+0x7fc>
   10ea8:	8804d27a 	srli	r2,r17,9
   10eac:	1000a126 	beq	r2,zero,11134 <_malloc_r+0x2e4>
   10eb0:	00c00104 	movi	r3,4
   10eb4:	18811e36 	bltu	r3,r2,11330 <_malloc_r+0x4e0>
   10eb8:	8804d1ba 	srli	r2,r17,6
   10ebc:	12000e44 	addi	r8,r2,57
   10ec0:	11c00e04 	addi	r7,r2,56
   10ec4:	4209883a 	add	r4,r8,r8
   10ec8:	04c00074 	movhi	r19,1
   10ecc:	2109883a 	add	r4,r4,r4
   10ed0:	9cd79b04 	addi	r19,r19,24172
   10ed4:	2109883a 	add	r4,r4,r4
   10ed8:	9909883a 	add	r4,r19,r4
   10edc:	24000117 	ldw	r16,4(r4)
   10ee0:	213ffe04 	addi	r4,r4,-8
   10ee4:	24009726 	beq	r4,r16,11144 <_malloc_r+0x2f4>
   10ee8:	80800117 	ldw	r2,4(r16)
   10eec:	01bfff04 	movi	r6,-4
   10ef0:	014003c4 	movi	r5,15
   10ef4:	1184703a 	and	r2,r2,r6
   10ef8:	1447c83a 	sub	r3,r2,r17
   10efc:	28c00716 	blt	r5,r3,10f1c <_malloc_r+0xcc>
   10f00:	1800920e 	bge	r3,zero,1114c <_malloc_r+0x2fc>
   10f04:	84000317 	ldw	r16,12(r16)
   10f08:	24008e26 	beq	r4,r16,11144 <_malloc_r+0x2f4>
   10f0c:	80800117 	ldw	r2,4(r16)
   10f10:	1184703a 	and	r2,r2,r6
   10f14:	1447c83a 	sub	r3,r2,r17
   10f18:	28fff90e 	bge	r5,r3,10f00 <__alt_data_end+0xffff0f00>
   10f1c:	3809883a 	mov	r4,r7
   10f20:	01800074 	movhi	r6,1
   10f24:	9c000417 	ldw	r16,16(r19)
   10f28:	31979b04 	addi	r6,r6,24172
   10f2c:	32000204 	addi	r8,r6,8
   10f30:	82013426 	beq	r16,r8,11404 <_malloc_r+0x5b4>
   10f34:	80c00117 	ldw	r3,4(r16)
   10f38:	00bfff04 	movi	r2,-4
   10f3c:	188e703a 	and	r7,r3,r2
   10f40:	3c45c83a 	sub	r2,r7,r17
   10f44:	00c003c4 	movi	r3,15
   10f48:	18811f16 	blt	r3,r2,113c8 <_malloc_r+0x578>
   10f4c:	32000515 	stw	r8,20(r6)
   10f50:	32000415 	stw	r8,16(r6)
   10f54:	10007f0e 	bge	r2,zero,11154 <_malloc_r+0x304>
   10f58:	00807fc4 	movi	r2,511
   10f5c:	11c0fd36 	bltu	r2,r7,11354 <_malloc_r+0x504>
   10f60:	3806d0fa 	srli	r3,r7,3
   10f64:	01c00044 	movi	r7,1
   10f68:	30800117 	ldw	r2,4(r6)
   10f6c:	19400044 	addi	r5,r3,1
   10f70:	294b883a 	add	r5,r5,r5
   10f74:	1807d0ba 	srai	r3,r3,2
   10f78:	294b883a 	add	r5,r5,r5
   10f7c:	294b883a 	add	r5,r5,r5
   10f80:	298b883a 	add	r5,r5,r6
   10f84:	38c6983a 	sll	r3,r7,r3
   10f88:	29c00017 	ldw	r7,0(r5)
   10f8c:	2a7ffe04 	addi	r9,r5,-8
   10f90:	1886b03a 	or	r3,r3,r2
   10f94:	82400315 	stw	r9,12(r16)
   10f98:	81c00215 	stw	r7,8(r16)
   10f9c:	30c00115 	stw	r3,4(r6)
   10fa0:	2c000015 	stw	r16,0(r5)
   10fa4:	3c000315 	stw	r16,12(r7)
   10fa8:	2005d0ba 	srai	r2,r4,2
   10fac:	01400044 	movi	r5,1
   10fb0:	288a983a 	sll	r5,r5,r2
   10fb4:	19406f36 	bltu	r3,r5,11174 <_malloc_r+0x324>
   10fb8:	28c4703a 	and	r2,r5,r3
   10fbc:	10000a1e 	bne	r2,zero,10fe8 <_malloc_r+0x198>
   10fc0:	00bfff04 	movi	r2,-4
   10fc4:	294b883a 	add	r5,r5,r5
   10fc8:	2088703a 	and	r4,r4,r2
   10fcc:	28c4703a 	and	r2,r5,r3
   10fd0:	21000104 	addi	r4,r4,4
   10fd4:	1000041e 	bne	r2,zero,10fe8 <_malloc_r+0x198>
   10fd8:	294b883a 	add	r5,r5,r5
   10fdc:	28c4703a 	and	r2,r5,r3
   10fe0:	21000104 	addi	r4,r4,4
   10fe4:	103ffc26 	beq	r2,zero,10fd8 <__alt_data_end+0xffff0fd8>
   10fe8:	02bfff04 	movi	r10,-4
   10fec:	024003c4 	movi	r9,15
   10ff0:	21800044 	addi	r6,r4,1
   10ff4:	318d883a 	add	r6,r6,r6
   10ff8:	318d883a 	add	r6,r6,r6
   10ffc:	318d883a 	add	r6,r6,r6
   11000:	998d883a 	add	r6,r19,r6
   11004:	333ffe04 	addi	r12,r6,-8
   11008:	2017883a 	mov	r11,r4
   1100c:	31800104 	addi	r6,r6,4
   11010:	34000017 	ldw	r16,0(r6)
   11014:	31fffd04 	addi	r7,r6,-12
   11018:	81c0041e 	bne	r16,r7,1102c <_malloc_r+0x1dc>
   1101c:	0000fb06 	br	1140c <_malloc_r+0x5bc>
   11020:	1801030e 	bge	r3,zero,11430 <_malloc_r+0x5e0>
   11024:	84000317 	ldw	r16,12(r16)
   11028:	81c0f826 	beq	r16,r7,1140c <_malloc_r+0x5bc>
   1102c:	80800117 	ldw	r2,4(r16)
   11030:	1284703a 	and	r2,r2,r10
   11034:	1447c83a 	sub	r3,r2,r17
   11038:	48fff90e 	bge	r9,r3,11020 <__alt_data_end+0xffff1020>
   1103c:	80800317 	ldw	r2,12(r16)
   11040:	81000217 	ldw	r4,8(r16)
   11044:	89400054 	ori	r5,r17,1
   11048:	81400115 	stw	r5,4(r16)
   1104c:	20800315 	stw	r2,12(r4)
   11050:	11000215 	stw	r4,8(r2)
   11054:	8463883a 	add	r17,r16,r17
   11058:	9c400515 	stw	r17,20(r19)
   1105c:	9c400415 	stw	r17,16(r19)
   11060:	18800054 	ori	r2,r3,1
   11064:	88800115 	stw	r2,4(r17)
   11068:	8a000315 	stw	r8,12(r17)
   1106c:	8a000215 	stw	r8,8(r17)
   11070:	88e3883a 	add	r17,r17,r3
   11074:	88c00015 	stw	r3,0(r17)
   11078:	9009883a 	mov	r4,r18
   1107c:	00136680 	call	13668 <__malloc_unlock>
   11080:	80800204 	addi	r2,r16,8
   11084:	00001b06 	br	110f4 <_malloc_r+0x2a4>
   11088:	04400404 	movi	r17,16
   1108c:	89402536 	bltu	r17,r5,11124 <_malloc_r+0x2d4>
   11090:	00136440 	call	13644 <__malloc_lock>
   11094:	00800184 	movi	r2,6
   11098:	01000084 	movi	r4,2
   1109c:	04c00074 	movhi	r19,1
   110a0:	1085883a 	add	r2,r2,r2
   110a4:	9cd79b04 	addi	r19,r19,24172
   110a8:	1085883a 	add	r2,r2,r2
   110ac:	9885883a 	add	r2,r19,r2
   110b0:	14000117 	ldw	r16,4(r2)
   110b4:	10fffe04 	addi	r3,r2,-8
   110b8:	80c0d926 	beq	r16,r3,11420 <_malloc_r+0x5d0>
   110bc:	80c00117 	ldw	r3,4(r16)
   110c0:	81000317 	ldw	r4,12(r16)
   110c4:	00bfff04 	movi	r2,-4
   110c8:	1884703a 	and	r2,r3,r2
   110cc:	81400217 	ldw	r5,8(r16)
   110d0:	8085883a 	add	r2,r16,r2
   110d4:	10c00117 	ldw	r3,4(r2)
   110d8:	29000315 	stw	r4,12(r5)
   110dc:	21400215 	stw	r5,8(r4)
   110e0:	18c00054 	ori	r3,r3,1
   110e4:	10c00115 	stw	r3,4(r2)
   110e8:	9009883a 	mov	r4,r18
   110ec:	00136680 	call	13668 <__malloc_unlock>
   110f0:	80800204 	addi	r2,r16,8
   110f4:	dfc00a17 	ldw	ra,40(sp)
   110f8:	df000917 	ldw	fp,36(sp)
   110fc:	ddc00817 	ldw	r23,32(sp)
   11100:	dd800717 	ldw	r22,28(sp)
   11104:	dd400617 	ldw	r21,24(sp)
   11108:	dd000517 	ldw	r20,20(sp)
   1110c:	dcc00417 	ldw	r19,16(sp)
   11110:	dc800317 	ldw	r18,12(sp)
   11114:	dc400217 	ldw	r17,8(sp)
   11118:	dc000117 	ldw	r16,4(sp)
   1111c:	dec00b04 	addi	sp,sp,44
   11120:	f800283a 	ret
   11124:	00800304 	movi	r2,12
   11128:	90800015 	stw	r2,0(r18)
   1112c:	0005883a 	mov	r2,zero
   11130:	003ff006 	br	110f4 <__alt_data_end+0xffff10f4>
   11134:	01002004 	movi	r4,128
   11138:	02001004 	movi	r8,64
   1113c:	01c00fc4 	movi	r7,63
   11140:	003f6106 	br	10ec8 <__alt_data_end+0xffff0ec8>
   11144:	4009883a 	mov	r4,r8
   11148:	003f7506 	br	10f20 <__alt_data_end+0xffff0f20>
   1114c:	81000317 	ldw	r4,12(r16)
   11150:	003fde06 	br	110cc <__alt_data_end+0xffff10cc>
   11154:	81c5883a 	add	r2,r16,r7
   11158:	11400117 	ldw	r5,4(r2)
   1115c:	9009883a 	mov	r4,r18
   11160:	29400054 	ori	r5,r5,1
   11164:	11400115 	stw	r5,4(r2)
   11168:	00136680 	call	13668 <__malloc_unlock>
   1116c:	80800204 	addi	r2,r16,8
   11170:	003fe006 	br	110f4 <__alt_data_end+0xffff10f4>
   11174:	9c000217 	ldw	r16,8(r19)
   11178:	00bfff04 	movi	r2,-4
   1117c:	85800117 	ldw	r22,4(r16)
   11180:	b0ac703a 	and	r22,r22,r2
   11184:	b4400336 	bltu	r22,r17,11194 <_malloc_r+0x344>
   11188:	b445c83a 	sub	r2,r22,r17
   1118c:	00c003c4 	movi	r3,15
   11190:	18805d16 	blt	r3,r2,11308 <_malloc_r+0x4b8>
   11194:	05c00074 	movhi	r23,1
   11198:	008000b4 	movhi	r2,2
   1119c:	10a3ca04 	addi	r2,r2,-28888
   111a0:	bddd2104 	addi	r23,r23,29828
   111a4:	15400017 	ldw	r21,0(r2)
   111a8:	b8c00017 	ldw	r3,0(r23)
   111ac:	00bfffc4 	movi	r2,-1
   111b0:	858d883a 	add	r6,r16,r22
   111b4:	8d6b883a 	add	r21,r17,r21
   111b8:	1880ea26 	beq	r3,r2,11564 <_malloc_r+0x714>
   111bc:	ad4403c4 	addi	r21,r21,4111
   111c0:	00bc0004 	movi	r2,-4096
   111c4:	a8aa703a 	and	r21,r21,r2
   111c8:	a80b883a 	mov	r5,r21
   111cc:	9009883a 	mov	r4,r18
   111d0:	d9800015 	stw	r6,0(sp)
   111d4:	00120700 	call	12070 <_sbrk_r>
   111d8:	1029883a 	mov	r20,r2
   111dc:	00bfffc4 	movi	r2,-1
   111e0:	d9800017 	ldw	r6,0(sp)
   111e4:	a080e826 	beq	r20,r2,11588 <_malloc_r+0x738>
   111e8:	a180a636 	bltu	r20,r6,11484 <_malloc_r+0x634>
   111ec:	070000b4 	movhi	fp,2
   111f0:	e723d304 	addi	fp,fp,-28852
   111f4:	e0800017 	ldw	r2,0(fp)
   111f8:	a887883a 	add	r3,r21,r2
   111fc:	e0c00015 	stw	r3,0(fp)
   11200:	3500e626 	beq	r6,r20,1159c <_malloc_r+0x74c>
   11204:	b9000017 	ldw	r4,0(r23)
   11208:	00bfffc4 	movi	r2,-1
   1120c:	2080ee26 	beq	r4,r2,115c8 <_malloc_r+0x778>
   11210:	a185c83a 	sub	r2,r20,r6
   11214:	10c5883a 	add	r2,r2,r3
   11218:	e0800015 	stw	r2,0(fp)
   1121c:	a0c001cc 	andi	r3,r20,7
   11220:	1800bc26 	beq	r3,zero,11514 <_malloc_r+0x6c4>
   11224:	a0e9c83a 	sub	r20,r20,r3
   11228:	00840204 	movi	r2,4104
   1122c:	a5000204 	addi	r20,r20,8
   11230:	10c7c83a 	sub	r3,r2,r3
   11234:	a545883a 	add	r2,r20,r21
   11238:	1083ffcc 	andi	r2,r2,4095
   1123c:	18abc83a 	sub	r21,r3,r2
   11240:	a80b883a 	mov	r5,r21
   11244:	9009883a 	mov	r4,r18
   11248:	00120700 	call	12070 <_sbrk_r>
   1124c:	00ffffc4 	movi	r3,-1
   11250:	10c0e126 	beq	r2,r3,115d8 <_malloc_r+0x788>
   11254:	1505c83a 	sub	r2,r2,r20
   11258:	1545883a 	add	r2,r2,r21
   1125c:	10800054 	ori	r2,r2,1
   11260:	e0c00017 	ldw	r3,0(fp)
   11264:	9d000215 	stw	r20,8(r19)
   11268:	a0800115 	stw	r2,4(r20)
   1126c:	a8c7883a 	add	r3,r21,r3
   11270:	e0c00015 	stw	r3,0(fp)
   11274:	84c00e26 	beq	r16,r19,112b0 <_malloc_r+0x460>
   11278:	018003c4 	movi	r6,15
   1127c:	3580a72e 	bgeu	r6,r22,1151c <_malloc_r+0x6cc>
   11280:	81400117 	ldw	r5,4(r16)
   11284:	013ffe04 	movi	r4,-8
   11288:	b0bffd04 	addi	r2,r22,-12
   1128c:	1104703a 	and	r2,r2,r4
   11290:	2900004c 	andi	r4,r5,1
   11294:	2088b03a 	or	r4,r4,r2
   11298:	81000115 	stw	r4,4(r16)
   1129c:	01400144 	movi	r5,5
   112a0:	8089883a 	add	r4,r16,r2
   112a4:	21400115 	stw	r5,4(r4)
   112a8:	21400215 	stw	r5,8(r4)
   112ac:	3080cd36 	bltu	r6,r2,115e4 <_malloc_r+0x794>
   112b0:	008000b4 	movhi	r2,2
   112b4:	10a3c904 	addi	r2,r2,-28892
   112b8:	11000017 	ldw	r4,0(r2)
   112bc:	20c0012e 	bgeu	r4,r3,112c4 <_malloc_r+0x474>
   112c0:	10c00015 	stw	r3,0(r2)
   112c4:	008000b4 	movhi	r2,2
   112c8:	10a3c804 	addi	r2,r2,-28896
   112cc:	11000017 	ldw	r4,0(r2)
   112d0:	9c000217 	ldw	r16,8(r19)
   112d4:	20c0012e 	bgeu	r4,r3,112dc <_malloc_r+0x48c>
   112d8:	10c00015 	stw	r3,0(r2)
   112dc:	80c00117 	ldw	r3,4(r16)
   112e0:	00bfff04 	movi	r2,-4
   112e4:	1886703a 	and	r3,r3,r2
   112e8:	1c45c83a 	sub	r2,r3,r17
   112ec:	1c400236 	bltu	r3,r17,112f8 <_malloc_r+0x4a8>
   112f0:	00c003c4 	movi	r3,15
   112f4:	18800416 	blt	r3,r2,11308 <_malloc_r+0x4b8>
   112f8:	9009883a 	mov	r4,r18
   112fc:	00136680 	call	13668 <__malloc_unlock>
   11300:	0005883a 	mov	r2,zero
   11304:	003f7b06 	br	110f4 <__alt_data_end+0xffff10f4>
   11308:	88c00054 	ori	r3,r17,1
   1130c:	80c00115 	stw	r3,4(r16)
   11310:	8463883a 	add	r17,r16,r17
   11314:	10800054 	ori	r2,r2,1
   11318:	9c400215 	stw	r17,8(r19)
   1131c:	88800115 	stw	r2,4(r17)
   11320:	9009883a 	mov	r4,r18
   11324:	00136680 	call	13668 <__malloc_unlock>
   11328:	80800204 	addi	r2,r16,8
   1132c:	003f7106 	br	110f4 <__alt_data_end+0xffff10f4>
   11330:	00c00504 	movi	r3,20
   11334:	18804a2e 	bgeu	r3,r2,11460 <_malloc_r+0x610>
   11338:	00c01504 	movi	r3,84
   1133c:	18806e36 	bltu	r3,r2,114f8 <_malloc_r+0x6a8>
   11340:	8804d33a 	srli	r2,r17,12
   11344:	12001bc4 	addi	r8,r2,111
   11348:	11c01b84 	addi	r7,r2,110
   1134c:	4209883a 	add	r4,r8,r8
   11350:	003edd06 	br	10ec8 <__alt_data_end+0xffff0ec8>
   11354:	3804d27a 	srli	r2,r7,9
   11358:	00c00104 	movi	r3,4
   1135c:	1880442e 	bgeu	r3,r2,11470 <_malloc_r+0x620>
   11360:	00c00504 	movi	r3,20
   11364:	18808136 	bltu	r3,r2,1156c <_malloc_r+0x71c>
   11368:	11401704 	addi	r5,r2,92
   1136c:	10c016c4 	addi	r3,r2,91
   11370:	294b883a 	add	r5,r5,r5
   11374:	294b883a 	add	r5,r5,r5
   11378:	294b883a 	add	r5,r5,r5
   1137c:	994b883a 	add	r5,r19,r5
   11380:	28800017 	ldw	r2,0(r5)
   11384:	01800074 	movhi	r6,1
   11388:	297ffe04 	addi	r5,r5,-8
   1138c:	31979b04 	addi	r6,r6,24172
   11390:	28806526 	beq	r5,r2,11528 <_malloc_r+0x6d8>
   11394:	01bfff04 	movi	r6,-4
   11398:	10c00117 	ldw	r3,4(r2)
   1139c:	1986703a 	and	r3,r3,r6
   113a0:	38c0022e 	bgeu	r7,r3,113ac <_malloc_r+0x55c>
   113a4:	10800217 	ldw	r2,8(r2)
   113a8:	28bffb1e 	bne	r5,r2,11398 <__alt_data_end+0xffff1398>
   113ac:	11400317 	ldw	r5,12(r2)
   113b0:	98c00117 	ldw	r3,4(r19)
   113b4:	81400315 	stw	r5,12(r16)
   113b8:	80800215 	stw	r2,8(r16)
   113bc:	2c000215 	stw	r16,8(r5)
   113c0:	14000315 	stw	r16,12(r2)
   113c4:	003ef806 	br	10fa8 <__alt_data_end+0xffff0fa8>
   113c8:	88c00054 	ori	r3,r17,1
   113cc:	80c00115 	stw	r3,4(r16)
   113d0:	8463883a 	add	r17,r16,r17
   113d4:	34400515 	stw	r17,20(r6)
   113d8:	34400415 	stw	r17,16(r6)
   113dc:	10c00054 	ori	r3,r2,1
   113e0:	8a000315 	stw	r8,12(r17)
   113e4:	8a000215 	stw	r8,8(r17)
   113e8:	88c00115 	stw	r3,4(r17)
   113ec:	88a3883a 	add	r17,r17,r2
   113f0:	88800015 	stw	r2,0(r17)
   113f4:	9009883a 	mov	r4,r18
   113f8:	00136680 	call	13668 <__malloc_unlock>
   113fc:	80800204 	addi	r2,r16,8
   11400:	003f3c06 	br	110f4 <__alt_data_end+0xffff10f4>
   11404:	30c00117 	ldw	r3,4(r6)
   11408:	003ee706 	br	10fa8 <__alt_data_end+0xffff0fa8>
   1140c:	5ac00044 	addi	r11,r11,1
   11410:	588000cc 	andi	r2,r11,3
   11414:	31800204 	addi	r6,r6,8
   11418:	103efd1e 	bne	r2,zero,11010 <__alt_data_end+0xffff1010>
   1141c:	00002406 	br	114b0 <_malloc_r+0x660>
   11420:	14000317 	ldw	r16,12(r2)
   11424:	143f251e 	bne	r2,r16,110bc <__alt_data_end+0xffff10bc>
   11428:	21000084 	addi	r4,r4,2
   1142c:	003ebc06 	br	10f20 <__alt_data_end+0xffff0f20>
   11430:	8085883a 	add	r2,r16,r2
   11434:	10c00117 	ldw	r3,4(r2)
   11438:	81000317 	ldw	r4,12(r16)
   1143c:	81400217 	ldw	r5,8(r16)
   11440:	18c00054 	ori	r3,r3,1
   11444:	10c00115 	stw	r3,4(r2)
   11448:	29000315 	stw	r4,12(r5)
   1144c:	21400215 	stw	r5,8(r4)
   11450:	9009883a 	mov	r4,r18
   11454:	00136680 	call	13668 <__malloc_unlock>
   11458:	80800204 	addi	r2,r16,8
   1145c:	003f2506 	br	110f4 <__alt_data_end+0xffff10f4>
   11460:	12001704 	addi	r8,r2,92
   11464:	11c016c4 	addi	r7,r2,91
   11468:	4209883a 	add	r4,r8,r8
   1146c:	003e9606 	br	10ec8 <__alt_data_end+0xffff0ec8>
   11470:	3804d1ba 	srli	r2,r7,6
   11474:	11400e44 	addi	r5,r2,57
   11478:	10c00e04 	addi	r3,r2,56
   1147c:	294b883a 	add	r5,r5,r5
   11480:	003fbc06 	br	11374 <__alt_data_end+0xffff1374>
   11484:	84ff5926 	beq	r16,r19,111ec <__alt_data_end+0xffff11ec>
   11488:	00800074 	movhi	r2,1
   1148c:	10979b04 	addi	r2,r2,24172
   11490:	14000217 	ldw	r16,8(r2)
   11494:	00bfff04 	movi	r2,-4
   11498:	80c00117 	ldw	r3,4(r16)
   1149c:	1886703a 	and	r3,r3,r2
   114a0:	003f9106 	br	112e8 <__alt_data_end+0xffff12e8>
   114a4:	60800217 	ldw	r2,8(r12)
   114a8:	213fffc4 	addi	r4,r4,-1
   114ac:	1300651e 	bne	r2,r12,11644 <_malloc_r+0x7f4>
   114b0:	208000cc 	andi	r2,r4,3
   114b4:	633ffe04 	addi	r12,r12,-8
   114b8:	103ffa1e 	bne	r2,zero,114a4 <__alt_data_end+0xffff14a4>
   114bc:	98800117 	ldw	r2,4(r19)
   114c0:	0146303a 	nor	r3,zero,r5
   114c4:	1884703a 	and	r2,r3,r2
   114c8:	98800115 	stw	r2,4(r19)
   114cc:	294b883a 	add	r5,r5,r5
   114d0:	117f2836 	bltu	r2,r5,11174 <__alt_data_end+0xffff1174>
   114d4:	283f2726 	beq	r5,zero,11174 <__alt_data_end+0xffff1174>
   114d8:	2886703a 	and	r3,r5,r2
   114dc:	5809883a 	mov	r4,r11
   114e0:	183ec31e 	bne	r3,zero,10ff0 <__alt_data_end+0xffff0ff0>
   114e4:	294b883a 	add	r5,r5,r5
   114e8:	2886703a 	and	r3,r5,r2
   114ec:	21000104 	addi	r4,r4,4
   114f0:	183ffc26 	beq	r3,zero,114e4 <__alt_data_end+0xffff14e4>
   114f4:	003ebe06 	br	10ff0 <__alt_data_end+0xffff0ff0>
   114f8:	00c05504 	movi	r3,340
   114fc:	18801236 	bltu	r3,r2,11548 <_malloc_r+0x6f8>
   11500:	8804d3fa 	srli	r2,r17,15
   11504:	12001e04 	addi	r8,r2,120
   11508:	11c01dc4 	addi	r7,r2,119
   1150c:	4209883a 	add	r4,r8,r8
   11510:	003e6d06 	br	10ec8 <__alt_data_end+0xffff0ec8>
   11514:	00c40004 	movi	r3,4096
   11518:	003f4606 	br	11234 <__alt_data_end+0xffff1234>
   1151c:	00800044 	movi	r2,1
   11520:	a0800115 	stw	r2,4(r20)
   11524:	003f7406 	br	112f8 <__alt_data_end+0xffff12f8>
   11528:	1805d0ba 	srai	r2,r3,2
   1152c:	01c00044 	movi	r7,1
   11530:	30c00117 	ldw	r3,4(r6)
   11534:	388e983a 	sll	r7,r7,r2
   11538:	2805883a 	mov	r2,r5
   1153c:	38c6b03a 	or	r3,r7,r3
   11540:	30c00115 	stw	r3,4(r6)
   11544:	003f9b06 	br	113b4 <__alt_data_end+0xffff13b4>
   11548:	00c15504 	movi	r3,1364
   1154c:	18801a36 	bltu	r3,r2,115b8 <_malloc_r+0x768>
   11550:	8804d4ba 	srli	r2,r17,18
   11554:	12001f44 	addi	r8,r2,125
   11558:	11c01f04 	addi	r7,r2,124
   1155c:	4209883a 	add	r4,r8,r8
   11560:	003e5906 	br	10ec8 <__alt_data_end+0xffff0ec8>
   11564:	ad400404 	addi	r21,r21,16
   11568:	003f1706 	br	111c8 <__alt_data_end+0xffff11c8>
   1156c:	00c01504 	movi	r3,84
   11570:	18802336 	bltu	r3,r2,11600 <_malloc_r+0x7b0>
   11574:	3804d33a 	srli	r2,r7,12
   11578:	11401bc4 	addi	r5,r2,111
   1157c:	10c01b84 	addi	r3,r2,110
   11580:	294b883a 	add	r5,r5,r5
   11584:	003f7b06 	br	11374 <__alt_data_end+0xffff1374>
   11588:	9c000217 	ldw	r16,8(r19)
   1158c:	00bfff04 	movi	r2,-4
   11590:	80c00117 	ldw	r3,4(r16)
   11594:	1886703a 	and	r3,r3,r2
   11598:	003f5306 	br	112e8 <__alt_data_end+0xffff12e8>
   1159c:	3083ffcc 	andi	r2,r6,4095
   115a0:	103f181e 	bne	r2,zero,11204 <__alt_data_end+0xffff1204>
   115a4:	99000217 	ldw	r4,8(r19)
   115a8:	b545883a 	add	r2,r22,r21
   115ac:	10800054 	ori	r2,r2,1
   115b0:	20800115 	stw	r2,4(r4)
   115b4:	003f3e06 	br	112b0 <__alt_data_end+0xffff12b0>
   115b8:	01003f84 	movi	r4,254
   115bc:	02001fc4 	movi	r8,127
   115c0:	01c01f84 	movi	r7,126
   115c4:	003e4006 	br	10ec8 <__alt_data_end+0xffff0ec8>
   115c8:	00800074 	movhi	r2,1
   115cc:	109d2104 	addi	r2,r2,29828
   115d0:	15000015 	stw	r20,0(r2)
   115d4:	003f1106 	br	1121c <__alt_data_end+0xffff121c>
   115d8:	00800044 	movi	r2,1
   115dc:	002b883a 	mov	r21,zero
   115e0:	003f1f06 	br	11260 <__alt_data_end+0xffff1260>
   115e4:	81400204 	addi	r5,r16,8
   115e8:	9009883a 	mov	r4,r18
   115ec:	00128d80 	call	128d8 <_free_r>
   115f0:	008000b4 	movhi	r2,2
   115f4:	10a3d304 	addi	r2,r2,-28852
   115f8:	10c00017 	ldw	r3,0(r2)
   115fc:	003f2c06 	br	112b0 <__alt_data_end+0xffff12b0>
   11600:	00c05504 	movi	r3,340
   11604:	18800536 	bltu	r3,r2,1161c <_malloc_r+0x7cc>
   11608:	3804d3fa 	srli	r2,r7,15
   1160c:	11401e04 	addi	r5,r2,120
   11610:	10c01dc4 	addi	r3,r2,119
   11614:	294b883a 	add	r5,r5,r5
   11618:	003f5606 	br	11374 <__alt_data_end+0xffff1374>
   1161c:	00c15504 	movi	r3,1364
   11620:	18800536 	bltu	r3,r2,11638 <_malloc_r+0x7e8>
   11624:	3804d4ba 	srli	r2,r7,18
   11628:	11401f44 	addi	r5,r2,125
   1162c:	10c01f04 	addi	r3,r2,124
   11630:	294b883a 	add	r5,r5,r5
   11634:	003f4f06 	br	11374 <__alt_data_end+0xffff1374>
   11638:	01403f84 	movi	r5,254
   1163c:	00c01f84 	movi	r3,126
   11640:	003f4c06 	br	11374 <__alt_data_end+0xffff1374>
   11644:	98800117 	ldw	r2,4(r19)
   11648:	003fa006 	br	114cc <__alt_data_end+0xffff14cc>
   1164c:	8808d0fa 	srli	r4,r17,3
   11650:	20800044 	addi	r2,r4,1
   11654:	1085883a 	add	r2,r2,r2
   11658:	003e9006 	br	1109c <__alt_data_end+0xffff109c>

0001165c <memchr>:
   1165c:	208000cc 	andi	r2,r4,3
   11660:	280f883a 	mov	r7,r5
   11664:	10003426 	beq	r2,zero,11738 <memchr+0xdc>
   11668:	30bfffc4 	addi	r2,r6,-1
   1166c:	30001a26 	beq	r6,zero,116d8 <memchr+0x7c>
   11670:	20c00003 	ldbu	r3,0(r4)
   11674:	29803fcc 	andi	r6,r5,255
   11678:	30c0051e 	bne	r6,r3,11690 <memchr+0x34>
   1167c:	00001806 	br	116e0 <memchr+0x84>
   11680:	10001526 	beq	r2,zero,116d8 <memchr+0x7c>
   11684:	20c00003 	ldbu	r3,0(r4)
   11688:	10bfffc4 	addi	r2,r2,-1
   1168c:	30c01426 	beq	r6,r3,116e0 <memchr+0x84>
   11690:	21000044 	addi	r4,r4,1
   11694:	20c000cc 	andi	r3,r4,3
   11698:	183ff91e 	bne	r3,zero,11680 <__alt_data_end+0xffff1680>
   1169c:	020000c4 	movi	r8,3
   116a0:	40801136 	bltu	r8,r2,116e8 <memchr+0x8c>
   116a4:	10000c26 	beq	r2,zero,116d8 <memchr+0x7c>
   116a8:	20c00003 	ldbu	r3,0(r4)
   116ac:	29403fcc 	andi	r5,r5,255
   116b0:	28c00b26 	beq	r5,r3,116e0 <memchr+0x84>
   116b4:	20c00044 	addi	r3,r4,1
   116b8:	39803fcc 	andi	r6,r7,255
   116bc:	2089883a 	add	r4,r4,r2
   116c0:	00000306 	br	116d0 <memchr+0x74>
   116c4:	18c00044 	addi	r3,r3,1
   116c8:	197fffc3 	ldbu	r5,-1(r3)
   116cc:	31400526 	beq	r6,r5,116e4 <memchr+0x88>
   116d0:	1805883a 	mov	r2,r3
   116d4:	20fffb1e 	bne	r4,r3,116c4 <__alt_data_end+0xffff16c4>
   116d8:	0005883a 	mov	r2,zero
   116dc:	f800283a 	ret
   116e0:	2005883a 	mov	r2,r4
   116e4:	f800283a 	ret
   116e8:	28c03fcc 	andi	r3,r5,255
   116ec:	1812923a 	slli	r9,r3,8
   116f0:	02ffbff4 	movhi	r11,65279
   116f4:	02a02074 	movhi	r10,32897
   116f8:	48d2b03a 	or	r9,r9,r3
   116fc:	4806943a 	slli	r3,r9,16
   11700:	5affbfc4 	addi	r11,r11,-257
   11704:	52a02004 	addi	r10,r10,-32640
   11708:	48d2b03a 	or	r9,r9,r3
   1170c:	20c00017 	ldw	r3,0(r4)
   11710:	48c6f03a 	xor	r3,r9,r3
   11714:	1acd883a 	add	r6,r3,r11
   11718:	00c6303a 	nor	r3,zero,r3
   1171c:	30c6703a 	and	r3,r6,r3
   11720:	1a86703a 	and	r3,r3,r10
   11724:	183fe01e 	bne	r3,zero,116a8 <__alt_data_end+0xffff16a8>
   11728:	10bfff04 	addi	r2,r2,-4
   1172c:	21000104 	addi	r4,r4,4
   11730:	40bff636 	bltu	r8,r2,1170c <__alt_data_end+0xffff170c>
   11734:	003fdb06 	br	116a4 <__alt_data_end+0xffff16a4>
   11738:	3005883a 	mov	r2,r6
   1173c:	003fd706 	br	1169c <__alt_data_end+0xffff169c>

00011740 <memcpy>:
   11740:	defffd04 	addi	sp,sp,-12
   11744:	dfc00215 	stw	ra,8(sp)
   11748:	dc400115 	stw	r17,4(sp)
   1174c:	dc000015 	stw	r16,0(sp)
   11750:	00c003c4 	movi	r3,15
   11754:	2005883a 	mov	r2,r4
   11758:	1980452e 	bgeu	r3,r6,11870 <memcpy+0x130>
   1175c:	2906b03a 	or	r3,r5,r4
   11760:	18c000cc 	andi	r3,r3,3
   11764:	1800441e 	bne	r3,zero,11878 <memcpy+0x138>
   11768:	347ffc04 	addi	r17,r6,-16
   1176c:	8822d13a 	srli	r17,r17,4
   11770:	28c00104 	addi	r3,r5,4
   11774:	23400104 	addi	r13,r4,4
   11778:	8820913a 	slli	r16,r17,4
   1177c:	2b000204 	addi	r12,r5,8
   11780:	22c00204 	addi	r11,r4,8
   11784:	84000504 	addi	r16,r16,20
   11788:	2a800304 	addi	r10,r5,12
   1178c:	22400304 	addi	r9,r4,12
   11790:	2c21883a 	add	r16,r5,r16
   11794:	2811883a 	mov	r8,r5
   11798:	200f883a 	mov	r7,r4
   1179c:	41000017 	ldw	r4,0(r8)
   117a0:	1fc00017 	ldw	ra,0(r3)
   117a4:	63c00017 	ldw	r15,0(r12)
   117a8:	39000015 	stw	r4,0(r7)
   117ac:	53800017 	ldw	r14,0(r10)
   117b0:	6fc00015 	stw	ra,0(r13)
   117b4:	5bc00015 	stw	r15,0(r11)
   117b8:	4b800015 	stw	r14,0(r9)
   117bc:	18c00404 	addi	r3,r3,16
   117c0:	39c00404 	addi	r7,r7,16
   117c4:	42000404 	addi	r8,r8,16
   117c8:	6b400404 	addi	r13,r13,16
   117cc:	63000404 	addi	r12,r12,16
   117d0:	5ac00404 	addi	r11,r11,16
   117d4:	52800404 	addi	r10,r10,16
   117d8:	4a400404 	addi	r9,r9,16
   117dc:	1c3fef1e 	bne	r3,r16,1179c <__alt_data_end+0xffff179c>
   117e0:	89c00044 	addi	r7,r17,1
   117e4:	380e913a 	slli	r7,r7,4
   117e8:	310003cc 	andi	r4,r6,15
   117ec:	02c000c4 	movi	r11,3
   117f0:	11c7883a 	add	r3,r2,r7
   117f4:	29cb883a 	add	r5,r5,r7
   117f8:	5900212e 	bgeu	r11,r4,11880 <memcpy+0x140>
   117fc:	1813883a 	mov	r9,r3
   11800:	2811883a 	mov	r8,r5
   11804:	200f883a 	mov	r7,r4
   11808:	42800017 	ldw	r10,0(r8)
   1180c:	4a400104 	addi	r9,r9,4
   11810:	39ffff04 	addi	r7,r7,-4
   11814:	4abfff15 	stw	r10,-4(r9)
   11818:	42000104 	addi	r8,r8,4
   1181c:	59fffa36 	bltu	r11,r7,11808 <__alt_data_end+0xffff1808>
   11820:	213fff04 	addi	r4,r4,-4
   11824:	2008d0ba 	srli	r4,r4,2
   11828:	318000cc 	andi	r6,r6,3
   1182c:	21000044 	addi	r4,r4,1
   11830:	2109883a 	add	r4,r4,r4
   11834:	2109883a 	add	r4,r4,r4
   11838:	1907883a 	add	r3,r3,r4
   1183c:	290b883a 	add	r5,r5,r4
   11840:	30000626 	beq	r6,zero,1185c <memcpy+0x11c>
   11844:	198d883a 	add	r6,r3,r6
   11848:	29c00003 	ldbu	r7,0(r5)
   1184c:	18c00044 	addi	r3,r3,1
   11850:	29400044 	addi	r5,r5,1
   11854:	19ffffc5 	stb	r7,-1(r3)
   11858:	19bffb1e 	bne	r3,r6,11848 <__alt_data_end+0xffff1848>
   1185c:	dfc00217 	ldw	ra,8(sp)
   11860:	dc400117 	ldw	r17,4(sp)
   11864:	dc000017 	ldw	r16,0(sp)
   11868:	dec00304 	addi	sp,sp,12
   1186c:	f800283a 	ret
   11870:	2007883a 	mov	r3,r4
   11874:	003ff206 	br	11840 <__alt_data_end+0xffff1840>
   11878:	2007883a 	mov	r3,r4
   1187c:	003ff106 	br	11844 <__alt_data_end+0xffff1844>
   11880:	200d883a 	mov	r6,r4
   11884:	003fee06 	br	11840 <__alt_data_end+0xffff1840>

00011888 <memmove>:
   11888:	2005883a 	mov	r2,r4
   1188c:	29000b2e 	bgeu	r5,r4,118bc <memmove+0x34>
   11890:	298f883a 	add	r7,r5,r6
   11894:	21c0092e 	bgeu	r4,r7,118bc <memmove+0x34>
   11898:	2187883a 	add	r3,r4,r6
   1189c:	198bc83a 	sub	r5,r3,r6
   118a0:	30004826 	beq	r6,zero,119c4 <memmove+0x13c>
   118a4:	39ffffc4 	addi	r7,r7,-1
   118a8:	39000003 	ldbu	r4,0(r7)
   118ac:	18ffffc4 	addi	r3,r3,-1
   118b0:	19000005 	stb	r4,0(r3)
   118b4:	28fffb1e 	bne	r5,r3,118a4 <__alt_data_end+0xffff18a4>
   118b8:	f800283a 	ret
   118bc:	00c003c4 	movi	r3,15
   118c0:	1980412e 	bgeu	r3,r6,119c8 <memmove+0x140>
   118c4:	2886b03a 	or	r3,r5,r2
   118c8:	18c000cc 	andi	r3,r3,3
   118cc:	1800401e 	bne	r3,zero,119d0 <memmove+0x148>
   118d0:	33fffc04 	addi	r15,r6,-16
   118d4:	781ed13a 	srli	r15,r15,4
   118d8:	28c00104 	addi	r3,r5,4
   118dc:	13400104 	addi	r13,r2,4
   118e0:	781c913a 	slli	r14,r15,4
   118e4:	2b000204 	addi	r12,r5,8
   118e8:	12c00204 	addi	r11,r2,8
   118ec:	73800504 	addi	r14,r14,20
   118f0:	2a800304 	addi	r10,r5,12
   118f4:	12400304 	addi	r9,r2,12
   118f8:	2b9d883a 	add	r14,r5,r14
   118fc:	2811883a 	mov	r8,r5
   11900:	100f883a 	mov	r7,r2
   11904:	41000017 	ldw	r4,0(r8)
   11908:	39c00404 	addi	r7,r7,16
   1190c:	18c00404 	addi	r3,r3,16
   11910:	393ffc15 	stw	r4,-16(r7)
   11914:	193ffc17 	ldw	r4,-16(r3)
   11918:	6b400404 	addi	r13,r13,16
   1191c:	5ac00404 	addi	r11,r11,16
   11920:	693ffc15 	stw	r4,-16(r13)
   11924:	61000017 	ldw	r4,0(r12)
   11928:	4a400404 	addi	r9,r9,16
   1192c:	42000404 	addi	r8,r8,16
   11930:	593ffc15 	stw	r4,-16(r11)
   11934:	51000017 	ldw	r4,0(r10)
   11938:	63000404 	addi	r12,r12,16
   1193c:	52800404 	addi	r10,r10,16
   11940:	493ffc15 	stw	r4,-16(r9)
   11944:	1bbfef1e 	bne	r3,r14,11904 <__alt_data_end+0xffff1904>
   11948:	79000044 	addi	r4,r15,1
   1194c:	2008913a 	slli	r4,r4,4
   11950:	328003cc 	andi	r10,r6,15
   11954:	02c000c4 	movi	r11,3
   11958:	1107883a 	add	r3,r2,r4
   1195c:	290b883a 	add	r5,r5,r4
   11960:	5a801e2e 	bgeu	r11,r10,119dc <memmove+0x154>
   11964:	1813883a 	mov	r9,r3
   11968:	2811883a 	mov	r8,r5
   1196c:	500f883a 	mov	r7,r10
   11970:	41000017 	ldw	r4,0(r8)
   11974:	4a400104 	addi	r9,r9,4
   11978:	39ffff04 	addi	r7,r7,-4
   1197c:	493fff15 	stw	r4,-4(r9)
   11980:	42000104 	addi	r8,r8,4
   11984:	59fffa36 	bltu	r11,r7,11970 <__alt_data_end+0xffff1970>
   11988:	513fff04 	addi	r4,r10,-4
   1198c:	2008d0ba 	srli	r4,r4,2
   11990:	318000cc 	andi	r6,r6,3
   11994:	21000044 	addi	r4,r4,1
   11998:	2109883a 	add	r4,r4,r4
   1199c:	2109883a 	add	r4,r4,r4
   119a0:	1907883a 	add	r3,r3,r4
   119a4:	290b883a 	add	r5,r5,r4
   119a8:	30000b26 	beq	r6,zero,119d8 <memmove+0x150>
   119ac:	198d883a 	add	r6,r3,r6
   119b0:	29c00003 	ldbu	r7,0(r5)
   119b4:	18c00044 	addi	r3,r3,1
   119b8:	29400044 	addi	r5,r5,1
   119bc:	19ffffc5 	stb	r7,-1(r3)
   119c0:	19bffb1e 	bne	r3,r6,119b0 <__alt_data_end+0xffff19b0>
   119c4:	f800283a 	ret
   119c8:	1007883a 	mov	r3,r2
   119cc:	003ff606 	br	119a8 <__alt_data_end+0xffff19a8>
   119d0:	1007883a 	mov	r3,r2
   119d4:	003ff506 	br	119ac <__alt_data_end+0xffff19ac>
   119d8:	f800283a 	ret
   119dc:	500d883a 	mov	r6,r10
   119e0:	003ff106 	br	119a8 <__alt_data_end+0xffff19a8>

000119e4 <memset>:
   119e4:	20c000cc 	andi	r3,r4,3
   119e8:	2005883a 	mov	r2,r4
   119ec:	18004426 	beq	r3,zero,11b00 <memset+0x11c>
   119f0:	31ffffc4 	addi	r7,r6,-1
   119f4:	30004026 	beq	r6,zero,11af8 <memset+0x114>
   119f8:	2813883a 	mov	r9,r5
   119fc:	200d883a 	mov	r6,r4
   11a00:	2007883a 	mov	r3,r4
   11a04:	00000406 	br	11a18 <memset+0x34>
   11a08:	3a3fffc4 	addi	r8,r7,-1
   11a0c:	31800044 	addi	r6,r6,1
   11a10:	38003926 	beq	r7,zero,11af8 <memset+0x114>
   11a14:	400f883a 	mov	r7,r8
   11a18:	18c00044 	addi	r3,r3,1
   11a1c:	32400005 	stb	r9,0(r6)
   11a20:	1a0000cc 	andi	r8,r3,3
   11a24:	403ff81e 	bne	r8,zero,11a08 <__alt_data_end+0xffff1a08>
   11a28:	010000c4 	movi	r4,3
   11a2c:	21c02d2e 	bgeu	r4,r7,11ae4 <memset+0x100>
   11a30:	29003fcc 	andi	r4,r5,255
   11a34:	200c923a 	slli	r6,r4,8
   11a38:	3108b03a 	or	r4,r6,r4
   11a3c:	200c943a 	slli	r6,r4,16
   11a40:	218cb03a 	or	r6,r4,r6
   11a44:	010003c4 	movi	r4,15
   11a48:	21c0182e 	bgeu	r4,r7,11aac <memset+0xc8>
   11a4c:	3b3ffc04 	addi	r12,r7,-16
   11a50:	6018d13a 	srli	r12,r12,4
   11a54:	1a000104 	addi	r8,r3,4
   11a58:	1ac00204 	addi	r11,r3,8
   11a5c:	6008913a 	slli	r4,r12,4
   11a60:	1a800304 	addi	r10,r3,12
   11a64:	1813883a 	mov	r9,r3
   11a68:	21000504 	addi	r4,r4,20
   11a6c:	1909883a 	add	r4,r3,r4
   11a70:	49800015 	stw	r6,0(r9)
   11a74:	41800015 	stw	r6,0(r8)
   11a78:	59800015 	stw	r6,0(r11)
   11a7c:	51800015 	stw	r6,0(r10)
   11a80:	42000404 	addi	r8,r8,16
   11a84:	4a400404 	addi	r9,r9,16
   11a88:	5ac00404 	addi	r11,r11,16
   11a8c:	52800404 	addi	r10,r10,16
   11a90:	413ff71e 	bne	r8,r4,11a70 <__alt_data_end+0xffff1a70>
   11a94:	63000044 	addi	r12,r12,1
   11a98:	6018913a 	slli	r12,r12,4
   11a9c:	39c003cc 	andi	r7,r7,15
   11aa0:	010000c4 	movi	r4,3
   11aa4:	1b07883a 	add	r3,r3,r12
   11aa8:	21c00e2e 	bgeu	r4,r7,11ae4 <memset+0x100>
   11aac:	1813883a 	mov	r9,r3
   11ab0:	3811883a 	mov	r8,r7
   11ab4:	010000c4 	movi	r4,3
   11ab8:	49800015 	stw	r6,0(r9)
   11abc:	423fff04 	addi	r8,r8,-4
   11ac0:	4a400104 	addi	r9,r9,4
   11ac4:	223ffc36 	bltu	r4,r8,11ab8 <__alt_data_end+0xffff1ab8>
   11ac8:	393fff04 	addi	r4,r7,-4
   11acc:	2008d0ba 	srli	r4,r4,2
   11ad0:	39c000cc 	andi	r7,r7,3
   11ad4:	21000044 	addi	r4,r4,1
   11ad8:	2109883a 	add	r4,r4,r4
   11adc:	2109883a 	add	r4,r4,r4
   11ae0:	1907883a 	add	r3,r3,r4
   11ae4:	38000526 	beq	r7,zero,11afc <memset+0x118>
   11ae8:	19cf883a 	add	r7,r3,r7
   11aec:	19400005 	stb	r5,0(r3)
   11af0:	18c00044 	addi	r3,r3,1
   11af4:	38fffd1e 	bne	r7,r3,11aec <__alt_data_end+0xffff1aec>
   11af8:	f800283a 	ret
   11afc:	f800283a 	ret
   11b00:	2007883a 	mov	r3,r4
   11b04:	300f883a 	mov	r7,r6
   11b08:	003fc706 	br	11a28 <__alt_data_end+0xffff1a28>

00011b0c <_realloc_r>:
   11b0c:	defff604 	addi	sp,sp,-40
   11b10:	dc800215 	stw	r18,8(sp)
   11b14:	dfc00915 	stw	ra,36(sp)
   11b18:	df000815 	stw	fp,32(sp)
   11b1c:	ddc00715 	stw	r23,28(sp)
   11b20:	dd800615 	stw	r22,24(sp)
   11b24:	dd400515 	stw	r21,20(sp)
   11b28:	dd000415 	stw	r20,16(sp)
   11b2c:	dcc00315 	stw	r19,12(sp)
   11b30:	dc400115 	stw	r17,4(sp)
   11b34:	dc000015 	stw	r16,0(sp)
   11b38:	3025883a 	mov	r18,r6
   11b3c:	2800b726 	beq	r5,zero,11e1c <_realloc_r+0x310>
   11b40:	282b883a 	mov	r21,r5
   11b44:	2029883a 	mov	r20,r4
   11b48:	00136440 	call	13644 <__malloc_lock>
   11b4c:	a8bfff17 	ldw	r2,-4(r21)
   11b50:	043fff04 	movi	r16,-4
   11b54:	90c002c4 	addi	r3,r18,11
   11b58:	01000584 	movi	r4,22
   11b5c:	acfffe04 	addi	r19,r21,-8
   11b60:	1420703a 	and	r16,r2,r16
   11b64:	20c0332e 	bgeu	r4,r3,11c34 <_realloc_r+0x128>
   11b68:	047ffe04 	movi	r17,-8
   11b6c:	1c62703a 	and	r17,r3,r17
   11b70:	8807883a 	mov	r3,r17
   11b74:	88005816 	blt	r17,zero,11cd8 <_realloc_r+0x1cc>
   11b78:	8c805736 	bltu	r17,r18,11cd8 <_realloc_r+0x1cc>
   11b7c:	80c0300e 	bge	r16,r3,11c40 <_realloc_r+0x134>
   11b80:	07000074 	movhi	fp,1
   11b84:	e7179b04 	addi	fp,fp,24172
   11b88:	e1c00217 	ldw	r7,8(fp)
   11b8c:	9c09883a 	add	r4,r19,r16
   11b90:	22000117 	ldw	r8,4(r4)
   11b94:	21c06326 	beq	r4,r7,11d24 <_realloc_r+0x218>
   11b98:	017fff84 	movi	r5,-2
   11b9c:	414a703a 	and	r5,r8,r5
   11ba0:	214b883a 	add	r5,r4,r5
   11ba4:	29800117 	ldw	r6,4(r5)
   11ba8:	3180004c 	andi	r6,r6,1
   11bac:	30003f26 	beq	r6,zero,11cac <_realloc_r+0x1a0>
   11bb0:	1080004c 	andi	r2,r2,1
   11bb4:	10008326 	beq	r2,zero,11dc4 <_realloc_r+0x2b8>
   11bb8:	900b883a 	mov	r5,r18
   11bbc:	a009883a 	mov	r4,r20
   11bc0:	0010e500 	call	10e50 <_malloc_r>
   11bc4:	1025883a 	mov	r18,r2
   11bc8:	10011e26 	beq	r2,zero,12044 <_realloc_r+0x538>
   11bcc:	a93fff17 	ldw	r4,-4(r21)
   11bd0:	10fffe04 	addi	r3,r2,-8
   11bd4:	00bfff84 	movi	r2,-2
   11bd8:	2084703a 	and	r2,r4,r2
   11bdc:	9885883a 	add	r2,r19,r2
   11be0:	1880ee26 	beq	r3,r2,11f9c <_realloc_r+0x490>
   11be4:	81bfff04 	addi	r6,r16,-4
   11be8:	00800904 	movi	r2,36
   11bec:	1180b836 	bltu	r2,r6,11ed0 <_realloc_r+0x3c4>
   11bf0:	00c004c4 	movi	r3,19
   11bf4:	19809636 	bltu	r3,r6,11e50 <_realloc_r+0x344>
   11bf8:	9005883a 	mov	r2,r18
   11bfc:	a807883a 	mov	r3,r21
   11c00:	19000017 	ldw	r4,0(r3)
   11c04:	11000015 	stw	r4,0(r2)
   11c08:	19000117 	ldw	r4,4(r3)
   11c0c:	11000115 	stw	r4,4(r2)
   11c10:	18c00217 	ldw	r3,8(r3)
   11c14:	10c00215 	stw	r3,8(r2)
   11c18:	a80b883a 	mov	r5,r21
   11c1c:	a009883a 	mov	r4,r20
   11c20:	00128d80 	call	128d8 <_free_r>
   11c24:	a009883a 	mov	r4,r20
   11c28:	00136680 	call	13668 <__malloc_unlock>
   11c2c:	9005883a 	mov	r2,r18
   11c30:	00001206 	br	11c7c <_realloc_r+0x170>
   11c34:	00c00404 	movi	r3,16
   11c38:	1823883a 	mov	r17,r3
   11c3c:	003fce06 	br	11b78 <__alt_data_end+0xffff1b78>
   11c40:	a825883a 	mov	r18,r21
   11c44:	8445c83a 	sub	r2,r16,r17
   11c48:	00c003c4 	movi	r3,15
   11c4c:	18802636 	bltu	r3,r2,11ce8 <_realloc_r+0x1dc>
   11c50:	99800117 	ldw	r6,4(r19)
   11c54:	9c07883a 	add	r3,r19,r16
   11c58:	3180004c 	andi	r6,r6,1
   11c5c:	3420b03a 	or	r16,r6,r16
   11c60:	9c000115 	stw	r16,4(r19)
   11c64:	18800117 	ldw	r2,4(r3)
   11c68:	10800054 	ori	r2,r2,1
   11c6c:	18800115 	stw	r2,4(r3)
   11c70:	a009883a 	mov	r4,r20
   11c74:	00136680 	call	13668 <__malloc_unlock>
   11c78:	9005883a 	mov	r2,r18
   11c7c:	dfc00917 	ldw	ra,36(sp)
   11c80:	df000817 	ldw	fp,32(sp)
   11c84:	ddc00717 	ldw	r23,28(sp)
   11c88:	dd800617 	ldw	r22,24(sp)
   11c8c:	dd400517 	ldw	r21,20(sp)
   11c90:	dd000417 	ldw	r20,16(sp)
   11c94:	dcc00317 	ldw	r19,12(sp)
   11c98:	dc800217 	ldw	r18,8(sp)
   11c9c:	dc400117 	ldw	r17,4(sp)
   11ca0:	dc000017 	ldw	r16,0(sp)
   11ca4:	dec00a04 	addi	sp,sp,40
   11ca8:	f800283a 	ret
   11cac:	017fff04 	movi	r5,-4
   11cb0:	414a703a 	and	r5,r8,r5
   11cb4:	814d883a 	add	r6,r16,r5
   11cb8:	30c01f16 	blt	r6,r3,11d38 <_realloc_r+0x22c>
   11cbc:	20800317 	ldw	r2,12(r4)
   11cc0:	20c00217 	ldw	r3,8(r4)
   11cc4:	a825883a 	mov	r18,r21
   11cc8:	3021883a 	mov	r16,r6
   11ccc:	18800315 	stw	r2,12(r3)
   11cd0:	10c00215 	stw	r3,8(r2)
   11cd4:	003fdb06 	br	11c44 <__alt_data_end+0xffff1c44>
   11cd8:	00800304 	movi	r2,12
   11cdc:	a0800015 	stw	r2,0(r20)
   11ce0:	0005883a 	mov	r2,zero
   11ce4:	003fe506 	br	11c7c <__alt_data_end+0xffff1c7c>
   11ce8:	98c00117 	ldw	r3,4(r19)
   11cec:	9c4b883a 	add	r5,r19,r17
   11cf0:	11000054 	ori	r4,r2,1
   11cf4:	18c0004c 	andi	r3,r3,1
   11cf8:	1c62b03a 	or	r17,r3,r17
   11cfc:	9c400115 	stw	r17,4(r19)
   11d00:	29000115 	stw	r4,4(r5)
   11d04:	2885883a 	add	r2,r5,r2
   11d08:	10c00117 	ldw	r3,4(r2)
   11d0c:	29400204 	addi	r5,r5,8
   11d10:	a009883a 	mov	r4,r20
   11d14:	18c00054 	ori	r3,r3,1
   11d18:	10c00115 	stw	r3,4(r2)
   11d1c:	00128d80 	call	128d8 <_free_r>
   11d20:	003fd306 	br	11c70 <__alt_data_end+0xffff1c70>
   11d24:	017fff04 	movi	r5,-4
   11d28:	414a703a 	and	r5,r8,r5
   11d2c:	89800404 	addi	r6,r17,16
   11d30:	8151883a 	add	r8,r16,r5
   11d34:	4180590e 	bge	r8,r6,11e9c <_realloc_r+0x390>
   11d38:	1080004c 	andi	r2,r2,1
   11d3c:	103f9e1e 	bne	r2,zero,11bb8 <__alt_data_end+0xffff1bb8>
   11d40:	adbffe17 	ldw	r22,-8(r21)
   11d44:	00bfff04 	movi	r2,-4
   11d48:	9dadc83a 	sub	r22,r19,r22
   11d4c:	b1800117 	ldw	r6,4(r22)
   11d50:	3084703a 	and	r2,r6,r2
   11d54:	20002026 	beq	r4,zero,11dd8 <_realloc_r+0x2cc>
   11d58:	80af883a 	add	r23,r16,r2
   11d5c:	b96f883a 	add	r23,r23,r5
   11d60:	21c05f26 	beq	r4,r7,11ee0 <_realloc_r+0x3d4>
   11d64:	b8c01c16 	blt	r23,r3,11dd8 <_realloc_r+0x2cc>
   11d68:	20800317 	ldw	r2,12(r4)
   11d6c:	20c00217 	ldw	r3,8(r4)
   11d70:	81bfff04 	addi	r6,r16,-4
   11d74:	01000904 	movi	r4,36
   11d78:	18800315 	stw	r2,12(r3)
   11d7c:	10c00215 	stw	r3,8(r2)
   11d80:	b0c00217 	ldw	r3,8(r22)
   11d84:	b0800317 	ldw	r2,12(r22)
   11d88:	b4800204 	addi	r18,r22,8
   11d8c:	18800315 	stw	r2,12(r3)
   11d90:	10c00215 	stw	r3,8(r2)
   11d94:	21801b36 	bltu	r4,r6,11e04 <_realloc_r+0x2f8>
   11d98:	008004c4 	movi	r2,19
   11d9c:	1180352e 	bgeu	r2,r6,11e74 <_realloc_r+0x368>
   11da0:	a8800017 	ldw	r2,0(r21)
   11da4:	b0800215 	stw	r2,8(r22)
   11da8:	a8800117 	ldw	r2,4(r21)
   11dac:	b0800315 	stw	r2,12(r22)
   11db0:	008006c4 	movi	r2,27
   11db4:	11807f36 	bltu	r2,r6,11fb4 <_realloc_r+0x4a8>
   11db8:	b0800404 	addi	r2,r22,16
   11dbc:	ad400204 	addi	r21,r21,8
   11dc0:	00002d06 	br	11e78 <_realloc_r+0x36c>
   11dc4:	adbffe17 	ldw	r22,-8(r21)
   11dc8:	00bfff04 	movi	r2,-4
   11dcc:	9dadc83a 	sub	r22,r19,r22
   11dd0:	b1000117 	ldw	r4,4(r22)
   11dd4:	2084703a 	and	r2,r4,r2
   11dd8:	b03f7726 	beq	r22,zero,11bb8 <__alt_data_end+0xffff1bb8>
   11ddc:	80af883a 	add	r23,r16,r2
   11de0:	b8ff7516 	blt	r23,r3,11bb8 <__alt_data_end+0xffff1bb8>
   11de4:	b0800317 	ldw	r2,12(r22)
   11de8:	b0c00217 	ldw	r3,8(r22)
   11dec:	81bfff04 	addi	r6,r16,-4
   11df0:	01000904 	movi	r4,36
   11df4:	18800315 	stw	r2,12(r3)
   11df8:	10c00215 	stw	r3,8(r2)
   11dfc:	b4800204 	addi	r18,r22,8
   11e00:	21bfe52e 	bgeu	r4,r6,11d98 <__alt_data_end+0xffff1d98>
   11e04:	a80b883a 	mov	r5,r21
   11e08:	9009883a 	mov	r4,r18
   11e0c:	00118880 	call	11888 <memmove>
   11e10:	b821883a 	mov	r16,r23
   11e14:	b027883a 	mov	r19,r22
   11e18:	003f8a06 	br	11c44 <__alt_data_end+0xffff1c44>
   11e1c:	300b883a 	mov	r5,r6
   11e20:	dfc00917 	ldw	ra,36(sp)
   11e24:	df000817 	ldw	fp,32(sp)
   11e28:	ddc00717 	ldw	r23,28(sp)
   11e2c:	dd800617 	ldw	r22,24(sp)
   11e30:	dd400517 	ldw	r21,20(sp)
   11e34:	dd000417 	ldw	r20,16(sp)
   11e38:	dcc00317 	ldw	r19,12(sp)
   11e3c:	dc800217 	ldw	r18,8(sp)
   11e40:	dc400117 	ldw	r17,4(sp)
   11e44:	dc000017 	ldw	r16,0(sp)
   11e48:	dec00a04 	addi	sp,sp,40
   11e4c:	0010e501 	jmpi	10e50 <_malloc_r>
   11e50:	a8c00017 	ldw	r3,0(r21)
   11e54:	90c00015 	stw	r3,0(r18)
   11e58:	a8c00117 	ldw	r3,4(r21)
   11e5c:	90c00115 	stw	r3,4(r18)
   11e60:	00c006c4 	movi	r3,27
   11e64:	19804536 	bltu	r3,r6,11f7c <_realloc_r+0x470>
   11e68:	90800204 	addi	r2,r18,8
   11e6c:	a8c00204 	addi	r3,r21,8
   11e70:	003f6306 	br	11c00 <__alt_data_end+0xffff1c00>
   11e74:	9005883a 	mov	r2,r18
   11e78:	a8c00017 	ldw	r3,0(r21)
   11e7c:	b821883a 	mov	r16,r23
   11e80:	b027883a 	mov	r19,r22
   11e84:	10c00015 	stw	r3,0(r2)
   11e88:	a8c00117 	ldw	r3,4(r21)
   11e8c:	10c00115 	stw	r3,4(r2)
   11e90:	a8c00217 	ldw	r3,8(r21)
   11e94:	10c00215 	stw	r3,8(r2)
   11e98:	003f6a06 	br	11c44 <__alt_data_end+0xffff1c44>
   11e9c:	9c67883a 	add	r19,r19,r17
   11ea0:	4445c83a 	sub	r2,r8,r17
   11ea4:	e4c00215 	stw	r19,8(fp)
   11ea8:	10800054 	ori	r2,r2,1
   11eac:	98800115 	stw	r2,4(r19)
   11eb0:	a8bfff17 	ldw	r2,-4(r21)
   11eb4:	a009883a 	mov	r4,r20
   11eb8:	1080004c 	andi	r2,r2,1
   11ebc:	1462b03a 	or	r17,r2,r17
   11ec0:	ac7fff15 	stw	r17,-4(r21)
   11ec4:	00136680 	call	13668 <__malloc_unlock>
   11ec8:	a805883a 	mov	r2,r21
   11ecc:	003f6b06 	br	11c7c <__alt_data_end+0xffff1c7c>
   11ed0:	a80b883a 	mov	r5,r21
   11ed4:	9009883a 	mov	r4,r18
   11ed8:	00118880 	call	11888 <memmove>
   11edc:	003f4e06 	br	11c18 <__alt_data_end+0xffff1c18>
   11ee0:	89000404 	addi	r4,r17,16
   11ee4:	b93fbc16 	blt	r23,r4,11dd8 <__alt_data_end+0xffff1dd8>
   11ee8:	b0800317 	ldw	r2,12(r22)
   11eec:	b0c00217 	ldw	r3,8(r22)
   11ef0:	81bfff04 	addi	r6,r16,-4
   11ef4:	01000904 	movi	r4,36
   11ef8:	18800315 	stw	r2,12(r3)
   11efc:	10c00215 	stw	r3,8(r2)
   11f00:	b4800204 	addi	r18,r22,8
   11f04:	21804336 	bltu	r4,r6,12014 <_realloc_r+0x508>
   11f08:	008004c4 	movi	r2,19
   11f0c:	11803f2e 	bgeu	r2,r6,1200c <_realloc_r+0x500>
   11f10:	a8800017 	ldw	r2,0(r21)
   11f14:	b0800215 	stw	r2,8(r22)
   11f18:	a8800117 	ldw	r2,4(r21)
   11f1c:	b0800315 	stw	r2,12(r22)
   11f20:	008006c4 	movi	r2,27
   11f24:	11803f36 	bltu	r2,r6,12024 <_realloc_r+0x518>
   11f28:	b0800404 	addi	r2,r22,16
   11f2c:	ad400204 	addi	r21,r21,8
   11f30:	a8c00017 	ldw	r3,0(r21)
   11f34:	10c00015 	stw	r3,0(r2)
   11f38:	a8c00117 	ldw	r3,4(r21)
   11f3c:	10c00115 	stw	r3,4(r2)
   11f40:	a8c00217 	ldw	r3,8(r21)
   11f44:	10c00215 	stw	r3,8(r2)
   11f48:	b447883a 	add	r3,r22,r17
   11f4c:	bc45c83a 	sub	r2,r23,r17
   11f50:	e0c00215 	stw	r3,8(fp)
   11f54:	10800054 	ori	r2,r2,1
   11f58:	18800115 	stw	r2,4(r3)
   11f5c:	b0800117 	ldw	r2,4(r22)
   11f60:	a009883a 	mov	r4,r20
   11f64:	1080004c 	andi	r2,r2,1
   11f68:	1462b03a 	or	r17,r2,r17
   11f6c:	b4400115 	stw	r17,4(r22)
   11f70:	00136680 	call	13668 <__malloc_unlock>
   11f74:	9005883a 	mov	r2,r18
   11f78:	003f4006 	br	11c7c <__alt_data_end+0xffff1c7c>
   11f7c:	a8c00217 	ldw	r3,8(r21)
   11f80:	90c00215 	stw	r3,8(r18)
   11f84:	a8c00317 	ldw	r3,12(r21)
   11f88:	90c00315 	stw	r3,12(r18)
   11f8c:	30801126 	beq	r6,r2,11fd4 <_realloc_r+0x4c8>
   11f90:	90800404 	addi	r2,r18,16
   11f94:	a8c00404 	addi	r3,r21,16
   11f98:	003f1906 	br	11c00 <__alt_data_end+0xffff1c00>
   11f9c:	90ffff17 	ldw	r3,-4(r18)
   11fa0:	00bfff04 	movi	r2,-4
   11fa4:	a825883a 	mov	r18,r21
   11fa8:	1884703a 	and	r2,r3,r2
   11fac:	80a1883a 	add	r16,r16,r2
   11fb0:	003f2406 	br	11c44 <__alt_data_end+0xffff1c44>
   11fb4:	a8800217 	ldw	r2,8(r21)
   11fb8:	b0800415 	stw	r2,16(r22)
   11fbc:	a8800317 	ldw	r2,12(r21)
   11fc0:	b0800515 	stw	r2,20(r22)
   11fc4:	31000a26 	beq	r6,r4,11ff0 <_realloc_r+0x4e4>
   11fc8:	b0800604 	addi	r2,r22,24
   11fcc:	ad400404 	addi	r21,r21,16
   11fd0:	003fa906 	br	11e78 <__alt_data_end+0xffff1e78>
   11fd4:	a9000417 	ldw	r4,16(r21)
   11fd8:	90800604 	addi	r2,r18,24
   11fdc:	a8c00604 	addi	r3,r21,24
   11fe0:	91000415 	stw	r4,16(r18)
   11fe4:	a9000517 	ldw	r4,20(r21)
   11fe8:	91000515 	stw	r4,20(r18)
   11fec:	003f0406 	br	11c00 <__alt_data_end+0xffff1c00>
   11ff0:	a8c00417 	ldw	r3,16(r21)
   11ff4:	ad400604 	addi	r21,r21,24
   11ff8:	b0800804 	addi	r2,r22,32
   11ffc:	b0c00615 	stw	r3,24(r22)
   12000:	a8ffff17 	ldw	r3,-4(r21)
   12004:	b0c00715 	stw	r3,28(r22)
   12008:	003f9b06 	br	11e78 <__alt_data_end+0xffff1e78>
   1200c:	9005883a 	mov	r2,r18
   12010:	003fc706 	br	11f30 <__alt_data_end+0xffff1f30>
   12014:	a80b883a 	mov	r5,r21
   12018:	9009883a 	mov	r4,r18
   1201c:	00118880 	call	11888 <memmove>
   12020:	003fc906 	br	11f48 <__alt_data_end+0xffff1f48>
   12024:	a8800217 	ldw	r2,8(r21)
   12028:	b0800415 	stw	r2,16(r22)
   1202c:	a8800317 	ldw	r2,12(r21)
   12030:	b0800515 	stw	r2,20(r22)
   12034:	31000726 	beq	r6,r4,12054 <_realloc_r+0x548>
   12038:	b0800604 	addi	r2,r22,24
   1203c:	ad400404 	addi	r21,r21,16
   12040:	003fbb06 	br	11f30 <__alt_data_end+0xffff1f30>
   12044:	a009883a 	mov	r4,r20
   12048:	00136680 	call	13668 <__malloc_unlock>
   1204c:	0005883a 	mov	r2,zero
   12050:	003f0a06 	br	11c7c <__alt_data_end+0xffff1c7c>
   12054:	a8c00417 	ldw	r3,16(r21)
   12058:	ad400604 	addi	r21,r21,24
   1205c:	b0800804 	addi	r2,r22,32
   12060:	b0c00615 	stw	r3,24(r22)
   12064:	a8ffff17 	ldw	r3,-4(r21)
   12068:	b0c00715 	stw	r3,28(r22)
   1206c:	003fb006 	br	11f30 <__alt_data_end+0xffff1f30>

00012070 <_sbrk_r>:
   12070:	defffd04 	addi	sp,sp,-12
   12074:	dc000015 	stw	r16,0(sp)
   12078:	040000b4 	movhi	r16,2
   1207c:	dc400115 	stw	r17,4(sp)
   12080:	8423cb04 	addi	r16,r16,-28884
   12084:	2023883a 	mov	r17,r4
   12088:	2809883a 	mov	r4,r5
   1208c:	dfc00215 	stw	ra,8(sp)
   12090:	80000015 	stw	zero,0(r16)
   12094:	00138280 	call	13828 <sbrk>
   12098:	00ffffc4 	movi	r3,-1
   1209c:	10c00526 	beq	r2,r3,120b4 <_sbrk_r+0x44>
   120a0:	dfc00217 	ldw	ra,8(sp)
   120a4:	dc400117 	ldw	r17,4(sp)
   120a8:	dc000017 	ldw	r16,0(sp)
   120ac:	dec00304 	addi	sp,sp,12
   120b0:	f800283a 	ret
   120b4:	80c00017 	ldw	r3,0(r16)
   120b8:	183ff926 	beq	r3,zero,120a0 <__alt_data_end+0xffff20a0>
   120bc:	88c00015 	stw	r3,0(r17)
   120c0:	003ff706 	br	120a0 <__alt_data_end+0xffff20a0>

000120c4 <__sread>:
   120c4:	defffe04 	addi	sp,sp,-8
   120c8:	dc000015 	stw	r16,0(sp)
   120cc:	2821883a 	mov	r16,r5
   120d0:	2940038f 	ldh	r5,14(r5)
   120d4:	dfc00115 	stw	ra,4(sp)
   120d8:	0012e040 	call	12e04 <_read_r>
   120dc:	10000716 	blt	r2,zero,120fc <__sread+0x38>
   120e0:	80c01417 	ldw	r3,80(r16)
   120e4:	1887883a 	add	r3,r3,r2
   120e8:	80c01415 	stw	r3,80(r16)
   120ec:	dfc00117 	ldw	ra,4(sp)
   120f0:	dc000017 	ldw	r16,0(sp)
   120f4:	dec00204 	addi	sp,sp,8
   120f8:	f800283a 	ret
   120fc:	80c0030b 	ldhu	r3,12(r16)
   12100:	18fbffcc 	andi	r3,r3,61439
   12104:	80c0030d 	sth	r3,12(r16)
   12108:	dfc00117 	ldw	ra,4(sp)
   1210c:	dc000017 	ldw	r16,0(sp)
   12110:	dec00204 	addi	sp,sp,8
   12114:	f800283a 	ret

00012118 <__seofread>:
   12118:	0005883a 	mov	r2,zero
   1211c:	f800283a 	ret

00012120 <__swrite>:
   12120:	2880030b 	ldhu	r2,12(r5)
   12124:	defffb04 	addi	sp,sp,-20
   12128:	dcc00315 	stw	r19,12(sp)
   1212c:	dc800215 	stw	r18,8(sp)
   12130:	dc400115 	stw	r17,4(sp)
   12134:	dc000015 	stw	r16,0(sp)
   12138:	dfc00415 	stw	ra,16(sp)
   1213c:	10c0400c 	andi	r3,r2,256
   12140:	2821883a 	mov	r16,r5
   12144:	2023883a 	mov	r17,r4
   12148:	3025883a 	mov	r18,r6
   1214c:	3827883a 	mov	r19,r7
   12150:	18000526 	beq	r3,zero,12168 <__swrite+0x48>
   12154:	2940038f 	ldh	r5,14(r5)
   12158:	01c00084 	movi	r7,2
   1215c:	000d883a 	mov	r6,zero
   12160:	0012be80 	call	12be8 <_lseek_r>
   12164:	8080030b 	ldhu	r2,12(r16)
   12168:	8140038f 	ldh	r5,14(r16)
   1216c:	10bbffcc 	andi	r2,r2,61439
   12170:	980f883a 	mov	r7,r19
   12174:	900d883a 	mov	r6,r18
   12178:	8809883a 	mov	r4,r17
   1217c:	8080030d 	sth	r2,12(r16)
   12180:	dfc00417 	ldw	ra,16(sp)
   12184:	dcc00317 	ldw	r19,12(sp)
   12188:	dc800217 	ldw	r18,8(sp)
   1218c:	dc400117 	ldw	r17,4(sp)
   12190:	dc000017 	ldw	r16,0(sp)
   12194:	dec00504 	addi	sp,sp,20
   12198:	00122001 	jmpi	12200 <_write_r>

0001219c <__sseek>:
   1219c:	defffe04 	addi	sp,sp,-8
   121a0:	dc000015 	stw	r16,0(sp)
   121a4:	2821883a 	mov	r16,r5
   121a8:	2940038f 	ldh	r5,14(r5)
   121ac:	dfc00115 	stw	ra,4(sp)
   121b0:	0012be80 	call	12be8 <_lseek_r>
   121b4:	00ffffc4 	movi	r3,-1
   121b8:	10c00826 	beq	r2,r3,121dc <__sseek+0x40>
   121bc:	80c0030b 	ldhu	r3,12(r16)
   121c0:	80801415 	stw	r2,80(r16)
   121c4:	18c40014 	ori	r3,r3,4096
   121c8:	80c0030d 	sth	r3,12(r16)
   121cc:	dfc00117 	ldw	ra,4(sp)
   121d0:	dc000017 	ldw	r16,0(sp)
   121d4:	dec00204 	addi	sp,sp,8
   121d8:	f800283a 	ret
   121dc:	80c0030b 	ldhu	r3,12(r16)
   121e0:	18fbffcc 	andi	r3,r3,61439
   121e4:	80c0030d 	sth	r3,12(r16)
   121e8:	dfc00117 	ldw	ra,4(sp)
   121ec:	dc000017 	ldw	r16,0(sp)
   121f0:	dec00204 	addi	sp,sp,8
   121f4:	f800283a 	ret

000121f8 <__sclose>:
   121f8:	2940038f 	ldh	r5,14(r5)
   121fc:	00123b41 	jmpi	123b4 <_close_r>

00012200 <_write_r>:
   12200:	defffd04 	addi	sp,sp,-12
   12204:	2805883a 	mov	r2,r5
   12208:	dc000015 	stw	r16,0(sp)
   1220c:	040000b4 	movhi	r16,2
   12210:	dc400115 	stw	r17,4(sp)
   12214:	300b883a 	mov	r5,r6
   12218:	8423cb04 	addi	r16,r16,-28884
   1221c:	2023883a 	mov	r17,r4
   12220:	380d883a 	mov	r6,r7
   12224:	1009883a 	mov	r4,r2
   12228:	dfc00215 	stw	ra,8(sp)
   1222c:	80000015 	stw	zero,0(r16)
   12230:	00139440 	call	13944 <write>
   12234:	00ffffc4 	movi	r3,-1
   12238:	10c00526 	beq	r2,r3,12250 <_write_r+0x50>
   1223c:	dfc00217 	ldw	ra,8(sp)
   12240:	dc400117 	ldw	r17,4(sp)
   12244:	dc000017 	ldw	r16,0(sp)
   12248:	dec00304 	addi	sp,sp,12
   1224c:	f800283a 	ret
   12250:	80c00017 	ldw	r3,0(r16)
   12254:	183ff926 	beq	r3,zero,1223c <__alt_data_end+0xffff223c>
   12258:	88c00015 	stw	r3,0(r17)
   1225c:	003ff706 	br	1223c <__alt_data_end+0xffff223c>

00012260 <__swsetup_r>:
   12260:	00800074 	movhi	r2,1
   12264:	defffd04 	addi	sp,sp,-12
   12268:	109d2004 	addi	r2,r2,29824
   1226c:	dc400115 	stw	r17,4(sp)
   12270:	2023883a 	mov	r17,r4
   12274:	11000017 	ldw	r4,0(r2)
   12278:	dc000015 	stw	r16,0(sp)
   1227c:	dfc00215 	stw	ra,8(sp)
   12280:	2821883a 	mov	r16,r5
   12284:	20000226 	beq	r4,zero,12290 <__swsetup_r+0x30>
   12288:	20800e17 	ldw	r2,56(r4)
   1228c:	10003126 	beq	r2,zero,12354 <__swsetup_r+0xf4>
   12290:	8080030b 	ldhu	r2,12(r16)
   12294:	10c0020c 	andi	r3,r2,8
   12298:	1009883a 	mov	r4,r2
   1229c:	18000f26 	beq	r3,zero,122dc <__swsetup_r+0x7c>
   122a0:	80c00417 	ldw	r3,16(r16)
   122a4:	18001526 	beq	r3,zero,122fc <__swsetup_r+0x9c>
   122a8:	1100004c 	andi	r4,r2,1
   122ac:	20001c1e 	bne	r4,zero,12320 <__swsetup_r+0xc0>
   122b0:	1080008c 	andi	r2,r2,2
   122b4:	1000291e 	bne	r2,zero,1235c <__swsetup_r+0xfc>
   122b8:	80800517 	ldw	r2,20(r16)
   122bc:	80800215 	stw	r2,8(r16)
   122c0:	18001c26 	beq	r3,zero,12334 <__swsetup_r+0xd4>
   122c4:	0005883a 	mov	r2,zero
   122c8:	dfc00217 	ldw	ra,8(sp)
   122cc:	dc400117 	ldw	r17,4(sp)
   122d0:	dc000017 	ldw	r16,0(sp)
   122d4:	dec00304 	addi	sp,sp,12
   122d8:	f800283a 	ret
   122dc:	2080040c 	andi	r2,r4,16
   122e0:	10002e26 	beq	r2,zero,1239c <__swsetup_r+0x13c>
   122e4:	2080010c 	andi	r2,r4,4
   122e8:	10001e1e 	bne	r2,zero,12364 <__swsetup_r+0x104>
   122ec:	80c00417 	ldw	r3,16(r16)
   122f0:	20800214 	ori	r2,r4,8
   122f4:	8080030d 	sth	r2,12(r16)
   122f8:	183feb1e 	bne	r3,zero,122a8 <__alt_data_end+0xffff22a8>
   122fc:	1100a00c 	andi	r4,r2,640
   12300:	01408004 	movi	r5,512
   12304:	217fe826 	beq	r4,r5,122a8 <__alt_data_end+0xffff22a8>
   12308:	800b883a 	mov	r5,r16
   1230c:	8809883a 	mov	r4,r17
   12310:	0012c480 	call	12c48 <__smakebuf_r>
   12314:	8080030b 	ldhu	r2,12(r16)
   12318:	80c00417 	ldw	r3,16(r16)
   1231c:	003fe206 	br	122a8 <__alt_data_end+0xffff22a8>
   12320:	80800517 	ldw	r2,20(r16)
   12324:	80000215 	stw	zero,8(r16)
   12328:	0085c83a 	sub	r2,zero,r2
   1232c:	80800615 	stw	r2,24(r16)
   12330:	183fe41e 	bne	r3,zero,122c4 <__alt_data_end+0xffff22c4>
   12334:	80c0030b 	ldhu	r3,12(r16)
   12338:	0005883a 	mov	r2,zero
   1233c:	1900200c 	andi	r4,r3,128
   12340:	203fe126 	beq	r4,zero,122c8 <__alt_data_end+0xffff22c8>
   12344:	18c01014 	ori	r3,r3,64
   12348:	80c0030d 	sth	r3,12(r16)
   1234c:	00bfffc4 	movi	r2,-1
   12350:	003fdd06 	br	122c8 <__alt_data_end+0xffff22c8>
   12354:	00107bc0 	call	107bc <__sinit>
   12358:	003fcd06 	br	12290 <__alt_data_end+0xffff2290>
   1235c:	0005883a 	mov	r2,zero
   12360:	003fd606 	br	122bc <__alt_data_end+0xffff22bc>
   12364:	81400c17 	ldw	r5,48(r16)
   12368:	28000626 	beq	r5,zero,12384 <__swsetup_r+0x124>
   1236c:	80801004 	addi	r2,r16,64
   12370:	28800326 	beq	r5,r2,12380 <__swsetup_r+0x120>
   12374:	8809883a 	mov	r4,r17
   12378:	00128d80 	call	128d8 <_free_r>
   1237c:	8100030b 	ldhu	r4,12(r16)
   12380:	80000c15 	stw	zero,48(r16)
   12384:	80c00417 	ldw	r3,16(r16)
   12388:	00bff6c4 	movi	r2,-37
   1238c:	1108703a 	and	r4,r2,r4
   12390:	80000115 	stw	zero,4(r16)
   12394:	80c00015 	stw	r3,0(r16)
   12398:	003fd506 	br	122f0 <__alt_data_end+0xffff22f0>
   1239c:	00800244 	movi	r2,9
   123a0:	88800015 	stw	r2,0(r17)
   123a4:	20801014 	ori	r2,r4,64
   123a8:	8080030d 	sth	r2,12(r16)
   123ac:	00bfffc4 	movi	r2,-1
   123b0:	003fc506 	br	122c8 <__alt_data_end+0xffff22c8>

000123b4 <_close_r>:
   123b4:	defffd04 	addi	sp,sp,-12
   123b8:	dc000015 	stw	r16,0(sp)
   123bc:	040000b4 	movhi	r16,2
   123c0:	dc400115 	stw	r17,4(sp)
   123c4:	8423cb04 	addi	r16,r16,-28884
   123c8:	2023883a 	mov	r17,r4
   123cc:	2809883a 	mov	r4,r5
   123d0:	dfc00215 	stw	ra,8(sp)
   123d4:	80000015 	stw	zero,0(r16)
   123d8:	00131040 	call	13104 <close>
   123dc:	00ffffc4 	movi	r3,-1
   123e0:	10c00526 	beq	r2,r3,123f8 <_close_r+0x44>
   123e4:	dfc00217 	ldw	ra,8(sp)
   123e8:	dc400117 	ldw	r17,4(sp)
   123ec:	dc000017 	ldw	r16,0(sp)
   123f0:	dec00304 	addi	sp,sp,12
   123f4:	f800283a 	ret
   123f8:	80c00017 	ldw	r3,0(r16)
   123fc:	183ff926 	beq	r3,zero,123e4 <__alt_data_end+0xffff23e4>
   12400:	88c00015 	stw	r3,0(r17)
   12404:	003ff706 	br	123e4 <__alt_data_end+0xffff23e4>

00012408 <_fclose_r>:
   12408:	28003926 	beq	r5,zero,124f0 <_fclose_r+0xe8>
   1240c:	defffc04 	addi	sp,sp,-16
   12410:	dc400115 	stw	r17,4(sp)
   12414:	dc000015 	stw	r16,0(sp)
   12418:	dfc00315 	stw	ra,12(sp)
   1241c:	dc800215 	stw	r18,8(sp)
   12420:	2023883a 	mov	r17,r4
   12424:	2821883a 	mov	r16,r5
   12428:	20000226 	beq	r4,zero,12434 <_fclose_r+0x2c>
   1242c:	20800e17 	ldw	r2,56(r4)
   12430:	10002726 	beq	r2,zero,124d0 <_fclose_r+0xc8>
   12434:	8080030f 	ldh	r2,12(r16)
   12438:	1000071e 	bne	r2,zero,12458 <_fclose_r+0x50>
   1243c:	0005883a 	mov	r2,zero
   12440:	dfc00317 	ldw	ra,12(sp)
   12444:	dc800217 	ldw	r18,8(sp)
   12448:	dc400117 	ldw	r17,4(sp)
   1244c:	dc000017 	ldw	r16,0(sp)
   12450:	dec00404 	addi	sp,sp,16
   12454:	f800283a 	ret
   12458:	800b883a 	mov	r5,r16
   1245c:	8809883a 	mov	r4,r17
   12460:	001250c0 	call	1250c <__sflush_r>
   12464:	1025883a 	mov	r18,r2
   12468:	80800b17 	ldw	r2,44(r16)
   1246c:	10000426 	beq	r2,zero,12480 <_fclose_r+0x78>
   12470:	81400717 	ldw	r5,28(r16)
   12474:	8809883a 	mov	r4,r17
   12478:	103ee83a 	callr	r2
   1247c:	10001616 	blt	r2,zero,124d8 <_fclose_r+0xd0>
   12480:	8080030b 	ldhu	r2,12(r16)
   12484:	1080200c 	andi	r2,r2,128
   12488:	1000151e 	bne	r2,zero,124e0 <_fclose_r+0xd8>
   1248c:	81400c17 	ldw	r5,48(r16)
   12490:	28000526 	beq	r5,zero,124a8 <_fclose_r+0xa0>
   12494:	80801004 	addi	r2,r16,64
   12498:	28800226 	beq	r5,r2,124a4 <_fclose_r+0x9c>
   1249c:	8809883a 	mov	r4,r17
   124a0:	00128d80 	call	128d8 <_free_r>
   124a4:	80000c15 	stw	zero,48(r16)
   124a8:	81401117 	ldw	r5,68(r16)
   124ac:	28000326 	beq	r5,zero,124bc <_fclose_r+0xb4>
   124b0:	8809883a 	mov	r4,r17
   124b4:	00128d80 	call	128d8 <_free_r>
   124b8:	80001115 	stw	zero,68(r16)
   124bc:	00107cc0 	call	107cc <__sfp_lock_acquire>
   124c0:	8000030d 	sth	zero,12(r16)
   124c4:	00107d00 	call	107d0 <__sfp_lock_release>
   124c8:	9005883a 	mov	r2,r18
   124cc:	003fdc06 	br	12440 <__alt_data_end+0xffff2440>
   124d0:	00107bc0 	call	107bc <__sinit>
   124d4:	003fd706 	br	12434 <__alt_data_end+0xffff2434>
   124d8:	04bfffc4 	movi	r18,-1
   124dc:	003fe806 	br	12480 <__alt_data_end+0xffff2480>
   124e0:	81400417 	ldw	r5,16(r16)
   124e4:	8809883a 	mov	r4,r17
   124e8:	00128d80 	call	128d8 <_free_r>
   124ec:	003fe706 	br	1248c <__alt_data_end+0xffff248c>
   124f0:	0005883a 	mov	r2,zero
   124f4:	f800283a 	ret

000124f8 <fclose>:
   124f8:	00800074 	movhi	r2,1
   124fc:	109d2004 	addi	r2,r2,29824
   12500:	200b883a 	mov	r5,r4
   12504:	11000017 	ldw	r4,0(r2)
   12508:	00124081 	jmpi	12408 <_fclose_r>

0001250c <__sflush_r>:
   1250c:	2880030b 	ldhu	r2,12(r5)
   12510:	defffb04 	addi	sp,sp,-20
   12514:	dcc00315 	stw	r19,12(sp)
   12518:	dc400115 	stw	r17,4(sp)
   1251c:	dfc00415 	stw	ra,16(sp)
   12520:	dc800215 	stw	r18,8(sp)
   12524:	dc000015 	stw	r16,0(sp)
   12528:	10c0020c 	andi	r3,r2,8
   1252c:	2823883a 	mov	r17,r5
   12530:	2027883a 	mov	r19,r4
   12534:	1800311e 	bne	r3,zero,125fc <__sflush_r+0xf0>
   12538:	28c00117 	ldw	r3,4(r5)
   1253c:	10820014 	ori	r2,r2,2048
   12540:	2880030d 	sth	r2,12(r5)
   12544:	00c04b0e 	bge	zero,r3,12674 <__sflush_r+0x168>
   12548:	8a000a17 	ldw	r8,40(r17)
   1254c:	40002326 	beq	r8,zero,125dc <__sflush_r+0xd0>
   12550:	9c000017 	ldw	r16,0(r19)
   12554:	10c4000c 	andi	r3,r2,4096
   12558:	98000015 	stw	zero,0(r19)
   1255c:	18004826 	beq	r3,zero,12680 <__sflush_r+0x174>
   12560:	89801417 	ldw	r6,80(r17)
   12564:	10c0010c 	andi	r3,r2,4
   12568:	18000626 	beq	r3,zero,12584 <__sflush_r+0x78>
   1256c:	88c00117 	ldw	r3,4(r17)
   12570:	88800c17 	ldw	r2,48(r17)
   12574:	30cdc83a 	sub	r6,r6,r3
   12578:	10000226 	beq	r2,zero,12584 <__sflush_r+0x78>
   1257c:	88800f17 	ldw	r2,60(r17)
   12580:	308dc83a 	sub	r6,r6,r2
   12584:	89400717 	ldw	r5,28(r17)
   12588:	000f883a 	mov	r7,zero
   1258c:	9809883a 	mov	r4,r19
   12590:	403ee83a 	callr	r8
   12594:	00ffffc4 	movi	r3,-1
   12598:	10c04426 	beq	r2,r3,126ac <__sflush_r+0x1a0>
   1259c:	88c0030b 	ldhu	r3,12(r17)
   125a0:	89000417 	ldw	r4,16(r17)
   125a4:	88000115 	stw	zero,4(r17)
   125a8:	197dffcc 	andi	r5,r3,63487
   125ac:	8940030d 	sth	r5,12(r17)
   125b0:	89000015 	stw	r4,0(r17)
   125b4:	18c4000c 	andi	r3,r3,4096
   125b8:	18002c1e 	bne	r3,zero,1266c <__sflush_r+0x160>
   125bc:	89400c17 	ldw	r5,48(r17)
   125c0:	9c000015 	stw	r16,0(r19)
   125c4:	28000526 	beq	r5,zero,125dc <__sflush_r+0xd0>
   125c8:	88801004 	addi	r2,r17,64
   125cc:	28800226 	beq	r5,r2,125d8 <__sflush_r+0xcc>
   125d0:	9809883a 	mov	r4,r19
   125d4:	00128d80 	call	128d8 <_free_r>
   125d8:	88000c15 	stw	zero,48(r17)
   125dc:	0005883a 	mov	r2,zero
   125e0:	dfc00417 	ldw	ra,16(sp)
   125e4:	dcc00317 	ldw	r19,12(sp)
   125e8:	dc800217 	ldw	r18,8(sp)
   125ec:	dc400117 	ldw	r17,4(sp)
   125f0:	dc000017 	ldw	r16,0(sp)
   125f4:	dec00504 	addi	sp,sp,20
   125f8:	f800283a 	ret
   125fc:	2c800417 	ldw	r18,16(r5)
   12600:	903ff626 	beq	r18,zero,125dc <__alt_data_end+0xffff25dc>
   12604:	2c000017 	ldw	r16,0(r5)
   12608:	108000cc 	andi	r2,r2,3
   1260c:	2c800015 	stw	r18,0(r5)
   12610:	84a1c83a 	sub	r16,r16,r18
   12614:	1000131e 	bne	r2,zero,12664 <__sflush_r+0x158>
   12618:	28800517 	ldw	r2,20(r5)
   1261c:	88800215 	stw	r2,8(r17)
   12620:	04000316 	blt	zero,r16,12630 <__sflush_r+0x124>
   12624:	003fed06 	br	125dc <__alt_data_end+0xffff25dc>
   12628:	90a5883a 	add	r18,r18,r2
   1262c:	043feb0e 	bge	zero,r16,125dc <__alt_data_end+0xffff25dc>
   12630:	88800917 	ldw	r2,36(r17)
   12634:	89400717 	ldw	r5,28(r17)
   12638:	800f883a 	mov	r7,r16
   1263c:	900d883a 	mov	r6,r18
   12640:	9809883a 	mov	r4,r19
   12644:	103ee83a 	callr	r2
   12648:	80a1c83a 	sub	r16,r16,r2
   1264c:	00bff616 	blt	zero,r2,12628 <__alt_data_end+0xffff2628>
   12650:	88c0030b 	ldhu	r3,12(r17)
   12654:	00bfffc4 	movi	r2,-1
   12658:	18c01014 	ori	r3,r3,64
   1265c:	88c0030d 	sth	r3,12(r17)
   12660:	003fdf06 	br	125e0 <__alt_data_end+0xffff25e0>
   12664:	0005883a 	mov	r2,zero
   12668:	003fec06 	br	1261c <__alt_data_end+0xffff261c>
   1266c:	88801415 	stw	r2,80(r17)
   12670:	003fd206 	br	125bc <__alt_data_end+0xffff25bc>
   12674:	28c00f17 	ldw	r3,60(r5)
   12678:	00ffb316 	blt	zero,r3,12548 <__alt_data_end+0xffff2548>
   1267c:	003fd706 	br	125dc <__alt_data_end+0xffff25dc>
   12680:	89400717 	ldw	r5,28(r17)
   12684:	000d883a 	mov	r6,zero
   12688:	01c00044 	movi	r7,1
   1268c:	9809883a 	mov	r4,r19
   12690:	403ee83a 	callr	r8
   12694:	100d883a 	mov	r6,r2
   12698:	00bfffc4 	movi	r2,-1
   1269c:	30801426 	beq	r6,r2,126f0 <__sflush_r+0x1e4>
   126a0:	8880030b 	ldhu	r2,12(r17)
   126a4:	8a000a17 	ldw	r8,40(r17)
   126a8:	003fae06 	br	12564 <__alt_data_end+0xffff2564>
   126ac:	98c00017 	ldw	r3,0(r19)
   126b0:	183fba26 	beq	r3,zero,1259c <__alt_data_end+0xffff259c>
   126b4:	01000744 	movi	r4,29
   126b8:	19000626 	beq	r3,r4,126d4 <__sflush_r+0x1c8>
   126bc:	01000584 	movi	r4,22
   126c0:	19000426 	beq	r3,r4,126d4 <__sflush_r+0x1c8>
   126c4:	88c0030b 	ldhu	r3,12(r17)
   126c8:	18c01014 	ori	r3,r3,64
   126cc:	88c0030d 	sth	r3,12(r17)
   126d0:	003fc306 	br	125e0 <__alt_data_end+0xffff25e0>
   126d4:	8880030b 	ldhu	r2,12(r17)
   126d8:	88c00417 	ldw	r3,16(r17)
   126dc:	88000115 	stw	zero,4(r17)
   126e0:	10bdffcc 	andi	r2,r2,63487
   126e4:	8880030d 	sth	r2,12(r17)
   126e8:	88c00015 	stw	r3,0(r17)
   126ec:	003fb306 	br	125bc <__alt_data_end+0xffff25bc>
   126f0:	98800017 	ldw	r2,0(r19)
   126f4:	103fea26 	beq	r2,zero,126a0 <__alt_data_end+0xffff26a0>
   126f8:	00c00744 	movi	r3,29
   126fc:	10c00226 	beq	r2,r3,12708 <__sflush_r+0x1fc>
   12700:	00c00584 	movi	r3,22
   12704:	10c0031e 	bne	r2,r3,12714 <__sflush_r+0x208>
   12708:	9c000015 	stw	r16,0(r19)
   1270c:	0005883a 	mov	r2,zero
   12710:	003fb306 	br	125e0 <__alt_data_end+0xffff25e0>
   12714:	88c0030b 	ldhu	r3,12(r17)
   12718:	3005883a 	mov	r2,r6
   1271c:	18c01014 	ori	r3,r3,64
   12720:	88c0030d 	sth	r3,12(r17)
   12724:	003fae06 	br	125e0 <__alt_data_end+0xffff25e0>

00012728 <_fflush_r>:
   12728:	defffd04 	addi	sp,sp,-12
   1272c:	dc000115 	stw	r16,4(sp)
   12730:	dfc00215 	stw	ra,8(sp)
   12734:	2021883a 	mov	r16,r4
   12738:	20000226 	beq	r4,zero,12744 <_fflush_r+0x1c>
   1273c:	20800e17 	ldw	r2,56(r4)
   12740:	10000c26 	beq	r2,zero,12774 <_fflush_r+0x4c>
   12744:	2880030f 	ldh	r2,12(r5)
   12748:	1000051e 	bne	r2,zero,12760 <_fflush_r+0x38>
   1274c:	0005883a 	mov	r2,zero
   12750:	dfc00217 	ldw	ra,8(sp)
   12754:	dc000117 	ldw	r16,4(sp)
   12758:	dec00304 	addi	sp,sp,12
   1275c:	f800283a 	ret
   12760:	8009883a 	mov	r4,r16
   12764:	dfc00217 	ldw	ra,8(sp)
   12768:	dc000117 	ldw	r16,4(sp)
   1276c:	dec00304 	addi	sp,sp,12
   12770:	001250c1 	jmpi	1250c <__sflush_r>
   12774:	d9400015 	stw	r5,0(sp)
   12778:	00107bc0 	call	107bc <__sinit>
   1277c:	d9400017 	ldw	r5,0(sp)
   12780:	003ff006 	br	12744 <__alt_data_end+0xffff2744>

00012784 <fflush>:
   12784:	20000526 	beq	r4,zero,1279c <fflush+0x18>
   12788:	00800074 	movhi	r2,1
   1278c:	109d2004 	addi	r2,r2,29824
   12790:	200b883a 	mov	r5,r4
   12794:	11000017 	ldw	r4,0(r2)
   12798:	00127281 	jmpi	12728 <_fflush_r>
   1279c:	00800074 	movhi	r2,1
   127a0:	109d1f04 	addi	r2,r2,29820
   127a4:	11000017 	ldw	r4,0(r2)
   127a8:	01400074 	movhi	r5,1
   127ac:	2949ca04 	addi	r5,r5,10024
   127b0:	0010d8c1 	jmpi	10d8c <_fwalk_reent>

000127b4 <_malloc_trim_r>:
   127b4:	defffb04 	addi	sp,sp,-20
   127b8:	dcc00315 	stw	r19,12(sp)
   127bc:	04c00074 	movhi	r19,1
   127c0:	dc800215 	stw	r18,8(sp)
   127c4:	dc400115 	stw	r17,4(sp)
   127c8:	dc000015 	stw	r16,0(sp)
   127cc:	dfc00415 	stw	ra,16(sp)
   127d0:	2821883a 	mov	r16,r5
   127d4:	9cd79b04 	addi	r19,r19,24172
   127d8:	2025883a 	mov	r18,r4
   127dc:	00136440 	call	13644 <__malloc_lock>
   127e0:	98800217 	ldw	r2,8(r19)
   127e4:	14400117 	ldw	r17,4(r2)
   127e8:	00bfff04 	movi	r2,-4
   127ec:	88a2703a 	and	r17,r17,r2
   127f0:	8c21c83a 	sub	r16,r17,r16
   127f4:	8403fbc4 	addi	r16,r16,4079
   127f8:	8020d33a 	srli	r16,r16,12
   127fc:	0083ffc4 	movi	r2,4095
   12800:	843fffc4 	addi	r16,r16,-1
   12804:	8020933a 	slli	r16,r16,12
   12808:	1400060e 	bge	r2,r16,12824 <_malloc_trim_r+0x70>
   1280c:	000b883a 	mov	r5,zero
   12810:	9009883a 	mov	r4,r18
   12814:	00120700 	call	12070 <_sbrk_r>
   12818:	98c00217 	ldw	r3,8(r19)
   1281c:	1c47883a 	add	r3,r3,r17
   12820:	10c00a26 	beq	r2,r3,1284c <_malloc_trim_r+0x98>
   12824:	9009883a 	mov	r4,r18
   12828:	00136680 	call	13668 <__malloc_unlock>
   1282c:	0005883a 	mov	r2,zero
   12830:	dfc00417 	ldw	ra,16(sp)
   12834:	dcc00317 	ldw	r19,12(sp)
   12838:	dc800217 	ldw	r18,8(sp)
   1283c:	dc400117 	ldw	r17,4(sp)
   12840:	dc000017 	ldw	r16,0(sp)
   12844:	dec00504 	addi	sp,sp,20
   12848:	f800283a 	ret
   1284c:	040bc83a 	sub	r5,zero,r16
   12850:	9009883a 	mov	r4,r18
   12854:	00120700 	call	12070 <_sbrk_r>
   12858:	00ffffc4 	movi	r3,-1
   1285c:	10c00d26 	beq	r2,r3,12894 <_malloc_trim_r+0xe0>
   12860:	00c000b4 	movhi	r3,2
   12864:	18e3d304 	addi	r3,r3,-28852
   12868:	18800017 	ldw	r2,0(r3)
   1286c:	99000217 	ldw	r4,8(r19)
   12870:	8c23c83a 	sub	r17,r17,r16
   12874:	8c400054 	ori	r17,r17,1
   12878:	1421c83a 	sub	r16,r2,r16
   1287c:	24400115 	stw	r17,4(r4)
   12880:	9009883a 	mov	r4,r18
   12884:	1c000015 	stw	r16,0(r3)
   12888:	00136680 	call	13668 <__malloc_unlock>
   1288c:	00800044 	movi	r2,1
   12890:	003fe706 	br	12830 <__alt_data_end+0xffff2830>
   12894:	000b883a 	mov	r5,zero
   12898:	9009883a 	mov	r4,r18
   1289c:	00120700 	call	12070 <_sbrk_r>
   128a0:	99000217 	ldw	r4,8(r19)
   128a4:	014003c4 	movi	r5,15
   128a8:	1107c83a 	sub	r3,r2,r4
   128ac:	28ffdd0e 	bge	r5,r3,12824 <__alt_data_end+0xffff2824>
   128b0:	01400074 	movhi	r5,1
   128b4:	295d2104 	addi	r5,r5,29828
   128b8:	29400017 	ldw	r5,0(r5)
   128bc:	18c00054 	ori	r3,r3,1
   128c0:	20c00115 	stw	r3,4(r4)
   128c4:	00c000b4 	movhi	r3,2
   128c8:	1145c83a 	sub	r2,r2,r5
   128cc:	18e3d304 	addi	r3,r3,-28852
   128d0:	18800015 	stw	r2,0(r3)
   128d4:	003fd306 	br	12824 <__alt_data_end+0xffff2824>

000128d8 <_free_r>:
   128d8:	28004126 	beq	r5,zero,129e0 <_free_r+0x108>
   128dc:	defffd04 	addi	sp,sp,-12
   128e0:	dc400115 	stw	r17,4(sp)
   128e4:	dc000015 	stw	r16,0(sp)
   128e8:	2023883a 	mov	r17,r4
   128ec:	2821883a 	mov	r16,r5
   128f0:	dfc00215 	stw	ra,8(sp)
   128f4:	00136440 	call	13644 <__malloc_lock>
   128f8:	81ffff17 	ldw	r7,-4(r16)
   128fc:	00bfff84 	movi	r2,-2
   12900:	01000074 	movhi	r4,1
   12904:	81bffe04 	addi	r6,r16,-8
   12908:	3884703a 	and	r2,r7,r2
   1290c:	21179b04 	addi	r4,r4,24172
   12910:	308b883a 	add	r5,r6,r2
   12914:	2a400117 	ldw	r9,4(r5)
   12918:	22000217 	ldw	r8,8(r4)
   1291c:	00ffff04 	movi	r3,-4
   12920:	48c6703a 	and	r3,r9,r3
   12924:	2a005726 	beq	r5,r8,12a84 <_free_r+0x1ac>
   12928:	28c00115 	stw	r3,4(r5)
   1292c:	39c0004c 	andi	r7,r7,1
   12930:	3800091e 	bne	r7,zero,12958 <_free_r+0x80>
   12934:	823ffe17 	ldw	r8,-8(r16)
   12938:	22400204 	addi	r9,r4,8
   1293c:	320dc83a 	sub	r6,r6,r8
   12940:	31c00217 	ldw	r7,8(r6)
   12944:	1205883a 	add	r2,r2,r8
   12948:	3a406526 	beq	r7,r9,12ae0 <_free_r+0x208>
   1294c:	32000317 	ldw	r8,12(r6)
   12950:	3a000315 	stw	r8,12(r7)
   12954:	41c00215 	stw	r7,8(r8)
   12958:	28cf883a 	add	r7,r5,r3
   1295c:	39c00117 	ldw	r7,4(r7)
   12960:	39c0004c 	andi	r7,r7,1
   12964:	38003a26 	beq	r7,zero,12a50 <_free_r+0x178>
   12968:	10c00054 	ori	r3,r2,1
   1296c:	30c00115 	stw	r3,4(r6)
   12970:	3087883a 	add	r3,r6,r2
   12974:	18800015 	stw	r2,0(r3)
   12978:	00c07fc4 	movi	r3,511
   1297c:	18801936 	bltu	r3,r2,129e4 <_free_r+0x10c>
   12980:	1004d0fa 	srli	r2,r2,3
   12984:	01c00044 	movi	r7,1
   12988:	21400117 	ldw	r5,4(r4)
   1298c:	10c00044 	addi	r3,r2,1
   12990:	18c7883a 	add	r3,r3,r3
   12994:	1005d0ba 	srai	r2,r2,2
   12998:	18c7883a 	add	r3,r3,r3
   1299c:	18c7883a 	add	r3,r3,r3
   129a0:	1907883a 	add	r3,r3,r4
   129a4:	3884983a 	sll	r2,r7,r2
   129a8:	19c00017 	ldw	r7,0(r3)
   129ac:	1a3ffe04 	addi	r8,r3,-8
   129b0:	1144b03a 	or	r2,r2,r5
   129b4:	32000315 	stw	r8,12(r6)
   129b8:	31c00215 	stw	r7,8(r6)
   129bc:	20800115 	stw	r2,4(r4)
   129c0:	19800015 	stw	r6,0(r3)
   129c4:	39800315 	stw	r6,12(r7)
   129c8:	8809883a 	mov	r4,r17
   129cc:	dfc00217 	ldw	ra,8(sp)
   129d0:	dc400117 	ldw	r17,4(sp)
   129d4:	dc000017 	ldw	r16,0(sp)
   129d8:	dec00304 	addi	sp,sp,12
   129dc:	00136681 	jmpi	13668 <__malloc_unlock>
   129e0:	f800283a 	ret
   129e4:	100ad27a 	srli	r5,r2,9
   129e8:	00c00104 	movi	r3,4
   129ec:	19404a36 	bltu	r3,r5,12b18 <_free_r+0x240>
   129f0:	100ad1ba 	srli	r5,r2,6
   129f4:	28c00e44 	addi	r3,r5,57
   129f8:	18c7883a 	add	r3,r3,r3
   129fc:	29400e04 	addi	r5,r5,56
   12a00:	18c7883a 	add	r3,r3,r3
   12a04:	18c7883a 	add	r3,r3,r3
   12a08:	1909883a 	add	r4,r3,r4
   12a0c:	20c00017 	ldw	r3,0(r4)
   12a10:	01c00074 	movhi	r7,1
   12a14:	213ffe04 	addi	r4,r4,-8
   12a18:	39d79b04 	addi	r7,r7,24172
   12a1c:	20c04426 	beq	r4,r3,12b30 <_free_r+0x258>
   12a20:	01ffff04 	movi	r7,-4
   12a24:	19400117 	ldw	r5,4(r3)
   12a28:	29ca703a 	and	r5,r5,r7
   12a2c:	1140022e 	bgeu	r2,r5,12a38 <_free_r+0x160>
   12a30:	18c00217 	ldw	r3,8(r3)
   12a34:	20fffb1e 	bne	r4,r3,12a24 <__alt_data_end+0xffff2a24>
   12a38:	19000317 	ldw	r4,12(r3)
   12a3c:	31000315 	stw	r4,12(r6)
   12a40:	30c00215 	stw	r3,8(r6)
   12a44:	21800215 	stw	r6,8(r4)
   12a48:	19800315 	stw	r6,12(r3)
   12a4c:	003fde06 	br	129c8 <__alt_data_end+0xffff29c8>
   12a50:	29c00217 	ldw	r7,8(r5)
   12a54:	10c5883a 	add	r2,r2,r3
   12a58:	00c00074 	movhi	r3,1
   12a5c:	18d79d04 	addi	r3,r3,24180
   12a60:	38c03b26 	beq	r7,r3,12b50 <_free_r+0x278>
   12a64:	2a000317 	ldw	r8,12(r5)
   12a68:	11400054 	ori	r5,r2,1
   12a6c:	3087883a 	add	r3,r6,r2
   12a70:	3a000315 	stw	r8,12(r7)
   12a74:	41c00215 	stw	r7,8(r8)
   12a78:	31400115 	stw	r5,4(r6)
   12a7c:	18800015 	stw	r2,0(r3)
   12a80:	003fbd06 	br	12978 <__alt_data_end+0xffff2978>
   12a84:	39c0004c 	andi	r7,r7,1
   12a88:	10c5883a 	add	r2,r2,r3
   12a8c:	3800071e 	bne	r7,zero,12aac <_free_r+0x1d4>
   12a90:	81fffe17 	ldw	r7,-8(r16)
   12a94:	31cdc83a 	sub	r6,r6,r7
   12a98:	30c00317 	ldw	r3,12(r6)
   12a9c:	31400217 	ldw	r5,8(r6)
   12aa0:	11c5883a 	add	r2,r2,r7
   12aa4:	28c00315 	stw	r3,12(r5)
   12aa8:	19400215 	stw	r5,8(r3)
   12aac:	10c00054 	ori	r3,r2,1
   12ab0:	30c00115 	stw	r3,4(r6)
   12ab4:	00c00074 	movhi	r3,1
   12ab8:	18dd2204 	addi	r3,r3,29832
   12abc:	18c00017 	ldw	r3,0(r3)
   12ac0:	21800215 	stw	r6,8(r4)
   12ac4:	10ffc036 	bltu	r2,r3,129c8 <__alt_data_end+0xffff29c8>
   12ac8:	008000b4 	movhi	r2,2
   12acc:	10a3ca04 	addi	r2,r2,-28888
   12ad0:	11400017 	ldw	r5,0(r2)
   12ad4:	8809883a 	mov	r4,r17
   12ad8:	00127b40 	call	127b4 <_malloc_trim_r>
   12adc:	003fba06 	br	129c8 <__alt_data_end+0xffff29c8>
   12ae0:	28c9883a 	add	r4,r5,r3
   12ae4:	21000117 	ldw	r4,4(r4)
   12ae8:	2100004c 	andi	r4,r4,1
   12aec:	2000391e 	bne	r4,zero,12bd4 <_free_r+0x2fc>
   12af0:	29c00217 	ldw	r7,8(r5)
   12af4:	29000317 	ldw	r4,12(r5)
   12af8:	1885883a 	add	r2,r3,r2
   12afc:	10c00054 	ori	r3,r2,1
   12b00:	39000315 	stw	r4,12(r7)
   12b04:	21c00215 	stw	r7,8(r4)
   12b08:	30c00115 	stw	r3,4(r6)
   12b0c:	308d883a 	add	r6,r6,r2
   12b10:	30800015 	stw	r2,0(r6)
   12b14:	003fac06 	br	129c8 <__alt_data_end+0xffff29c8>
   12b18:	00c00504 	movi	r3,20
   12b1c:	19401536 	bltu	r3,r5,12b74 <_free_r+0x29c>
   12b20:	28c01704 	addi	r3,r5,92
   12b24:	18c7883a 	add	r3,r3,r3
   12b28:	294016c4 	addi	r5,r5,91
   12b2c:	003fb406 	br	12a00 <__alt_data_end+0xffff2a00>
   12b30:	280bd0ba 	srai	r5,r5,2
   12b34:	00c00044 	movi	r3,1
   12b38:	38800117 	ldw	r2,4(r7)
   12b3c:	194a983a 	sll	r5,r3,r5
   12b40:	2007883a 	mov	r3,r4
   12b44:	2884b03a 	or	r2,r5,r2
   12b48:	38800115 	stw	r2,4(r7)
   12b4c:	003fbb06 	br	12a3c <__alt_data_end+0xffff2a3c>
   12b50:	21800515 	stw	r6,20(r4)
   12b54:	21800415 	stw	r6,16(r4)
   12b58:	10c00054 	ori	r3,r2,1
   12b5c:	31c00315 	stw	r7,12(r6)
   12b60:	31c00215 	stw	r7,8(r6)
   12b64:	30c00115 	stw	r3,4(r6)
   12b68:	308d883a 	add	r6,r6,r2
   12b6c:	30800015 	stw	r2,0(r6)
   12b70:	003f9506 	br	129c8 <__alt_data_end+0xffff29c8>
   12b74:	00c01504 	movi	r3,84
   12b78:	19400536 	bltu	r3,r5,12b90 <_free_r+0x2b8>
   12b7c:	100ad33a 	srli	r5,r2,12
   12b80:	28c01bc4 	addi	r3,r5,111
   12b84:	18c7883a 	add	r3,r3,r3
   12b88:	29401b84 	addi	r5,r5,110
   12b8c:	003f9c06 	br	12a00 <__alt_data_end+0xffff2a00>
   12b90:	00c05504 	movi	r3,340
   12b94:	19400536 	bltu	r3,r5,12bac <_free_r+0x2d4>
   12b98:	100ad3fa 	srli	r5,r2,15
   12b9c:	28c01e04 	addi	r3,r5,120
   12ba0:	18c7883a 	add	r3,r3,r3
   12ba4:	29401dc4 	addi	r5,r5,119
   12ba8:	003f9506 	br	12a00 <__alt_data_end+0xffff2a00>
   12bac:	00c15504 	movi	r3,1364
   12bb0:	19400536 	bltu	r3,r5,12bc8 <_free_r+0x2f0>
   12bb4:	100ad4ba 	srli	r5,r2,18
   12bb8:	28c01f44 	addi	r3,r5,125
   12bbc:	18c7883a 	add	r3,r3,r3
   12bc0:	29401f04 	addi	r5,r5,124
   12bc4:	003f8e06 	br	12a00 <__alt_data_end+0xffff2a00>
   12bc8:	00c03f84 	movi	r3,254
   12bcc:	01401f84 	movi	r5,126
   12bd0:	003f8b06 	br	12a00 <__alt_data_end+0xffff2a00>
   12bd4:	10c00054 	ori	r3,r2,1
   12bd8:	30c00115 	stw	r3,4(r6)
   12bdc:	308d883a 	add	r6,r6,r2
   12be0:	30800015 	stw	r2,0(r6)
   12be4:	003f7806 	br	129c8 <__alt_data_end+0xffff29c8>

00012be8 <_lseek_r>:
   12be8:	defffd04 	addi	sp,sp,-12
   12bec:	2805883a 	mov	r2,r5
   12bf0:	dc000015 	stw	r16,0(sp)
   12bf4:	040000b4 	movhi	r16,2
   12bf8:	dc400115 	stw	r17,4(sp)
   12bfc:	300b883a 	mov	r5,r6
   12c00:	8423cb04 	addi	r16,r16,-28884
   12c04:	2023883a 	mov	r17,r4
   12c08:	380d883a 	mov	r6,r7
   12c0c:	1009883a 	mov	r4,r2
   12c10:	dfc00215 	stw	ra,8(sp)
   12c14:	80000015 	stw	zero,0(r16)
   12c18:	00134f40 	call	134f4 <lseek>
   12c1c:	00ffffc4 	movi	r3,-1
   12c20:	10c00526 	beq	r2,r3,12c38 <_lseek_r+0x50>
   12c24:	dfc00217 	ldw	ra,8(sp)
   12c28:	dc400117 	ldw	r17,4(sp)
   12c2c:	dc000017 	ldw	r16,0(sp)
   12c30:	dec00304 	addi	sp,sp,12
   12c34:	f800283a 	ret
   12c38:	80c00017 	ldw	r3,0(r16)
   12c3c:	183ff926 	beq	r3,zero,12c24 <__alt_data_end+0xffff2c24>
   12c40:	88c00015 	stw	r3,0(r17)
   12c44:	003ff706 	br	12c24 <__alt_data_end+0xffff2c24>

00012c48 <__smakebuf_r>:
   12c48:	2880030b 	ldhu	r2,12(r5)
   12c4c:	10c0008c 	andi	r3,r2,2
   12c50:	1800411e 	bne	r3,zero,12d58 <__smakebuf_r+0x110>
   12c54:	deffec04 	addi	sp,sp,-80
   12c58:	dc000f15 	stw	r16,60(sp)
   12c5c:	2821883a 	mov	r16,r5
   12c60:	2940038f 	ldh	r5,14(r5)
   12c64:	dc401015 	stw	r17,64(sp)
   12c68:	dfc01315 	stw	ra,76(sp)
   12c6c:	dcc01215 	stw	r19,72(sp)
   12c70:	dc801115 	stw	r18,68(sp)
   12c74:	2023883a 	mov	r17,r4
   12c78:	28001c16 	blt	r5,zero,12cec <__smakebuf_r+0xa4>
   12c7c:	d80d883a 	mov	r6,sp
   12c80:	0012e640 	call	12e64 <_fstat_r>
   12c84:	10001816 	blt	r2,zero,12ce8 <__smakebuf_r+0xa0>
   12c88:	d8800117 	ldw	r2,4(sp)
   12c8c:	00e00014 	movui	r3,32768
   12c90:	10bc000c 	andi	r2,r2,61440
   12c94:	14c80020 	cmpeqi	r19,r2,8192
   12c98:	10c03726 	beq	r2,r3,12d78 <__smakebuf_r+0x130>
   12c9c:	80c0030b 	ldhu	r3,12(r16)
   12ca0:	18c20014 	ori	r3,r3,2048
   12ca4:	80c0030d 	sth	r3,12(r16)
   12ca8:	00c80004 	movi	r3,8192
   12cac:	10c0521e 	bne	r2,r3,12df8 <__smakebuf_r+0x1b0>
   12cb0:	8140038f 	ldh	r5,14(r16)
   12cb4:	8809883a 	mov	r4,r17
   12cb8:	0012ec00 	call	12ec0 <_isatty_r>
   12cbc:	10004c26 	beq	r2,zero,12df0 <__smakebuf_r+0x1a8>
   12cc0:	8080030b 	ldhu	r2,12(r16)
   12cc4:	80c010c4 	addi	r3,r16,67
   12cc8:	80c00015 	stw	r3,0(r16)
   12ccc:	10800054 	ori	r2,r2,1
   12cd0:	8080030d 	sth	r2,12(r16)
   12cd4:	00800044 	movi	r2,1
   12cd8:	80c00415 	stw	r3,16(r16)
   12cdc:	80800515 	stw	r2,20(r16)
   12ce0:	04810004 	movi	r18,1024
   12ce4:	00000706 	br	12d04 <__smakebuf_r+0xbc>
   12ce8:	8080030b 	ldhu	r2,12(r16)
   12cec:	10c0200c 	andi	r3,r2,128
   12cf0:	18001f1e 	bne	r3,zero,12d70 <__smakebuf_r+0x128>
   12cf4:	04810004 	movi	r18,1024
   12cf8:	10820014 	ori	r2,r2,2048
   12cfc:	8080030d 	sth	r2,12(r16)
   12d00:	0027883a 	mov	r19,zero
   12d04:	900b883a 	mov	r5,r18
   12d08:	8809883a 	mov	r4,r17
   12d0c:	0010e500 	call	10e50 <_malloc_r>
   12d10:	10002c26 	beq	r2,zero,12dc4 <__smakebuf_r+0x17c>
   12d14:	80c0030b 	ldhu	r3,12(r16)
   12d18:	01000074 	movhi	r4,1
   12d1c:	21011d04 	addi	r4,r4,1140
   12d20:	89000f15 	stw	r4,60(r17)
   12d24:	18c02014 	ori	r3,r3,128
   12d28:	80c0030d 	sth	r3,12(r16)
   12d2c:	80800015 	stw	r2,0(r16)
   12d30:	80800415 	stw	r2,16(r16)
   12d34:	84800515 	stw	r18,20(r16)
   12d38:	98001a1e 	bne	r19,zero,12da4 <__smakebuf_r+0x15c>
   12d3c:	dfc01317 	ldw	ra,76(sp)
   12d40:	dcc01217 	ldw	r19,72(sp)
   12d44:	dc801117 	ldw	r18,68(sp)
   12d48:	dc401017 	ldw	r17,64(sp)
   12d4c:	dc000f17 	ldw	r16,60(sp)
   12d50:	dec01404 	addi	sp,sp,80
   12d54:	f800283a 	ret
   12d58:	288010c4 	addi	r2,r5,67
   12d5c:	28800015 	stw	r2,0(r5)
   12d60:	28800415 	stw	r2,16(r5)
   12d64:	00800044 	movi	r2,1
   12d68:	28800515 	stw	r2,20(r5)
   12d6c:	f800283a 	ret
   12d70:	04801004 	movi	r18,64
   12d74:	003fe006 	br	12cf8 <__alt_data_end+0xffff2cf8>
   12d78:	81000a17 	ldw	r4,40(r16)
   12d7c:	00c00074 	movhi	r3,1
   12d80:	18c86704 	addi	r3,r3,8604
   12d84:	20ffc51e 	bne	r4,r3,12c9c <__alt_data_end+0xffff2c9c>
   12d88:	8080030b 	ldhu	r2,12(r16)
   12d8c:	04810004 	movi	r18,1024
   12d90:	84801315 	stw	r18,76(r16)
   12d94:	1484b03a 	or	r2,r2,r18
   12d98:	8080030d 	sth	r2,12(r16)
   12d9c:	0027883a 	mov	r19,zero
   12da0:	003fd806 	br	12d04 <__alt_data_end+0xffff2d04>
   12da4:	8140038f 	ldh	r5,14(r16)
   12da8:	8809883a 	mov	r4,r17
   12dac:	0012ec00 	call	12ec0 <_isatty_r>
   12db0:	103fe226 	beq	r2,zero,12d3c <__alt_data_end+0xffff2d3c>
   12db4:	8080030b 	ldhu	r2,12(r16)
   12db8:	10800054 	ori	r2,r2,1
   12dbc:	8080030d 	sth	r2,12(r16)
   12dc0:	003fde06 	br	12d3c <__alt_data_end+0xffff2d3c>
   12dc4:	8080030b 	ldhu	r2,12(r16)
   12dc8:	10c0800c 	andi	r3,r2,512
   12dcc:	183fdb1e 	bne	r3,zero,12d3c <__alt_data_end+0xffff2d3c>
   12dd0:	10800094 	ori	r2,r2,2
   12dd4:	80c010c4 	addi	r3,r16,67
   12dd8:	8080030d 	sth	r2,12(r16)
   12ddc:	00800044 	movi	r2,1
   12de0:	80c00015 	stw	r3,0(r16)
   12de4:	80c00415 	stw	r3,16(r16)
   12de8:	80800515 	stw	r2,20(r16)
   12dec:	003fd306 	br	12d3c <__alt_data_end+0xffff2d3c>
   12df0:	04810004 	movi	r18,1024
   12df4:	003fc306 	br	12d04 <__alt_data_end+0xffff2d04>
   12df8:	0027883a 	mov	r19,zero
   12dfc:	04810004 	movi	r18,1024
   12e00:	003fc006 	br	12d04 <__alt_data_end+0xffff2d04>

00012e04 <_read_r>:
   12e04:	defffd04 	addi	sp,sp,-12
   12e08:	2805883a 	mov	r2,r5
   12e0c:	dc000015 	stw	r16,0(sp)
   12e10:	040000b4 	movhi	r16,2
   12e14:	dc400115 	stw	r17,4(sp)
   12e18:	300b883a 	mov	r5,r6
   12e1c:	8423cb04 	addi	r16,r16,-28884
   12e20:	2023883a 	mov	r17,r4
   12e24:	380d883a 	mov	r6,r7
   12e28:	1009883a 	mov	r4,r2
   12e2c:	dfc00215 	stw	ra,8(sp)
   12e30:	80000015 	stw	zero,0(r16)
   12e34:	00136c80 	call	136c8 <read>
   12e38:	00ffffc4 	movi	r3,-1
   12e3c:	10c00526 	beq	r2,r3,12e54 <_read_r+0x50>
   12e40:	dfc00217 	ldw	ra,8(sp)
   12e44:	dc400117 	ldw	r17,4(sp)
   12e48:	dc000017 	ldw	r16,0(sp)
   12e4c:	dec00304 	addi	sp,sp,12
   12e50:	f800283a 	ret
   12e54:	80c00017 	ldw	r3,0(r16)
   12e58:	183ff926 	beq	r3,zero,12e40 <__alt_data_end+0xffff2e40>
   12e5c:	88c00015 	stw	r3,0(r17)
   12e60:	003ff706 	br	12e40 <__alt_data_end+0xffff2e40>

00012e64 <_fstat_r>:
   12e64:	defffd04 	addi	sp,sp,-12
   12e68:	2805883a 	mov	r2,r5
   12e6c:	dc000015 	stw	r16,0(sp)
   12e70:	040000b4 	movhi	r16,2
   12e74:	dc400115 	stw	r17,4(sp)
   12e78:	8423cb04 	addi	r16,r16,-28884
   12e7c:	2023883a 	mov	r17,r4
   12e80:	300b883a 	mov	r5,r6
   12e84:	1009883a 	mov	r4,r2
   12e88:	dfc00215 	stw	ra,8(sp)
   12e8c:	80000015 	stw	zero,0(r16)
   12e90:	001323c0 	call	1323c <fstat>
   12e94:	00ffffc4 	movi	r3,-1
   12e98:	10c00526 	beq	r2,r3,12eb0 <_fstat_r+0x4c>
   12e9c:	dfc00217 	ldw	ra,8(sp)
   12ea0:	dc400117 	ldw	r17,4(sp)
   12ea4:	dc000017 	ldw	r16,0(sp)
   12ea8:	dec00304 	addi	sp,sp,12
   12eac:	f800283a 	ret
   12eb0:	80c00017 	ldw	r3,0(r16)
   12eb4:	183ff926 	beq	r3,zero,12e9c <__alt_data_end+0xffff2e9c>
   12eb8:	88c00015 	stw	r3,0(r17)
   12ebc:	003ff706 	br	12e9c <__alt_data_end+0xffff2e9c>

00012ec0 <_isatty_r>:
   12ec0:	defffd04 	addi	sp,sp,-12
   12ec4:	dc000015 	stw	r16,0(sp)
   12ec8:	040000b4 	movhi	r16,2
   12ecc:	dc400115 	stw	r17,4(sp)
   12ed0:	8423cb04 	addi	r16,r16,-28884
   12ed4:	2023883a 	mov	r17,r4
   12ed8:	2809883a 	mov	r4,r5
   12edc:	dfc00215 	stw	ra,8(sp)
   12ee0:	80000015 	stw	zero,0(r16)
   12ee4:	00133280 	call	13328 <isatty>
   12ee8:	00ffffc4 	movi	r3,-1
   12eec:	10c00526 	beq	r2,r3,12f04 <_isatty_r+0x44>
   12ef0:	dfc00217 	ldw	ra,8(sp)
   12ef4:	dc400117 	ldw	r17,4(sp)
   12ef8:	dc000017 	ldw	r16,0(sp)
   12efc:	dec00304 	addi	sp,sp,12
   12f00:	f800283a 	ret
   12f04:	80c00017 	ldw	r3,0(r16)
   12f08:	183ff926 	beq	r3,zero,12ef0 <__alt_data_end+0xffff2ef0>
   12f0c:	88c00015 	stw	r3,0(r17)
   12f10:	003ff706 	br	12ef0 <__alt_data_end+0xffff2ef0>

00012f14 <__divsi3>:
   12f14:	20001b16 	blt	r4,zero,12f84 <__divsi3+0x70>
   12f18:	000f883a 	mov	r7,zero
   12f1c:	28001616 	blt	r5,zero,12f78 <__divsi3+0x64>
   12f20:	200d883a 	mov	r6,r4
   12f24:	29001a2e 	bgeu	r5,r4,12f90 <__divsi3+0x7c>
   12f28:	00800804 	movi	r2,32
   12f2c:	00c00044 	movi	r3,1
   12f30:	00000106 	br	12f38 <__divsi3+0x24>
   12f34:	10000d26 	beq	r2,zero,12f6c <__divsi3+0x58>
   12f38:	294b883a 	add	r5,r5,r5
   12f3c:	10bfffc4 	addi	r2,r2,-1
   12f40:	18c7883a 	add	r3,r3,r3
   12f44:	293ffb36 	bltu	r5,r4,12f34 <__alt_data_end+0xffff2f34>
   12f48:	0005883a 	mov	r2,zero
   12f4c:	18000726 	beq	r3,zero,12f6c <__divsi3+0x58>
   12f50:	0005883a 	mov	r2,zero
   12f54:	31400236 	bltu	r6,r5,12f60 <__divsi3+0x4c>
   12f58:	314dc83a 	sub	r6,r6,r5
   12f5c:	10c4b03a 	or	r2,r2,r3
   12f60:	1806d07a 	srli	r3,r3,1
   12f64:	280ad07a 	srli	r5,r5,1
   12f68:	183ffa1e 	bne	r3,zero,12f54 <__alt_data_end+0xffff2f54>
   12f6c:	38000126 	beq	r7,zero,12f74 <__divsi3+0x60>
   12f70:	0085c83a 	sub	r2,zero,r2
   12f74:	f800283a 	ret
   12f78:	014bc83a 	sub	r5,zero,r5
   12f7c:	39c0005c 	xori	r7,r7,1
   12f80:	003fe706 	br	12f20 <__alt_data_end+0xffff2f20>
   12f84:	0109c83a 	sub	r4,zero,r4
   12f88:	01c00044 	movi	r7,1
   12f8c:	003fe306 	br	12f1c <__alt_data_end+0xffff2f1c>
   12f90:	00c00044 	movi	r3,1
   12f94:	003fee06 	br	12f50 <__alt_data_end+0xffff2f50>

00012f98 <__modsi3>:
   12f98:	20001716 	blt	r4,zero,12ff8 <__modsi3+0x60>
   12f9c:	000f883a 	mov	r7,zero
   12fa0:	2005883a 	mov	r2,r4
   12fa4:	28001216 	blt	r5,zero,12ff0 <__modsi3+0x58>
   12fa8:	2900162e 	bgeu	r5,r4,13004 <__modsi3+0x6c>
   12fac:	01800804 	movi	r6,32
   12fb0:	00c00044 	movi	r3,1
   12fb4:	00000106 	br	12fbc <__modsi3+0x24>
   12fb8:	30000a26 	beq	r6,zero,12fe4 <__modsi3+0x4c>
   12fbc:	294b883a 	add	r5,r5,r5
   12fc0:	31bfffc4 	addi	r6,r6,-1
   12fc4:	18c7883a 	add	r3,r3,r3
   12fc8:	293ffb36 	bltu	r5,r4,12fb8 <__alt_data_end+0xffff2fb8>
   12fcc:	18000526 	beq	r3,zero,12fe4 <__modsi3+0x4c>
   12fd0:	1806d07a 	srli	r3,r3,1
   12fd4:	11400136 	bltu	r2,r5,12fdc <__modsi3+0x44>
   12fd8:	1145c83a 	sub	r2,r2,r5
   12fdc:	280ad07a 	srli	r5,r5,1
   12fe0:	183ffb1e 	bne	r3,zero,12fd0 <__alt_data_end+0xffff2fd0>
   12fe4:	38000126 	beq	r7,zero,12fec <__modsi3+0x54>
   12fe8:	0085c83a 	sub	r2,zero,r2
   12fec:	f800283a 	ret
   12ff0:	014bc83a 	sub	r5,zero,r5
   12ff4:	003fec06 	br	12fa8 <__alt_data_end+0xffff2fa8>
   12ff8:	0109c83a 	sub	r4,zero,r4
   12ffc:	01c00044 	movi	r7,1
   13000:	003fe706 	br	12fa0 <__alt_data_end+0xffff2fa0>
   13004:	00c00044 	movi	r3,1
   13008:	003ff106 	br	12fd0 <__alt_data_end+0xffff2fd0>

0001300c <__udivsi3>:
   1300c:	200d883a 	mov	r6,r4
   13010:	2900152e 	bgeu	r5,r4,13068 <__udivsi3+0x5c>
   13014:	28001416 	blt	r5,zero,13068 <__udivsi3+0x5c>
   13018:	00800804 	movi	r2,32
   1301c:	00c00044 	movi	r3,1
   13020:	00000206 	br	1302c <__udivsi3+0x20>
   13024:	10000e26 	beq	r2,zero,13060 <__udivsi3+0x54>
   13028:	28000516 	blt	r5,zero,13040 <__udivsi3+0x34>
   1302c:	294b883a 	add	r5,r5,r5
   13030:	10bfffc4 	addi	r2,r2,-1
   13034:	18c7883a 	add	r3,r3,r3
   13038:	293ffa36 	bltu	r5,r4,13024 <__alt_data_end+0xffff3024>
   1303c:	18000826 	beq	r3,zero,13060 <__udivsi3+0x54>
   13040:	0005883a 	mov	r2,zero
   13044:	31400236 	bltu	r6,r5,13050 <__udivsi3+0x44>
   13048:	314dc83a 	sub	r6,r6,r5
   1304c:	10c4b03a 	or	r2,r2,r3
   13050:	1806d07a 	srli	r3,r3,1
   13054:	280ad07a 	srli	r5,r5,1
   13058:	183ffa1e 	bne	r3,zero,13044 <__alt_data_end+0xffff3044>
   1305c:	f800283a 	ret
   13060:	0005883a 	mov	r2,zero
   13064:	f800283a 	ret
   13068:	00c00044 	movi	r3,1
   1306c:	003ff406 	br	13040 <__alt_data_end+0xffff3040>

00013070 <__umodsi3>:
   13070:	2005883a 	mov	r2,r4
   13074:	2900122e 	bgeu	r5,r4,130c0 <__umodsi3+0x50>
   13078:	28001116 	blt	r5,zero,130c0 <__umodsi3+0x50>
   1307c:	01800804 	movi	r6,32
   13080:	00c00044 	movi	r3,1
   13084:	00000206 	br	13090 <__umodsi3+0x20>
   13088:	30000c26 	beq	r6,zero,130bc <__umodsi3+0x4c>
   1308c:	28000516 	blt	r5,zero,130a4 <__umodsi3+0x34>
   13090:	294b883a 	add	r5,r5,r5
   13094:	31bfffc4 	addi	r6,r6,-1
   13098:	18c7883a 	add	r3,r3,r3
   1309c:	293ffa36 	bltu	r5,r4,13088 <__alt_data_end+0xffff3088>
   130a0:	18000626 	beq	r3,zero,130bc <__umodsi3+0x4c>
   130a4:	1806d07a 	srli	r3,r3,1
   130a8:	11400136 	bltu	r2,r5,130b0 <__umodsi3+0x40>
   130ac:	1145c83a 	sub	r2,r2,r5
   130b0:	280ad07a 	srli	r5,r5,1
   130b4:	183ffb1e 	bne	r3,zero,130a4 <__alt_data_end+0xffff30a4>
   130b8:	f800283a 	ret
   130bc:	f800283a 	ret
   130c0:	00c00044 	movi	r3,1
   130c4:	003ff706 	br	130a4 <__alt_data_end+0xffff30a4>

000130c8 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   130c8:	defffe04 	addi	sp,sp,-8
   130cc:	dfc00115 	stw	ra,4(sp)
   130d0:	df000015 	stw	fp,0(sp)
   130d4:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   130d8:	d0a00917 	ldw	r2,-32732(gp)
   130dc:	10000326 	beq	r2,zero,130ec <alt_get_errno+0x24>
   130e0:	d0a00917 	ldw	r2,-32732(gp)
   130e4:	103ee83a 	callr	r2
   130e8:	00000106 	br	130f0 <alt_get_errno+0x28>
   130ec:	d0a6ac04 	addi	r2,gp,-25936
}
   130f0:	e037883a 	mov	sp,fp
   130f4:	dfc00117 	ldw	ra,4(sp)
   130f8:	df000017 	ldw	fp,0(sp)
   130fc:	dec00204 	addi	sp,sp,8
   13100:	f800283a 	ret

00013104 <close>:
 *
 * ALT_CLOSE is mapped onto the close() system call in alt_syscall.h
 */
 
int ALT_CLOSE (int fildes)
{
   13104:	defffb04 	addi	sp,sp,-20
   13108:	dfc00415 	stw	ra,16(sp)
   1310c:	df000315 	stw	fp,12(sp)
   13110:	df000304 	addi	fp,sp,12
   13114:	e13fff15 	stw	r4,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (fildes < 0) ? NULL : &alt_fd_list[fildes];
   13118:	e0bfff17 	ldw	r2,-4(fp)
   1311c:	10000616 	blt	r2,zero,13138 <close+0x34>
   13120:	e0bfff17 	ldw	r2,-4(fp)
   13124:	10c00324 	muli	r3,r2,12
   13128:	00800074 	movhi	r2,1
   1312c:	1098a704 	addi	r2,r2,25244
   13130:	1885883a 	add	r2,r3,r2
   13134:	00000106 	br	1313c <close+0x38>
   13138:	0005883a 	mov	r2,zero
   1313c:	e0bffd15 	stw	r2,-12(fp)

  if (fd)
   13140:	e0bffd17 	ldw	r2,-12(fp)
   13144:	10001926 	beq	r2,zero,131ac <close+0xa8>
    /*
     * If the associated file system/device has a close function, call it so 
     * that any necessary cleanup code can run.
     */

    rval = (fd->dev->close) ? fd->dev->close(fd) : 0;
   13148:	e0bffd17 	ldw	r2,-12(fp)
   1314c:	10800017 	ldw	r2,0(r2)
   13150:	10800417 	ldw	r2,16(r2)
   13154:	10000626 	beq	r2,zero,13170 <close+0x6c>
   13158:	e0bffd17 	ldw	r2,-12(fp)
   1315c:	10800017 	ldw	r2,0(r2)
   13160:	10800417 	ldw	r2,16(r2)
   13164:	e13ffd17 	ldw	r4,-12(fp)
   13168:	103ee83a 	callr	r2
   1316c:	00000106 	br	13174 <close+0x70>
   13170:	0005883a 	mov	r2,zero
   13174:	e0bffe15 	stw	r2,-8(fp)

    /* Free the file descriptor structure and return. */

    alt_release_fd (fildes);
   13178:	e13fff17 	ldw	r4,-4(fp)
   1317c:	00137c40 	call	137c4 <alt_release_fd>
    if (rval < 0)
   13180:	e0bffe17 	ldw	r2,-8(fp)
   13184:	1000070e 	bge	r2,zero,131a4 <close+0xa0>
    {
      ALT_ERRNO = -rval;
   13188:	00130c80 	call	130c8 <alt_get_errno>
   1318c:	1007883a 	mov	r3,r2
   13190:	e0bffe17 	ldw	r2,-8(fp)
   13194:	0085c83a 	sub	r2,zero,r2
   13198:	18800015 	stw	r2,0(r3)
      return -1;
   1319c:	00bfffc4 	movi	r2,-1
   131a0:	00000706 	br	131c0 <close+0xbc>
    }
    return 0;
   131a4:	0005883a 	mov	r2,zero
   131a8:	00000506 	br	131c0 <close+0xbc>
  }
  else
  {
    ALT_ERRNO = EBADFD;
   131ac:	00130c80 	call	130c8 <alt_get_errno>
   131b0:	1007883a 	mov	r3,r2
   131b4:	00801444 	movi	r2,81
   131b8:	18800015 	stw	r2,0(r3)
    return -1;
   131bc:	00bfffc4 	movi	r2,-1
  }
}
   131c0:	e037883a 	mov	sp,fp
   131c4:	dfc00117 	ldw	ra,4(sp)
   131c8:	df000017 	ldw	fp,0(sp)
   131cc:	dec00204 	addi	sp,sp,8
   131d0:	f800283a 	ret

000131d4 <alt_dev_null_write>:
 * by the alt_dev_null device. It simple discards all data passed to it, and
 * indicates that the data has been successfully transmitted.
 */

static int alt_dev_null_write (alt_fd* fd, const char* ptr, int len)
{
   131d4:	defffc04 	addi	sp,sp,-16
   131d8:	df000315 	stw	fp,12(sp)
   131dc:	df000304 	addi	fp,sp,12
   131e0:	e13ffd15 	stw	r4,-12(fp)
   131e4:	e17ffe15 	stw	r5,-8(fp)
   131e8:	e1bfff15 	stw	r6,-4(fp)
  return len;
   131ec:	e0bfff17 	ldw	r2,-4(fp)
}
   131f0:	e037883a 	mov	sp,fp
   131f4:	df000017 	ldw	fp,0(sp)
   131f8:	dec00104 	addi	sp,sp,4
   131fc:	f800283a 	ret

00013200 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   13200:	defffe04 	addi	sp,sp,-8
   13204:	dfc00115 	stw	ra,4(sp)
   13208:	df000015 	stw	fp,0(sp)
   1320c:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   13210:	d0a00917 	ldw	r2,-32732(gp)
   13214:	10000326 	beq	r2,zero,13224 <alt_get_errno+0x24>
   13218:	d0a00917 	ldw	r2,-32732(gp)
   1321c:	103ee83a 	callr	r2
   13220:	00000106 	br	13228 <alt_get_errno+0x28>
   13224:	d0a6ac04 	addi	r2,gp,-25936
}
   13228:	e037883a 	mov	sp,fp
   1322c:	dfc00117 	ldw	ra,4(sp)
   13230:	df000017 	ldw	fp,0(sp)
   13234:	dec00204 	addi	sp,sp,8
   13238:	f800283a 	ret

0001323c <fstat>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_FSTAT (int file, struct stat *st)
{
   1323c:	defffb04 	addi	sp,sp,-20
   13240:	dfc00415 	stw	ra,16(sp)
   13244:	df000315 	stw	fp,12(sp)
   13248:	df000304 	addi	fp,sp,12
   1324c:	e13ffe15 	stw	r4,-8(fp)
   13250:	e17fff15 	stw	r5,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
   13254:	e0bffe17 	ldw	r2,-8(fp)
   13258:	10000616 	blt	r2,zero,13274 <fstat+0x38>
   1325c:	e0bffe17 	ldw	r2,-8(fp)
   13260:	10c00324 	muli	r3,r2,12
   13264:	00800074 	movhi	r2,1
   13268:	1098a704 	addi	r2,r2,25244
   1326c:	1885883a 	add	r2,r3,r2
   13270:	00000106 	br	13278 <fstat+0x3c>
   13274:	0005883a 	mov	r2,zero
   13278:	e0bffd15 	stw	r2,-12(fp)
  
  if (fd)
   1327c:	e0bffd17 	ldw	r2,-12(fp)
   13280:	10001026 	beq	r2,zero,132c4 <fstat+0x88>
  {
    /* Call the drivers fstat() function to fill out the "st" structure. */

    if (fd->dev->fstat)
   13284:	e0bffd17 	ldw	r2,-12(fp)
   13288:	10800017 	ldw	r2,0(r2)
   1328c:	10800817 	ldw	r2,32(r2)
   13290:	10000726 	beq	r2,zero,132b0 <fstat+0x74>
    {
      return fd->dev->fstat(fd, st);
   13294:	e0bffd17 	ldw	r2,-12(fp)
   13298:	10800017 	ldw	r2,0(r2)
   1329c:	10800817 	ldw	r2,32(r2)
   132a0:	e17fff17 	ldw	r5,-4(fp)
   132a4:	e13ffd17 	ldw	r4,-12(fp)
   132a8:	103ee83a 	callr	r2
   132ac:	00000a06 	br	132d8 <fstat+0x9c>
     * device.
     */
 
    else
    {
      st->st_mode = _IFCHR;
   132b0:	e0bfff17 	ldw	r2,-4(fp)
   132b4:	00c80004 	movi	r3,8192
   132b8:	10c00115 	stw	r3,4(r2)
      return 0;
   132bc:	0005883a 	mov	r2,zero
   132c0:	00000506 	br	132d8 <fstat+0x9c>
    }
  }
  else
  {
    ALT_ERRNO = EBADFD;
   132c4:	00132000 	call	13200 <alt_get_errno>
   132c8:	1007883a 	mov	r3,r2
   132cc:	00801444 	movi	r2,81
   132d0:	18800015 	stw	r2,0(r3)
    return -1;
   132d4:	00bfffc4 	movi	r2,-1
  }
}
   132d8:	e037883a 	mov	sp,fp
   132dc:	dfc00117 	ldw	ra,4(sp)
   132e0:	df000017 	ldw	fp,0(sp)
   132e4:	dec00204 	addi	sp,sp,8
   132e8:	f800283a 	ret

000132ec <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   132ec:	defffe04 	addi	sp,sp,-8
   132f0:	dfc00115 	stw	ra,4(sp)
   132f4:	df000015 	stw	fp,0(sp)
   132f8:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   132fc:	d0a00917 	ldw	r2,-32732(gp)
   13300:	10000326 	beq	r2,zero,13310 <alt_get_errno+0x24>
   13304:	d0a00917 	ldw	r2,-32732(gp)
   13308:	103ee83a 	callr	r2
   1330c:	00000106 	br	13314 <alt_get_errno+0x28>
   13310:	d0a6ac04 	addi	r2,gp,-25936
}
   13314:	e037883a 	mov	sp,fp
   13318:	dfc00117 	ldw	ra,4(sp)
   1331c:	df000017 	ldw	fp,0(sp)
   13320:	dec00204 	addi	sp,sp,8
   13324:	f800283a 	ret

00013328 <isatty>:
 *
 * ALT_ISATTY is mapped onto the isatty() system call in alt_syscall.h
 */
 
int ALT_ISATTY (int file)
{
   13328:	deffed04 	addi	sp,sp,-76
   1332c:	dfc01215 	stw	ra,72(sp)
   13330:	df001115 	stw	fp,68(sp)
   13334:	df001104 	addi	fp,sp,68
   13338:	e13fff15 	stw	r4,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
   1333c:	e0bfff17 	ldw	r2,-4(fp)
   13340:	10000616 	blt	r2,zero,1335c <isatty+0x34>
   13344:	e0bfff17 	ldw	r2,-4(fp)
   13348:	10c00324 	muli	r3,r2,12
   1334c:	00800074 	movhi	r2,1
   13350:	1098a704 	addi	r2,r2,25244
   13354:	1885883a 	add	r2,r3,r2
   13358:	00000106 	br	13360 <isatty+0x38>
   1335c:	0005883a 	mov	r2,zero
   13360:	e0bfef15 	stw	r2,-68(fp)
  
  if (fd)
   13364:	e0bfef17 	ldw	r2,-68(fp)
   13368:	10000e26 	beq	r2,zero,133a4 <isatty+0x7c>
    /*
     * If a device driver does not provide an fstat() function, then it is 
     * treated as a terminal device by default.
     */

    if (!fd->dev->fstat)
   1336c:	e0bfef17 	ldw	r2,-68(fp)
   13370:	10800017 	ldw	r2,0(r2)
   13374:	10800817 	ldw	r2,32(r2)
   13378:	1000021e 	bne	r2,zero,13384 <isatty+0x5c>
    {
      return 1;
   1337c:	00800044 	movi	r2,1
   13380:	00000d06 	br	133b8 <isatty+0x90>
     * this is called so that the device can identify itself.
     */ 

    else
    {
      fstat (file, &stat);
   13384:	e0bff004 	addi	r2,fp,-64
   13388:	100b883a 	mov	r5,r2
   1338c:	e13fff17 	ldw	r4,-4(fp)
   13390:	001323c0 	call	1323c <fstat>
      return (stat.st_mode == _IFCHR) ? 1 : 0;
   13394:	e0bff117 	ldw	r2,-60(fp)
   13398:	10880020 	cmpeqi	r2,r2,8192
   1339c:	10803fcc 	andi	r2,r2,255
   133a0:	00000506 	br	133b8 <isatty+0x90>
    }
  }
  else
  {
    ALT_ERRNO = EBADFD;
   133a4:	00132ec0 	call	132ec <alt_get_errno>
   133a8:	1007883a 	mov	r3,r2
   133ac:	00801444 	movi	r2,81
   133b0:	18800015 	stw	r2,0(r3)
    return 0;
   133b4:	0005883a 	mov	r2,zero
  }
}
   133b8:	e037883a 	mov	sp,fp
   133bc:	dfc00117 	ldw	ra,4(sp)
   133c0:	df000017 	ldw	fp,0(sp)
   133c4:	dec00204 	addi	sp,sp,8
   133c8:	f800283a 	ret

000133cc <alt_load_section>:
 */

static void ALT_INLINE alt_load_section (alt_u32* from, 
                                         alt_u32* to, 
                                         alt_u32* end)
{
   133cc:	defffc04 	addi	sp,sp,-16
   133d0:	df000315 	stw	fp,12(sp)
   133d4:	df000304 	addi	fp,sp,12
   133d8:	e13ffd15 	stw	r4,-12(fp)
   133dc:	e17ffe15 	stw	r5,-8(fp)
   133e0:	e1bfff15 	stw	r6,-4(fp)
  if (to != from)
   133e4:	e0fffe17 	ldw	r3,-8(fp)
   133e8:	e0bffd17 	ldw	r2,-12(fp)
   133ec:	18800c26 	beq	r3,r2,13420 <alt_load_section+0x54>
  {
    while( to != end )
   133f0:	00000806 	br	13414 <alt_load_section+0x48>
    {
      *to++ = *from++;
   133f4:	e0bffe17 	ldw	r2,-8(fp)
   133f8:	10c00104 	addi	r3,r2,4
   133fc:	e0fffe15 	stw	r3,-8(fp)
   13400:	e0fffd17 	ldw	r3,-12(fp)
   13404:	19000104 	addi	r4,r3,4
   13408:	e13ffd15 	stw	r4,-12(fp)
   1340c:	18c00017 	ldw	r3,0(r3)
   13410:	10c00015 	stw	r3,0(r2)
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
  {
    while( to != end )
   13414:	e0fffe17 	ldw	r3,-8(fp)
   13418:	e0bfff17 	ldw	r2,-4(fp)
   1341c:	18bff51e 	bne	r3,r2,133f4 <__alt_data_end+0xffff33f4>
    {
      *to++ = *from++;
    }
  }
}
   13420:	0001883a 	nop
   13424:	e037883a 	mov	sp,fp
   13428:	df000017 	ldw	fp,0(sp)
   1342c:	dec00104 	addi	sp,sp,4
   13430:	f800283a 	ret

00013434 <alt_load>:
 * there is no bootloader, so this application is responsible for loading to
 * RAM any sections that are required.
 */  

void alt_load (void)
{
   13434:	defffe04 	addi	sp,sp,-8
   13438:	dfc00115 	stw	ra,4(sp)
   1343c:	df000015 	stw	fp,0(sp)
   13440:	d839883a 	mov	fp,sp
  /* 
   * Copy the .rwdata section. 
   */

  alt_load_section (&__flash_rwdata_start, 
   13444:	01800074 	movhi	r6,1
   13448:	319d2d04 	addi	r6,r6,29876
   1344c:	01400074 	movhi	r5,1
   13450:	29569204 	addi	r5,r5,23112
   13454:	01000074 	movhi	r4,1
   13458:	211d2d04 	addi	r4,r4,29876
   1345c:	00133cc0 	call	133cc <alt_load_section>

  /*
   * Copy the exception handler.
   */

  alt_load_section (&__flash_exceptions_start, 
   13460:	01800074 	movhi	r6,1
   13464:	31809104 	addi	r6,r6,580
   13468:	01400074 	movhi	r5,1
   1346c:	29400804 	addi	r5,r5,32
   13470:	01000074 	movhi	r4,1
   13474:	21000804 	addi	r4,r4,32
   13478:	00133cc0 	call	133cc <alt_load_section>

  /*
   * Copy the .rodata section.
   */

  alt_load_section (&__flash_rodata_start, 
   1347c:	01800074 	movhi	r6,1
   13480:	31969204 	addi	r6,r6,23112
   13484:	01400074 	movhi	r5,1
   13488:	29568004 	addi	r5,r5,23040
   1348c:	01000074 	movhi	r4,1
   13490:	21168004 	addi	r4,r4,23040
   13494:	00133cc0 	call	133cc <alt_load_section>
  
  /*
   * Now ensure that the caches are in synch.
   */
  
  alt_dcache_flush_all();
   13498:	00148ec0 	call	148ec <alt_dcache_flush_all>
  alt_icache_flush_all();
   1349c:	0014ad40 	call	14ad4 <alt_icache_flush_all>
}
   134a0:	0001883a 	nop
   134a4:	e037883a 	mov	sp,fp
   134a8:	dfc00117 	ldw	ra,4(sp)
   134ac:	df000017 	ldw	fp,0(sp)
   134b0:	dec00204 	addi	sp,sp,8
   134b4:	f800283a 	ret

000134b8 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   134b8:	defffe04 	addi	sp,sp,-8
   134bc:	dfc00115 	stw	ra,4(sp)
   134c0:	df000015 	stw	fp,0(sp)
   134c4:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   134c8:	d0a00917 	ldw	r2,-32732(gp)
   134cc:	10000326 	beq	r2,zero,134dc <alt_get_errno+0x24>
   134d0:	d0a00917 	ldw	r2,-32732(gp)
   134d4:	103ee83a 	callr	r2
   134d8:	00000106 	br	134e0 <alt_get_errno+0x28>
   134dc:	d0a6ac04 	addi	r2,gp,-25936
}
   134e0:	e037883a 	mov	sp,fp
   134e4:	dfc00117 	ldw	ra,4(sp)
   134e8:	df000017 	ldw	fp,0(sp)
   134ec:	dec00204 	addi	sp,sp,8
   134f0:	f800283a 	ret

000134f4 <lseek>:
 * ALT_LSEEK is mapped onto the lseek() system call in alt_syscall.h
 *
 */

off_t ALT_LSEEK (int file, off_t ptr, int dir)
{
   134f4:	defff904 	addi	sp,sp,-28
   134f8:	dfc00615 	stw	ra,24(sp)
   134fc:	df000515 	stw	fp,20(sp)
   13500:	df000504 	addi	fp,sp,20
   13504:	e13ffd15 	stw	r4,-12(fp)
   13508:	e17ffe15 	stw	r5,-8(fp)
   1350c:	e1bfff15 	stw	r6,-4(fp)
  alt_fd* fd;
  off_t   rc = 0; 
   13510:	e03ffb15 	stw	zero,-20(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
   13514:	e0bffd17 	ldw	r2,-12(fp)
   13518:	10000616 	blt	r2,zero,13534 <lseek+0x40>
   1351c:	e0bffd17 	ldw	r2,-12(fp)
   13520:	10c00324 	muli	r3,r2,12
   13524:	00800074 	movhi	r2,1
   13528:	1098a704 	addi	r2,r2,25244
   1352c:	1885883a 	add	r2,r3,r2
   13530:	00000106 	br	13538 <lseek+0x44>
   13534:	0005883a 	mov	r2,zero
   13538:	e0bffc15 	stw	r2,-16(fp)
  
  if (fd) 
   1353c:	e0bffc17 	ldw	r2,-16(fp)
   13540:	10001026 	beq	r2,zero,13584 <lseek+0x90>
    /*
     * If the device driver provides an implementation of the lseek() function,
     * then call that to process the request.
     */
 
    if (fd->dev->lseek)
   13544:	e0bffc17 	ldw	r2,-16(fp)
   13548:	10800017 	ldw	r2,0(r2)
   1354c:	10800717 	ldw	r2,28(r2)
   13550:	10000926 	beq	r2,zero,13578 <lseek+0x84>
    {
      rc = fd->dev->lseek(fd, ptr, dir);
   13554:	e0bffc17 	ldw	r2,-16(fp)
   13558:	10800017 	ldw	r2,0(r2)
   1355c:	10800717 	ldw	r2,28(r2)
   13560:	e1bfff17 	ldw	r6,-4(fp)
   13564:	e17ffe17 	ldw	r5,-8(fp)
   13568:	e13ffc17 	ldw	r4,-16(fp)
   1356c:	103ee83a 	callr	r2
   13570:	e0bffb15 	stw	r2,-20(fp)
   13574:	00000506 	br	1358c <lseek+0x98>
     * Otherwise return an error.
     */

    else
    {
      rc = -ENOTSUP;
   13578:	00bfde84 	movi	r2,-134
   1357c:	e0bffb15 	stw	r2,-20(fp)
   13580:	00000206 	br	1358c <lseek+0x98>
    }
  }
  else  
  {
    rc = -EBADFD;
   13584:	00bfebc4 	movi	r2,-81
   13588:	e0bffb15 	stw	r2,-20(fp)
  }

  if (rc < 0)
   1358c:	e0bffb17 	ldw	r2,-20(fp)
   13590:	1000070e 	bge	r2,zero,135b0 <lseek+0xbc>
  {
    ALT_ERRNO = -rc;
   13594:	00134b80 	call	134b8 <alt_get_errno>
   13598:	1007883a 	mov	r3,r2
   1359c:	e0bffb17 	ldw	r2,-20(fp)
   135a0:	0085c83a 	sub	r2,zero,r2
   135a4:	18800015 	stw	r2,0(r3)
    rc = -1;
   135a8:	00bfffc4 	movi	r2,-1
   135ac:	e0bffb15 	stw	r2,-20(fp)
  }

  return rc;
   135b0:	e0bffb17 	ldw	r2,-20(fp)
}
   135b4:	e037883a 	mov	sp,fp
   135b8:	dfc00117 	ldw	ra,4(sp)
   135bc:	df000017 	ldw	fp,0(sp)
   135c0:	dec00204 	addi	sp,sp,8
   135c4:	f800283a 	ret

000135c8 <alt_main>:
 * devices/filesystems/components in the system; and call the entry point for
 * the users application, i.e. main().
 */

void alt_main (void)
{
   135c8:	defffd04 	addi	sp,sp,-12
   135cc:	dfc00215 	stw	ra,8(sp)
   135d0:	df000115 	stw	fp,4(sp)
   135d4:	df000104 	addi	fp,sp,4
#endif

  /* ALT LOG - please see HAL/sys/alt_log_printf.h for details */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Entering alt_main, calling alt_irq_init.\r\n");
  /* Initialize the interrupt controller. */
  alt_irq_init (NULL);
   135d8:	0009883a 	mov	r4,zero
   135dc:	0013a700 	call	13a70 <alt_irq_init>

  /* Initialize the operating system */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done alt_irq_init, calling alt_os_init.\r\n");
  ALT_OS_INIT();
   135e0:	0001883a 	nop
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done OS Init, calling alt_sem_create.\r\n");
  ALT_SEM_CREATE (&alt_fd_list_lock, 1);

  /* Initialize the device drivers/software components. */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling alt_sys_init.\r\n");
  alt_sys_init();
   135e4:	0013aa80 	call	13aa8 <alt_sys_init>
   * devices be present (not equal to /dev/null) and if direct drivers
   * aren't being used.
   */

    ALT_LOG_PRINT_BOOT("[alt_main.c] Redirecting IO.\r\n");
    alt_io_redirect(ALT_STDOUT, ALT_STDIN, ALT_STDERR);
   135e8:	01800074 	movhi	r6,1
   135ec:	31968a04 	addi	r6,r6,23080
   135f0:	01400074 	movhi	r5,1
   135f4:	29568a04 	addi	r5,r5,23080
   135f8:	01000074 	movhi	r4,1
   135fc:	21168a04 	addi	r4,r4,23080
   13600:	0014e6c0 	call	14e6c <alt_io_redirect>
  /* 
   * Call the C++ constructors 
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling C++ constructors.\r\n");
  _do_ctors ();
   13604:	0014a140 	call	14a14 <_do_ctors>
   * redefined as _exit()). This is in the interest of reducing code footprint,
   * in that the atexit() overhead is removed when it's not needed.
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling atexit.\r\n");
  atexit (_do_dtors);
   13608:	01000074 	movhi	r4,1
   1360c:	21129d04 	addi	r4,r4,19060
   13610:	001566c0 	call	1566c <atexit>
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling main.\r\n");

#ifdef ALT_NO_EXIT
  main (alt_argc, alt_argv, alt_envp);
#else
  result = main (alt_argc, alt_argv, alt_envp);
   13614:	d0a6ad17 	ldw	r2,-25932(gp)
   13618:	d0e6ae17 	ldw	r3,-25928(gp)
   1361c:	d126af17 	ldw	r4,-25924(gp)
   13620:	200d883a 	mov	r6,r4
   13624:	180b883a 	mov	r5,r3
   13628:	1009883a 	mov	r4,r2
   1362c:	00102900 	call	10290 <main>
   13630:	e0bfff15 	stw	r2,-4(fp)
  close(STDOUT_FILENO);
   13634:	01000044 	movi	r4,1
   13638:	00131040 	call	13104 <close>
  exit (result);
   1363c:	e13fff17 	ldw	r4,-4(fp)
   13640:	00156800 	call	15680 <exit>

00013644 <__malloc_lock>:
 * configuration is single threaded, so there is nothing to do here. Note that 
 * this requires that malloc is never called by an interrupt service routine.
 */

void __malloc_lock ( struct _reent *_r )
{
   13644:	defffe04 	addi	sp,sp,-8
   13648:	df000115 	stw	fp,4(sp)
   1364c:	df000104 	addi	fp,sp,4
   13650:	e13fff15 	stw	r4,-4(fp)
}
   13654:	0001883a 	nop
   13658:	e037883a 	mov	sp,fp
   1365c:	df000017 	ldw	fp,0(sp)
   13660:	dec00104 	addi	sp,sp,4
   13664:	f800283a 	ret

00013668 <__malloc_unlock>:
/*
 *
 */

void __malloc_unlock ( struct _reent *_r )
{
   13668:	defffe04 	addi	sp,sp,-8
   1366c:	df000115 	stw	fp,4(sp)
   13670:	df000104 	addi	fp,sp,4
   13674:	e13fff15 	stw	r4,-4(fp)
}
   13678:	0001883a 	nop
   1367c:	e037883a 	mov	sp,fp
   13680:	df000017 	ldw	fp,0(sp)
   13684:	dec00104 	addi	sp,sp,4
   13688:	f800283a 	ret

0001368c <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   1368c:	defffe04 	addi	sp,sp,-8
   13690:	dfc00115 	stw	ra,4(sp)
   13694:	df000015 	stw	fp,0(sp)
   13698:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   1369c:	d0a00917 	ldw	r2,-32732(gp)
   136a0:	10000326 	beq	r2,zero,136b0 <alt_get_errno+0x24>
   136a4:	d0a00917 	ldw	r2,-32732(gp)
   136a8:	103ee83a 	callr	r2
   136ac:	00000106 	br	136b4 <alt_get_errno+0x28>
   136b0:	d0a6ac04 	addi	r2,gp,-25936
}
   136b4:	e037883a 	mov	sp,fp
   136b8:	dfc00117 	ldw	ra,4(sp)
   136bc:	df000017 	ldw	fp,0(sp)
   136c0:	dec00204 	addi	sp,sp,8
   136c4:	f800283a 	ret

000136c8 <read>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_READ (int file, void *ptr, size_t len)
{
   136c8:	defff904 	addi	sp,sp,-28
   136cc:	dfc00615 	stw	ra,24(sp)
   136d0:	df000515 	stw	fp,20(sp)
   136d4:	df000504 	addi	fp,sp,20
   136d8:	e13ffd15 	stw	r4,-12(fp)
   136dc:	e17ffe15 	stw	r5,-8(fp)
   136e0:	e1bfff15 	stw	r6,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
   136e4:	e0bffd17 	ldw	r2,-12(fp)
   136e8:	10000616 	blt	r2,zero,13704 <read+0x3c>
   136ec:	e0bffd17 	ldw	r2,-12(fp)
   136f0:	10c00324 	muli	r3,r2,12
   136f4:	00800074 	movhi	r2,1
   136f8:	1098a704 	addi	r2,r2,25244
   136fc:	1885883a 	add	r2,r3,r2
   13700:	00000106 	br	13708 <read+0x40>
   13704:	0005883a 	mov	r2,zero
   13708:	e0bffb15 	stw	r2,-20(fp)
  
  if (fd)
   1370c:	e0bffb17 	ldw	r2,-20(fp)
   13710:	10002226 	beq	r2,zero,1379c <read+0xd4>
     * If the file has not been opened with read access, or if the driver does
     * not provide an implementation of read(), generate an error. Otherwise
     * call the drivers read() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_WRONLY) && 
   13714:	e0bffb17 	ldw	r2,-20(fp)
   13718:	10800217 	ldw	r2,8(r2)
   1371c:	108000cc 	andi	r2,r2,3
   13720:	10800060 	cmpeqi	r2,r2,1
   13724:	1000181e 	bne	r2,zero,13788 <read+0xc0>
        (fd->dev->read))
   13728:	e0bffb17 	ldw	r2,-20(fp)
   1372c:	10800017 	ldw	r2,0(r2)
   13730:	10800517 	ldw	r2,20(r2)
     * If the file has not been opened with read access, or if the driver does
     * not provide an implementation of read(), generate an error. Otherwise
     * call the drivers read() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_WRONLY) && 
   13734:	10001426 	beq	r2,zero,13788 <read+0xc0>
        (fd->dev->read))
      {
        if ((rval = fd->dev->read(fd, ptr, len)) < 0)
   13738:	e0bffb17 	ldw	r2,-20(fp)
   1373c:	10800017 	ldw	r2,0(r2)
   13740:	10800517 	ldw	r2,20(r2)
   13744:	e0ffff17 	ldw	r3,-4(fp)
   13748:	180d883a 	mov	r6,r3
   1374c:	e17ffe17 	ldw	r5,-8(fp)
   13750:	e13ffb17 	ldw	r4,-20(fp)
   13754:	103ee83a 	callr	r2
   13758:	e0bffc15 	stw	r2,-16(fp)
   1375c:	e0bffc17 	ldw	r2,-16(fp)
   13760:	1000070e 	bge	r2,zero,13780 <read+0xb8>
        {
          ALT_ERRNO = -rval;
   13764:	001368c0 	call	1368c <alt_get_errno>
   13768:	1007883a 	mov	r3,r2
   1376c:	e0bffc17 	ldw	r2,-16(fp)
   13770:	0085c83a 	sub	r2,zero,r2
   13774:	18800015 	stw	r2,0(r3)
          return -1;
   13778:	00bfffc4 	movi	r2,-1
   1377c:	00000c06 	br	137b0 <read+0xe8>
        }
        return rval;
   13780:	e0bffc17 	ldw	r2,-16(fp)
   13784:	00000a06 	br	137b0 <read+0xe8>
      }
      else
      {
        ALT_ERRNO = EACCES;
   13788:	001368c0 	call	1368c <alt_get_errno>
   1378c:	1007883a 	mov	r3,r2
   13790:	00800344 	movi	r2,13
   13794:	18800015 	stw	r2,0(r3)
   13798:	00000406 	br	137ac <read+0xe4>
      }
    }
  else
  {
    ALT_ERRNO = EBADFD;
   1379c:	001368c0 	call	1368c <alt_get_errno>
   137a0:	1007883a 	mov	r3,r2
   137a4:	00801444 	movi	r2,81
   137a8:	18800015 	stw	r2,0(r3)
  }
  return -1;
   137ac:	00bfffc4 	movi	r2,-1
}
   137b0:	e037883a 	mov	sp,fp
   137b4:	dfc00117 	ldw	ra,4(sp)
   137b8:	df000017 	ldw	fp,0(sp)
   137bc:	dec00204 	addi	sp,sp,8
   137c0:	f800283a 	ret

000137c4 <alt_release_fd>:
 * File descriptors correcponding to standard in, standard out and standard 
 * error cannont be released backed to the pool. They are always reserved.
 */

void alt_release_fd (int fd)
{
   137c4:	defffe04 	addi	sp,sp,-8
   137c8:	df000115 	stw	fp,4(sp)
   137cc:	df000104 	addi	fp,sp,4
   137d0:	e13fff15 	stw	r4,-4(fp)
  if (fd > 2)
   137d4:	e0bfff17 	ldw	r2,-4(fp)
   137d8:	108000d0 	cmplti	r2,r2,3
   137dc:	10000d1e 	bne	r2,zero,13814 <alt_release_fd+0x50>
  {
    alt_fd_list[fd].fd_flags = 0;
   137e0:	00800074 	movhi	r2,1
   137e4:	1098a704 	addi	r2,r2,25244
   137e8:	e0ffff17 	ldw	r3,-4(fp)
   137ec:	18c00324 	muli	r3,r3,12
   137f0:	10c5883a 	add	r2,r2,r3
   137f4:	10800204 	addi	r2,r2,8
   137f8:	10000015 	stw	zero,0(r2)
    alt_fd_list[fd].dev      = 0;
   137fc:	00800074 	movhi	r2,1
   13800:	1098a704 	addi	r2,r2,25244
   13804:	e0ffff17 	ldw	r3,-4(fp)
   13808:	18c00324 	muli	r3,r3,12
   1380c:	10c5883a 	add	r2,r2,r3
   13810:	10000015 	stw	zero,0(r2)
  }
}
   13814:	0001883a 	nop
   13818:	e037883a 	mov	sp,fp
   1381c:	df000017 	ldw	fp,0(sp)
   13820:	dec00104 	addi	sp,sp,4
   13824:	f800283a 	ret

00013828 <sbrk>:
#endif
 
caddr_t ALT_SBRK (int incr) __attribute__ ((no_instrument_function ));

caddr_t ALT_SBRK (int incr)
{ 
   13828:	defff904 	addi	sp,sp,-28
   1382c:	df000615 	stw	fp,24(sp)
   13830:	df000604 	addi	fp,sp,24
   13834:	e13fff15 	stw	r4,-4(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   13838:	0005303a 	rdctl	r2,status
   1383c:	e0bffe15 	stw	r2,-8(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   13840:	e0fffe17 	ldw	r3,-8(fp)
   13844:	00bfff84 	movi	r2,-2
   13848:	1884703a 	and	r2,r3,r2
   1384c:	1001703a 	wrctl	status,r2
  
  return context;
   13850:	e0bffe17 	ldw	r2,-8(fp)
  alt_irq_context context;
  char *prev_heap_end; 

  context = alt_irq_disable_all();
   13854:	e0bffb15 	stw	r2,-20(fp)

  /* Always return data aligned on a word boundary */
  heap_end = (char *)(((unsigned int)heap_end + 3) & ~3);
   13858:	d0a00a17 	ldw	r2,-32728(gp)
   1385c:	10c000c4 	addi	r3,r2,3
   13860:	00bfff04 	movi	r2,-4
   13864:	1884703a 	and	r2,r3,r2
   13868:	d0a00a15 	stw	r2,-32728(gp)
  if (((heap_end + incr) - __alt_heap_start) > ALT_MAX_HEAP_BYTES) {
    alt_irq_enable_all(context);
    return (caddr_t)-1;
  }
#else
  if ((heap_end + incr) > __alt_heap_limit) {
   1386c:	d0e00a17 	ldw	r3,-32728(gp)
   13870:	e0bfff17 	ldw	r2,-4(fp)
   13874:	1887883a 	add	r3,r3,r2
   13878:	008000b4 	movhi	r2,2
   1387c:	10800004 	addi	r2,r2,0
   13880:	10c0062e 	bgeu	r2,r3,1389c <sbrk+0x74>
   13884:	e0bffb17 	ldw	r2,-20(fp)
   13888:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   1388c:	e0bffa17 	ldw	r2,-24(fp)
   13890:	1001703a 	wrctl	status,r2
    alt_irq_enable_all(context);
    return (caddr_t)-1;
   13894:	00bfffc4 	movi	r2,-1
   13898:	00000b06 	br	138c8 <sbrk+0xa0>
  }
#endif

  prev_heap_end = heap_end; 
   1389c:	d0a00a17 	ldw	r2,-32728(gp)
   138a0:	e0bffd15 	stw	r2,-12(fp)
  heap_end += incr; 
   138a4:	d0e00a17 	ldw	r3,-32728(gp)
   138a8:	e0bfff17 	ldw	r2,-4(fp)
   138ac:	1885883a 	add	r2,r3,r2
   138b0:	d0a00a15 	stw	r2,-32728(gp)
   138b4:	e0bffb17 	ldw	r2,-20(fp)
   138b8:	e0bffc15 	stw	r2,-16(fp)
   138bc:	e0bffc17 	ldw	r2,-16(fp)
   138c0:	1001703a 	wrctl	status,r2

#endif

  alt_irq_enable_all(context);

  return (caddr_t) prev_heap_end; 
   138c4:	e0bffd17 	ldw	r2,-12(fp)
} 
   138c8:	e037883a 	mov	sp,fp
   138cc:	df000017 	ldw	fp,0(sp)
   138d0:	dec00104 	addi	sp,sp,4
   138d4:	f800283a 	ret

000138d8 <usleep>:
#if defined (__GNUC__) && __GNUC__ >= 4
int ALT_USLEEP (useconds_t us)
#else
unsigned int ALT_USLEEP (unsigned int us)
#endif
{
   138d8:	defffd04 	addi	sp,sp,-12
   138dc:	dfc00215 	stw	ra,8(sp)
   138e0:	df000115 	stw	fp,4(sp)
   138e4:	df000104 	addi	fp,sp,4
   138e8:	e13fff15 	stw	r4,-4(fp)
  return alt_busy_sleep(us);
   138ec:	e13fff17 	ldw	r4,-4(fp)
   138f0:	00147940 	call	14794 <alt_busy_sleep>
}
   138f4:	e037883a 	mov	sp,fp
   138f8:	dfc00117 	ldw	ra,4(sp)
   138fc:	df000017 	ldw	fp,0(sp)
   13900:	dec00204 	addi	sp,sp,8
   13904:	f800283a 	ret

00013908 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   13908:	defffe04 	addi	sp,sp,-8
   1390c:	dfc00115 	stw	ra,4(sp)
   13910:	df000015 	stw	fp,0(sp)
   13914:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   13918:	d0a00917 	ldw	r2,-32732(gp)
   1391c:	10000326 	beq	r2,zero,1392c <alt_get_errno+0x24>
   13920:	d0a00917 	ldw	r2,-32732(gp)
   13924:	103ee83a 	callr	r2
   13928:	00000106 	br	13930 <alt_get_errno+0x28>
   1392c:	d0a6ac04 	addi	r2,gp,-25936
}
   13930:	e037883a 	mov	sp,fp
   13934:	dfc00117 	ldw	ra,4(sp)
   13938:	df000017 	ldw	fp,0(sp)
   1393c:	dec00204 	addi	sp,sp,8
   13940:	f800283a 	ret

00013944 <write>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_WRITE (int file, const void *ptr, size_t len)
{
   13944:	defff904 	addi	sp,sp,-28
   13948:	dfc00615 	stw	ra,24(sp)
   1394c:	df000515 	stw	fp,20(sp)
   13950:	df000504 	addi	fp,sp,20
   13954:	e13ffd15 	stw	r4,-12(fp)
   13958:	e17ffe15 	stw	r5,-8(fp)
   1395c:	e1bfff15 	stw	r6,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
   13960:	e0bffd17 	ldw	r2,-12(fp)
   13964:	10000616 	blt	r2,zero,13980 <write+0x3c>
   13968:	e0bffd17 	ldw	r2,-12(fp)
   1396c:	10c00324 	muli	r3,r2,12
   13970:	00800074 	movhi	r2,1
   13974:	1098a704 	addi	r2,r2,25244
   13978:	1885883a 	add	r2,r3,r2
   1397c:	00000106 	br	13984 <write+0x40>
   13980:	0005883a 	mov	r2,zero
   13984:	e0bffb15 	stw	r2,-20(fp)
  
  if (fd)
   13988:	e0bffb17 	ldw	r2,-20(fp)
   1398c:	10002126 	beq	r2,zero,13a14 <write+0xd0>
     * If the file has not been opened with write access, or if the driver does
     * not provide an implementation of write(), generate an error. Otherwise
     * call the drivers write() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_RDONLY) && fd->dev->write)
   13990:	e0bffb17 	ldw	r2,-20(fp)
   13994:	10800217 	ldw	r2,8(r2)
   13998:	108000cc 	andi	r2,r2,3
   1399c:	10001826 	beq	r2,zero,13a00 <write+0xbc>
   139a0:	e0bffb17 	ldw	r2,-20(fp)
   139a4:	10800017 	ldw	r2,0(r2)
   139a8:	10800617 	ldw	r2,24(r2)
   139ac:	10001426 	beq	r2,zero,13a00 <write+0xbc>
    {
      
      /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */
      ALT_LOG_WRITE_FUNCTION(ptr,len);

      if ((rval = fd->dev->write(fd, ptr, len)) < 0)
   139b0:	e0bffb17 	ldw	r2,-20(fp)
   139b4:	10800017 	ldw	r2,0(r2)
   139b8:	10800617 	ldw	r2,24(r2)
   139bc:	e0ffff17 	ldw	r3,-4(fp)
   139c0:	180d883a 	mov	r6,r3
   139c4:	e17ffe17 	ldw	r5,-8(fp)
   139c8:	e13ffb17 	ldw	r4,-20(fp)
   139cc:	103ee83a 	callr	r2
   139d0:	e0bffc15 	stw	r2,-16(fp)
   139d4:	e0bffc17 	ldw	r2,-16(fp)
   139d8:	1000070e 	bge	r2,zero,139f8 <write+0xb4>
      {
        ALT_ERRNO = -rval;
   139dc:	00139080 	call	13908 <alt_get_errno>
   139e0:	1007883a 	mov	r3,r2
   139e4:	e0bffc17 	ldw	r2,-16(fp)
   139e8:	0085c83a 	sub	r2,zero,r2
   139ec:	18800015 	stw	r2,0(r3)
        return -1;
   139f0:	00bfffc4 	movi	r2,-1
   139f4:	00000c06 	br	13a28 <write+0xe4>
      }
      return rval;
   139f8:	e0bffc17 	ldw	r2,-16(fp)
   139fc:	00000a06 	br	13a28 <write+0xe4>
    }
    else
    {
      ALT_ERRNO = EACCES;
   13a00:	00139080 	call	13908 <alt_get_errno>
   13a04:	1007883a 	mov	r3,r2
   13a08:	00800344 	movi	r2,13
   13a0c:	18800015 	stw	r2,0(r3)
   13a10:	00000406 	br	13a24 <write+0xe0>
    }
  }
  else  
  {
    ALT_ERRNO = EBADFD;
   13a14:	00139080 	call	13908 <alt_get_errno>
   13a18:	1007883a 	mov	r3,r2
   13a1c:	00801444 	movi	r2,81
   13a20:	18800015 	stw	r2,0(r3)
  }
  return -1;
   13a24:	00bfffc4 	movi	r2,-1
}
   13a28:	e037883a 	mov	sp,fp
   13a2c:	dfc00117 	ldw	ra,4(sp)
   13a30:	df000017 	ldw	fp,0(sp)
   13a34:	dec00204 	addi	sp,sp,8
   13a38:	f800283a 	ret

00013a3c <alt_dev_reg>:
 */

extern int alt_fs_reg  (alt_dev* dev); 

static ALT_INLINE int alt_dev_reg (alt_dev* dev)
{
   13a3c:	defffd04 	addi	sp,sp,-12
   13a40:	dfc00215 	stw	ra,8(sp)
   13a44:	df000115 	stw	fp,4(sp)
   13a48:	df000104 	addi	fp,sp,4
   13a4c:	e13fff15 	stw	r4,-4(fp)
  extern alt_llist alt_dev_list;

  return alt_dev_llist_insert ((alt_dev_llist*) dev, &alt_dev_list);
   13a50:	d1600604 	addi	r5,gp,-32744
   13a54:	e13fff17 	ldw	r4,-4(fp)
   13a58:	00149700 	call	14970 <alt_dev_llist_insert>
}
   13a5c:	e037883a 	mov	sp,fp
   13a60:	dfc00117 	ldw	ra,4(sp)
   13a64:	df000017 	ldw	fp,0(sp)
   13a68:	dec00204 	addi	sp,sp,8
   13a6c:	f800283a 	ret

00013a70 <alt_irq_init>:
 * The "base" parameter is ignored and only
 * present for backwards-compatibility.
 */

void alt_irq_init ( const void* base )
{
   13a70:	defffd04 	addi	sp,sp,-12
   13a74:	dfc00215 	stw	ra,8(sp)
   13a78:	df000115 	stw	fp,4(sp)
   13a7c:	df000104 	addi	fp,sp,4
   13a80:	e13fff15 	stw	r4,-4(fp)
    ALTERA_NIOS2_GEN2_IRQ_INIT ( NIOS2_GEN2, nios2_gen2);
   13a84:	00152e00 	call	152e0 <altera_nios2_gen2_irq_init>
 * alt_irq_cpu_enable_interrupts() enables the CPU to start taking interrupts.
 */
static ALT_INLINE void ALT_ALWAYS_INLINE 
       alt_irq_cpu_enable_interrupts (void)
{
    NIOS2_WRITE_STATUS(NIOS2_STATUS_PIE_MSK
   13a88:	00800044 	movi	r2,1
   13a8c:	1001703a 	wrctl	status,r2
    alt_irq_cpu_enable_interrupts();
}
   13a90:	0001883a 	nop
   13a94:	e037883a 	mov	sp,fp
   13a98:	dfc00117 	ldw	ra,4(sp)
   13a9c:	df000017 	ldw	fp,0(sp)
   13aa0:	dec00204 	addi	sp,sp,8
   13aa4:	f800283a 	ret

00013aa8 <alt_sys_init>:
 * Initialize the non-interrupt controller devices.
 * Called after alt_irq_init().
 */

void alt_sys_init( void )
{
   13aa8:	defffe04 	addi	sp,sp,-8
   13aac:	dfc00115 	stw	ra,4(sp)
   13ab0:	df000015 	stw	fp,0(sp)
   13ab4:	d839883a 	mov	fp,sp
    ALTERA_AVALON_TIMER_INIT ( TIMER, timer);
   13ab8:	01c0fa04 	movi	r7,1000
   13abc:	01800044 	movi	r6,1
   13ac0:	000b883a 	mov	r5,zero
   13ac4:	010000b4 	movhi	r4,2
   13ac8:	21040004 	addi	r4,r4,4096
   13acc:	00145ec0 	call	145ec <alt_avalon_timer_sc_init>
    ALTERA_AVALON_JTAG_UART_INIT ( JTAG_UART, jtag_uart);
   13ad0:	000d883a 	mov	r6,zero
   13ad4:	000b883a 	mov	r5,zero
   13ad8:	01000074 	movhi	r4,1
   13adc:	21191104 	addi	r4,r4,25668
   13ae0:	0013c700 	call	13c70 <altera_avalon_jtag_uart_init>
   13ae4:	01000074 	movhi	r4,1
   13ae8:	21190704 	addi	r4,r4,25628
   13aec:	0013a3c0 	call	13a3c <alt_dev_reg>
    ALTERA_AVALON_SYSID_QSYS_INIT ( SYSID_QSYS, sysid_qsys);
   13af0:	0001883a 	nop
}
   13af4:	0001883a 	nop
   13af8:	e037883a 	mov	sp,fp
   13afc:	dfc00117 	ldw	ra,4(sp)
   13b00:	df000017 	ldw	fp,0(sp)
   13b04:	dec00204 	addi	sp,sp,8
   13b08:	f800283a 	ret

00013b0c <altera_avalon_jtag_uart_read_fd>:
 *
 */

int 
altera_avalon_jtag_uart_read_fd(alt_fd* fd, char* buffer, int space)
{
   13b0c:	defffa04 	addi	sp,sp,-24
   13b10:	dfc00515 	stw	ra,20(sp)
   13b14:	df000415 	stw	fp,16(sp)
   13b18:	df000404 	addi	fp,sp,16
   13b1c:	e13ffd15 	stw	r4,-12(fp)
   13b20:	e17ffe15 	stw	r5,-8(fp)
   13b24:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
   13b28:	e0bffd17 	ldw	r2,-12(fp)
   13b2c:	10800017 	ldw	r2,0(r2)
   13b30:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_read(&dev->state, buffer, space,
   13b34:	e0bffc17 	ldw	r2,-16(fp)
   13b38:	10c00a04 	addi	r3,r2,40
   13b3c:	e0bffd17 	ldw	r2,-12(fp)
   13b40:	10800217 	ldw	r2,8(r2)
   13b44:	100f883a 	mov	r7,r2
   13b48:	e1bfff17 	ldw	r6,-4(fp)
   13b4c:	e17ffe17 	ldw	r5,-8(fp)
   13b50:	1809883a 	mov	r4,r3
   13b54:	00141340 	call	14134 <altera_avalon_jtag_uart_read>
      fd->fd_flags);
}
   13b58:	e037883a 	mov	sp,fp
   13b5c:	dfc00117 	ldw	ra,4(sp)
   13b60:	df000017 	ldw	fp,0(sp)
   13b64:	dec00204 	addi	sp,sp,8
   13b68:	f800283a 	ret

00013b6c <altera_avalon_jtag_uart_write_fd>:

int 
altera_avalon_jtag_uart_write_fd(alt_fd* fd, const char* buffer, int space)
{
   13b6c:	defffa04 	addi	sp,sp,-24
   13b70:	dfc00515 	stw	ra,20(sp)
   13b74:	df000415 	stw	fp,16(sp)
   13b78:	df000404 	addi	fp,sp,16
   13b7c:	e13ffd15 	stw	r4,-12(fp)
   13b80:	e17ffe15 	stw	r5,-8(fp)
   13b84:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
   13b88:	e0bffd17 	ldw	r2,-12(fp)
   13b8c:	10800017 	ldw	r2,0(r2)
   13b90:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_write(&dev->state, buffer, space,
   13b94:	e0bffc17 	ldw	r2,-16(fp)
   13b98:	10c00a04 	addi	r3,r2,40
   13b9c:	e0bffd17 	ldw	r2,-12(fp)
   13ba0:	10800217 	ldw	r2,8(r2)
   13ba4:	100f883a 	mov	r7,r2
   13ba8:	e1bfff17 	ldw	r6,-4(fp)
   13bac:	e17ffe17 	ldw	r5,-8(fp)
   13bb0:	1809883a 	mov	r4,r3
   13bb4:	00143500 	call	14350 <altera_avalon_jtag_uart_write>
      fd->fd_flags);
}
   13bb8:	e037883a 	mov	sp,fp
   13bbc:	dfc00117 	ldw	ra,4(sp)
   13bc0:	df000017 	ldw	fp,0(sp)
   13bc4:	dec00204 	addi	sp,sp,8
   13bc8:	f800283a 	ret

00013bcc <altera_avalon_jtag_uart_close_fd>:

#ifndef ALTERA_AVALON_JTAG_UART_SMALL

int 
altera_avalon_jtag_uart_close_fd(alt_fd* fd)
{
   13bcc:	defffc04 	addi	sp,sp,-16
   13bd0:	dfc00315 	stw	ra,12(sp)
   13bd4:	df000215 	stw	fp,8(sp)
   13bd8:	df000204 	addi	fp,sp,8
   13bdc:	e13fff15 	stw	r4,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
   13be0:	e0bfff17 	ldw	r2,-4(fp)
   13be4:	10800017 	ldw	r2,0(r2)
   13be8:	e0bffe15 	stw	r2,-8(fp)

    return altera_avalon_jtag_uart_close(&dev->state, fd->fd_flags);
   13bec:	e0bffe17 	ldw	r2,-8(fp)
   13bf0:	10c00a04 	addi	r3,r2,40
   13bf4:	e0bfff17 	ldw	r2,-4(fp)
   13bf8:	10800217 	ldw	r2,8(r2)
   13bfc:	100b883a 	mov	r5,r2
   13c00:	1809883a 	mov	r4,r3
   13c04:	0013fdc0 	call	13fdc <altera_avalon_jtag_uart_close>
}
   13c08:	e037883a 	mov	sp,fp
   13c0c:	dfc00117 	ldw	ra,4(sp)
   13c10:	df000017 	ldw	fp,0(sp)
   13c14:	dec00204 	addi	sp,sp,8
   13c18:	f800283a 	ret

00013c1c <altera_avalon_jtag_uart_ioctl_fd>:

int 
altera_avalon_jtag_uart_ioctl_fd(alt_fd* fd, int req, void* arg)
{
   13c1c:	defffa04 	addi	sp,sp,-24
   13c20:	dfc00515 	stw	ra,20(sp)
   13c24:	df000415 	stw	fp,16(sp)
   13c28:	df000404 	addi	fp,sp,16
   13c2c:	e13ffd15 	stw	r4,-12(fp)
   13c30:	e17ffe15 	stw	r5,-8(fp)
   13c34:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev;
   13c38:	e0bffd17 	ldw	r2,-12(fp)
   13c3c:	10800017 	ldw	r2,0(r2)
   13c40:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_ioctl(&dev->state, req, arg);
   13c44:	e0bffc17 	ldw	r2,-16(fp)
   13c48:	10800a04 	addi	r2,r2,40
   13c4c:	e1bfff17 	ldw	r6,-4(fp)
   13c50:	e17ffe17 	ldw	r5,-8(fp)
   13c54:	1009883a 	mov	r4,r2
   13c58:	00140440 	call	14044 <altera_avalon_jtag_uart_ioctl>
}
   13c5c:	e037883a 	mov	sp,fp
   13c60:	dfc00117 	ldw	ra,4(sp)
   13c64:	df000017 	ldw	fp,0(sp)
   13c68:	dec00204 	addi	sp,sp,8
   13c6c:	f800283a 	ret

00013c70 <altera_avalon_jtag_uart_init>:
 * Return 1 on sucessful IRQ register and 0 on failure.
 */

void altera_avalon_jtag_uart_init(altera_avalon_jtag_uart_state* sp, 
                                  int irq_controller_id, int irq)
{
   13c70:	defffa04 	addi	sp,sp,-24
   13c74:	dfc00515 	stw	ra,20(sp)
   13c78:	df000415 	stw	fp,16(sp)
   13c7c:	df000404 	addi	fp,sp,16
   13c80:	e13ffd15 	stw	r4,-12(fp)
   13c84:	e17ffe15 	stw	r5,-8(fp)
   13c88:	e1bfff15 	stw	r6,-4(fp)
  ALT_FLAG_CREATE(&sp->events, 0);
  ALT_SEM_CREATE(&sp->read_lock, 1);
  ALT_SEM_CREATE(&sp->write_lock, 1);

  /* enable read interrupts at the device */
  sp->irq_enable = ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
   13c8c:	e0bffd17 	ldw	r2,-12(fp)
   13c90:	00c00044 	movi	r3,1
   13c94:	10c00815 	stw	r3,32(r2)

  IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable); 
   13c98:	e0bffd17 	ldw	r2,-12(fp)
   13c9c:	10800017 	ldw	r2,0(r2)
   13ca0:	10800104 	addi	r2,r2,4
   13ca4:	1007883a 	mov	r3,r2
   13ca8:	e0bffd17 	ldw	r2,-12(fp)
   13cac:	10800817 	ldw	r2,32(r2)
   13cb0:	18800035 	stwio	r2,0(r3)
  
  /* register the interrupt handler */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
  alt_ic_isr_register(irq_controller_id, irq, altera_avalon_jtag_uart_irq, 
   13cb4:	e0bffe17 	ldw	r2,-8(fp)
   13cb8:	e0ffff17 	ldw	r3,-4(fp)
   13cbc:	d8000015 	stw	zero,0(sp)
   13cc0:	e1fffd17 	ldw	r7,-12(fp)
   13cc4:	01800074 	movhi	r6,1
   13cc8:	318f4c04 	addi	r6,r6,15664
   13ccc:	180b883a 	mov	r5,r3
   13cd0:	1009883a 	mov	r4,r2
   13cd4:	0014b080 	call	14b08 <alt_ic_isr_register>
#else
  alt_irq_register(irq, sp, altera_avalon_jtag_uart_irq);
#endif  

  /* Register an alarm to go off every second to check for presence of host */
  sp->host_inactive = 0;
   13cd8:	e0bffd17 	ldw	r2,-12(fp)
   13cdc:	10000915 	stw	zero,36(r2)

  if (alt_alarm_start(&sp->alarm, alt_ticks_per_second(), 
   13ce0:	e0bffd17 	ldw	r2,-12(fp)
   13ce4:	10800204 	addi	r2,r2,8
 * Obtain the system clock rate in ticks/s. 
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_ticks_per_second (void)
{
  return _alt_tick_rate;
   13ce8:	d0e6b117 	ldw	r3,-25916(gp)
   13cec:	e1fffd17 	ldw	r7,-12(fp)
   13cf0:	01800074 	movhi	r6,1
   13cf4:	318fcf04 	addi	r6,r6,16188
   13cf8:	180b883a 	mov	r5,r3
   13cfc:	1009883a 	mov	r4,r2
   13d00:	00146680 	call	14668 <alt_alarm_start>
   13d04:	1000040e 	bge	r2,zero,13d18 <altera_avalon_jtag_uart_init+0xa8>
    &altera_avalon_jtag_uart_timeout, sp) < 0)
  {
    /* If we can't set the alarm then record "don't know if host present" 
     * and behave as though the host is present.
     */
    sp->timeout = INT_MAX;
   13d08:	e0fffd17 	ldw	r3,-12(fp)
   13d0c:	00a00034 	movhi	r2,32768
   13d10:	10bfffc4 	addi	r2,r2,-1
   13d14:	18800115 	stw	r2,4(r3)
  }

  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ALARM_REGISTER(sp, sp->base);
}
   13d18:	0001883a 	nop
   13d1c:	e037883a 	mov	sp,fp
   13d20:	dfc00117 	ldw	ra,4(sp)
   13d24:	df000017 	ldw	fp,0(sp)
   13d28:	dec00204 	addi	sp,sp,8
   13d2c:	f800283a 	ret

00013d30 <altera_avalon_jtag_uart_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void altera_avalon_jtag_uart_irq(void* context)
#else
static void altera_avalon_jtag_uart_irq(void* context, alt_u32 id)
#endif
{
   13d30:	defff804 	addi	sp,sp,-32
   13d34:	df000715 	stw	fp,28(sp)
   13d38:	df000704 	addi	fp,sp,28
   13d3c:	e13fff15 	stw	r4,-4(fp)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state*) context;
   13d40:	e0bfff17 	ldw	r2,-4(fp)
   13d44:	e0bffb15 	stw	r2,-20(fp)
  unsigned int base = sp->base;
   13d48:	e0bffb17 	ldw	r2,-20(fp)
   13d4c:	10800017 	ldw	r2,0(r2)
   13d50:	e0bffc15 	stw	r2,-16(fp)
  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ISR_FUNCTION(base, sp);

  for ( ; ; )
  {
    unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
   13d54:	e0bffc17 	ldw	r2,-16(fp)
   13d58:	10800104 	addi	r2,r2,4
   13d5c:	10800037 	ldwio	r2,0(r2)
   13d60:	e0bffd15 	stw	r2,-12(fp)

    /* Return once nothing more to do */
    if ((control & (ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK | ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)) == 0)
   13d64:	e0bffd17 	ldw	r2,-12(fp)
   13d68:	1080c00c 	andi	r2,r2,768
   13d6c:	10006d26 	beq	r2,zero,13f24 <altera_avalon_jtag_uart_irq+0x1f4>
      break;

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK)
   13d70:	e0bffd17 	ldw	r2,-12(fp)
   13d74:	1080400c 	andi	r2,r2,256
   13d78:	10003526 	beq	r2,zero,13e50 <altera_avalon_jtag_uart_irq+0x120>
    {
      /* process a read irq.  Start by assuming that there is data in the
       * receive FIFO (otherwise why would we have been interrupted?)
       */
      unsigned int data = 1 << ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_OFST;
   13d7c:	00800074 	movhi	r2,1
   13d80:	e0bff915 	stw	r2,-28(fp)
      for ( ; ; )
      {
        /* Check whether there is space in the buffer.  If not then we must not
         * read any characters from the buffer as they will be lost.
         */
        unsigned int next = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
   13d84:	e0bffb17 	ldw	r2,-20(fp)
   13d88:	10800a17 	ldw	r2,40(r2)
   13d8c:	10800044 	addi	r2,r2,1
   13d90:	1081ffcc 	andi	r2,r2,2047
   13d94:	e0bffe15 	stw	r2,-8(fp)
        if (next == sp->rx_out)
   13d98:	e0bffb17 	ldw	r2,-20(fp)
   13d9c:	10c00b17 	ldw	r3,44(r2)
   13da0:	e0bffe17 	ldw	r2,-8(fp)
   13da4:	18801526 	beq	r3,r2,13dfc <altera_avalon_jtag_uart_irq+0xcc>
          break;

        /* Try to remove a character from the FIFO and find out whether there
         * are any more characters remaining.
         */
        data = IORD_ALTERA_AVALON_JTAG_UART_DATA(base);
   13da8:	e0bffc17 	ldw	r2,-16(fp)
   13dac:	10800037 	ldwio	r2,0(r2)
   13db0:	e0bff915 	stw	r2,-28(fp)
        
        if ((data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK) == 0)
   13db4:	e0bff917 	ldw	r2,-28(fp)
   13db8:	10a0000c 	andi	r2,r2,32768
   13dbc:	10001126 	beq	r2,zero,13e04 <altera_avalon_jtag_uart_irq+0xd4>
          break;

        sp->rx_buf[sp->rx_in] = (data & ALTERA_AVALON_JTAG_UART_DATA_DATA_MSK) >> ALTERA_AVALON_JTAG_UART_DATA_DATA_OFST;
   13dc0:	e0bffb17 	ldw	r2,-20(fp)
   13dc4:	10800a17 	ldw	r2,40(r2)
   13dc8:	e0fff917 	ldw	r3,-28(fp)
   13dcc:	1809883a 	mov	r4,r3
   13dd0:	e0fffb17 	ldw	r3,-20(fp)
   13dd4:	1885883a 	add	r2,r3,r2
   13dd8:	10800e04 	addi	r2,r2,56
   13ddc:	11000005 	stb	r4,0(r2)
        sp->rx_in = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
   13de0:	e0bffb17 	ldw	r2,-20(fp)
   13de4:	10800a17 	ldw	r2,40(r2)
   13de8:	10800044 	addi	r2,r2,1
   13dec:	10c1ffcc 	andi	r3,r2,2047
   13df0:	e0bffb17 	ldw	r2,-20(fp)
   13df4:	10c00a15 	stw	r3,40(r2)

        /* Post an event to notify jtag_uart_read that a character has been read */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_READ_RDY, OS_FLAG_SET);
      }
   13df8:	003fe206 	br	13d84 <__alt_data_end+0xffff3d84>
        /* Check whether there is space in the buffer.  If not then we must not
         * read any characters from the buffer as they will be lost.
         */
        unsigned int next = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
        if (next == sp->rx_out)
          break;
   13dfc:	0001883a 	nop
   13e00:	00000106 	br	13e08 <altera_avalon_jtag_uart_irq+0xd8>
         * are any more characters remaining.
         */
        data = IORD_ALTERA_AVALON_JTAG_UART_DATA(base);
        
        if ((data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK) == 0)
          break;
   13e04:	0001883a 	nop

        /* Post an event to notify jtag_uart_read that a character has been read */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_READ_RDY, OS_FLAG_SET);
      }

      if (data & ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_MSK)
   13e08:	e0bff917 	ldw	r2,-28(fp)
   13e0c:	10bfffec 	andhi	r2,r2,65535
   13e10:	10000f26 	beq	r2,zero,13e50 <altera_avalon_jtag_uart_irq+0x120>
      {
        /* If there is still data available here then the buffer is full 
         * so turn off receive interrupts until some space becomes available.
         */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
   13e14:	e0bffb17 	ldw	r2,-20(fp)
   13e18:	10c00817 	ldw	r3,32(r2)
   13e1c:	00bfff84 	movi	r2,-2
   13e20:	1886703a 	and	r3,r3,r2
   13e24:	e0bffb17 	ldw	r2,-20(fp)
   13e28:	10c00815 	stw	r3,32(r2)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(base, sp->irq_enable);
   13e2c:	e0bffc17 	ldw	r2,-16(fp)
   13e30:	10800104 	addi	r2,r2,4
   13e34:	1007883a 	mov	r3,r2
   13e38:	e0bffb17 	ldw	r2,-20(fp)
   13e3c:	10800817 	ldw	r2,32(r2)
   13e40:	18800035 	stwio	r2,0(r3)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
   13e44:	e0bffc17 	ldw	r2,-16(fp)
   13e48:	10800104 	addi	r2,r2,4
   13e4c:	10800037 	ldwio	r2,0(r2)
      }
    }

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
   13e50:	e0bffd17 	ldw	r2,-12(fp)
   13e54:	1080800c 	andi	r2,r2,512
   13e58:	103fbe26 	beq	r2,zero,13d54 <__alt_data_end+0xffff3d54>
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;
   13e5c:	e0bffd17 	ldw	r2,-12(fp)
   13e60:	1004d43a 	srli	r2,r2,16
   13e64:	e0bffa15 	stw	r2,-24(fp)

      while (space > 0 && sp->tx_out != sp->tx_in)
   13e68:	00001406 	br	13ebc <altera_avalon_jtag_uart_irq+0x18c>
      {
        IOWR_ALTERA_AVALON_JTAG_UART_DATA(base, sp->tx_buf[sp->tx_out]);
   13e6c:	e0bffc17 	ldw	r2,-16(fp)
   13e70:	e0fffb17 	ldw	r3,-20(fp)
   13e74:	18c00d17 	ldw	r3,52(r3)
   13e78:	e13ffb17 	ldw	r4,-20(fp)
   13e7c:	20c7883a 	add	r3,r4,r3
   13e80:	18c20e04 	addi	r3,r3,2104
   13e84:	18c00003 	ldbu	r3,0(r3)
   13e88:	18c03fcc 	andi	r3,r3,255
   13e8c:	18c0201c 	xori	r3,r3,128
   13e90:	18ffe004 	addi	r3,r3,-128
   13e94:	10c00035 	stwio	r3,0(r2)

        sp->tx_out = (sp->tx_out + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
   13e98:	e0bffb17 	ldw	r2,-20(fp)
   13e9c:	10800d17 	ldw	r2,52(r2)
   13ea0:	10800044 	addi	r2,r2,1
   13ea4:	10c1ffcc 	andi	r3,r2,2047
   13ea8:	e0bffb17 	ldw	r2,-20(fp)
   13eac:	10c00d15 	stw	r3,52(r2)

        /* Post an event to notify jtag_uart_write that a character has been written */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_WRITE_RDY, OS_FLAG_SET);

        space--;
   13eb0:	e0bffa17 	ldw	r2,-24(fp)
   13eb4:	10bfffc4 	addi	r2,r2,-1
   13eb8:	e0bffa15 	stw	r2,-24(fp)
    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;

      while (space > 0 && sp->tx_out != sp->tx_in)
   13ebc:	e0bffa17 	ldw	r2,-24(fp)
   13ec0:	10000526 	beq	r2,zero,13ed8 <altera_avalon_jtag_uart_irq+0x1a8>
   13ec4:	e0bffb17 	ldw	r2,-20(fp)
   13ec8:	10c00d17 	ldw	r3,52(r2)
   13ecc:	e0bffb17 	ldw	r2,-20(fp)
   13ed0:	10800c17 	ldw	r2,48(r2)
   13ed4:	18bfe51e 	bne	r3,r2,13e6c <__alt_data_end+0xffff3e6c>
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_WRITE_RDY, OS_FLAG_SET);

        space--;
      }

      if (space > 0)
   13ed8:	e0bffa17 	ldw	r2,-24(fp)
   13edc:	103f9d26 	beq	r2,zero,13d54 <__alt_data_end+0xffff3d54>
      {
        /* If we don't have any more data available then turn off the TX interrupt */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
   13ee0:	e0bffb17 	ldw	r2,-20(fp)
   13ee4:	10c00817 	ldw	r3,32(r2)
   13ee8:	00bfff44 	movi	r2,-3
   13eec:	1886703a 	and	r3,r3,r2
   13ef0:	e0bffb17 	ldw	r2,-20(fp)
   13ef4:	10c00815 	stw	r3,32(r2)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
   13ef8:	e0bffb17 	ldw	r2,-20(fp)
   13efc:	10800017 	ldw	r2,0(r2)
   13f00:	10800104 	addi	r2,r2,4
   13f04:	1007883a 	mov	r3,r2
   13f08:	e0bffb17 	ldw	r2,-20(fp)
   13f0c:	10800817 	ldw	r2,32(r2)
   13f10:	18800035 	stwio	r2,0(r3)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
   13f14:	e0bffc17 	ldw	r2,-16(fp)
   13f18:	10800104 	addi	r2,r2,4
   13f1c:	10800037 	ldwio	r2,0(r2)
      }
    }
  }
   13f20:	003f8c06 	br	13d54 <__alt_data_end+0xffff3d54>
  {
    unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);

    /* Return once nothing more to do */
    if ((control & (ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK | ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)) == 0)
      break;
   13f24:	0001883a 	nop
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
      }
    }
  }
}
   13f28:	0001883a 	nop
   13f2c:	e037883a 	mov	sp,fp
   13f30:	df000017 	ldw	fp,0(sp)
   13f34:	dec00104 	addi	sp,sp,4
   13f38:	f800283a 	ret

00013f3c <altera_avalon_jtag_uart_timeout>:
 * Timeout routine is called every second
 */

static alt_u32 
altera_avalon_jtag_uart_timeout(void* context) 
{
   13f3c:	defff804 	addi	sp,sp,-32
   13f40:	df000715 	stw	fp,28(sp)
   13f44:	df000704 	addi	fp,sp,28
   13f48:	e13ffb15 	stw	r4,-20(fp)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state *) context;
   13f4c:	e0bffb17 	ldw	r2,-20(fp)
   13f50:	e0bff915 	stw	r2,-28(fp)

  unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base);
   13f54:	e0bff917 	ldw	r2,-28(fp)
   13f58:	10800017 	ldw	r2,0(r2)
   13f5c:	10800104 	addi	r2,r2,4
   13f60:	10800037 	ldwio	r2,0(r2)
   13f64:	e0bffa15 	stw	r2,-24(fp)

  if (control & ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK)
   13f68:	e0bffa17 	ldw	r2,-24(fp)
   13f6c:	1081000c 	andi	r2,r2,1024
   13f70:	10000b26 	beq	r2,zero,13fa0 <altera_avalon_jtag_uart_timeout+0x64>
  {
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable | ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK);
   13f74:	e0bff917 	ldw	r2,-28(fp)
   13f78:	10800017 	ldw	r2,0(r2)
   13f7c:	10800104 	addi	r2,r2,4
   13f80:	1007883a 	mov	r3,r2
   13f84:	e0bff917 	ldw	r2,-28(fp)
   13f88:	10800817 	ldw	r2,32(r2)
   13f8c:	10810014 	ori	r2,r2,1024
   13f90:	18800035 	stwio	r2,0(r3)
    sp->host_inactive = 0;
   13f94:	e0bff917 	ldw	r2,-28(fp)
   13f98:	10000915 	stw	zero,36(r2)
   13f9c:	00000a06 	br	13fc8 <altera_avalon_jtag_uart_timeout+0x8c>
  }
  else if (sp->host_inactive < INT_MAX - 2) {
   13fa0:	e0bff917 	ldw	r2,-28(fp)
   13fa4:	10c00917 	ldw	r3,36(r2)
   13fa8:	00a00034 	movhi	r2,32768
   13fac:	10bfff04 	addi	r2,r2,-4
   13fb0:	10c00536 	bltu	r2,r3,13fc8 <altera_avalon_jtag_uart_timeout+0x8c>
    sp->host_inactive++;
   13fb4:	e0bff917 	ldw	r2,-28(fp)
   13fb8:	10800917 	ldw	r2,36(r2)
   13fbc:	10c00044 	addi	r3,r2,1
   13fc0:	e0bff917 	ldw	r2,-28(fp)
   13fc4:	10c00915 	stw	r3,36(r2)
   13fc8:	d0a6b117 	ldw	r2,-25916(gp)
      ALT_FLAG_POST (sp->events, ALT_JTAG_UART_TIMEOUT, OS_FLAG_SET);
    }
  }

  return alt_ticks_per_second();
}
   13fcc:	e037883a 	mov	sp,fp
   13fd0:	df000017 	ldw	fp,0(sp)
   13fd4:	dec00104 	addi	sp,sp,4
   13fd8:	f800283a 	ret

00013fdc <altera_avalon_jtag_uart_close>:
 * The close routine is not implemented for the small driver; instead it will
 * map to null. This is because the small driver simply waits while characters
 * are transmitted; there is no interrupt-serviced buffer to empty 
 */
int altera_avalon_jtag_uart_close(altera_avalon_jtag_uart_state* sp, int flags)
{
   13fdc:	defffd04 	addi	sp,sp,-12
   13fe0:	df000215 	stw	fp,8(sp)
   13fe4:	df000204 	addi	fp,sp,8
   13fe8:	e13ffe15 	stw	r4,-8(fp)
   13fec:	e17fff15 	stw	r5,-4(fp)
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
   13ff0:	00000506 	br	14008 <altera_avalon_jtag_uart_close+0x2c>
    if (flags & O_NONBLOCK) {
   13ff4:	e0bfff17 	ldw	r2,-4(fp)
   13ff8:	1090000c 	andi	r2,r2,16384
   13ffc:	10000226 	beq	r2,zero,14008 <altera_avalon_jtag_uart_close+0x2c>
      return -EWOULDBLOCK; 
   14000:	00bffd44 	movi	r2,-11
   14004:	00000b06 	br	14034 <altera_avalon_jtag_uart_close+0x58>
{
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
   14008:	e0bffe17 	ldw	r2,-8(fp)
   1400c:	10c00d17 	ldw	r3,52(r2)
   14010:	e0bffe17 	ldw	r2,-8(fp)
   14014:	10800c17 	ldw	r2,48(r2)
   14018:	18800526 	beq	r3,r2,14030 <altera_avalon_jtag_uart_close+0x54>
   1401c:	e0bffe17 	ldw	r2,-8(fp)
   14020:	10c00917 	ldw	r3,36(r2)
   14024:	e0bffe17 	ldw	r2,-8(fp)
   14028:	10800117 	ldw	r2,4(r2)
   1402c:	18bff136 	bltu	r3,r2,13ff4 <__alt_data_end+0xffff3ff4>
    if (flags & O_NONBLOCK) {
      return -EWOULDBLOCK; 
    }
  }

  return 0;
   14030:	0005883a 	mov	r2,zero
}
   14034:	e037883a 	mov	sp,fp
   14038:	df000017 	ldw	fp,0(sp)
   1403c:	dec00104 	addi	sp,sp,4
   14040:	f800283a 	ret

00014044 <altera_avalon_jtag_uart_ioctl>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_ioctl(altera_avalon_jtag_uart_state* sp, int req,
  void* arg)
{
   14044:	defffa04 	addi	sp,sp,-24
   14048:	df000515 	stw	fp,20(sp)
   1404c:	df000504 	addi	fp,sp,20
   14050:	e13ffd15 	stw	r4,-12(fp)
   14054:	e17ffe15 	stw	r5,-8(fp)
   14058:	e1bfff15 	stw	r6,-4(fp)
  int rc = -ENOTTY;
   1405c:	00bff9c4 	movi	r2,-25
   14060:	e0bffb15 	stw	r2,-20(fp)

  switch (req)
   14064:	e0bffe17 	ldw	r2,-8(fp)
   14068:	10da8060 	cmpeqi	r3,r2,27137
   1406c:	1800031e 	bne	r3,zero,1407c <altera_avalon_jtag_uart_ioctl+0x38>
   14070:	109a80a0 	cmpeqi	r2,r2,27138
   14074:	1000181e 	bne	r2,zero,140d8 <altera_avalon_jtag_uart_ioctl+0x94>
      rc = 0;
    }
    break;

  default:
    break;
   14078:	00002906 	br	14120 <altera_avalon_jtag_uart_ioctl+0xdc>

  switch (req)
  {
  case TIOCSTIMEOUT:
    /* Set the time to wait until assuming host is not connected */
    if (sp->timeout != INT_MAX)
   1407c:	e0bffd17 	ldw	r2,-12(fp)
   14080:	10c00117 	ldw	r3,4(r2)
   14084:	00a00034 	movhi	r2,32768
   14088:	10bfffc4 	addi	r2,r2,-1
   1408c:	18802126 	beq	r3,r2,14114 <altera_avalon_jtag_uart_ioctl+0xd0>
    {
      int timeout = *((int *)arg);
   14090:	e0bfff17 	ldw	r2,-4(fp)
   14094:	10800017 	ldw	r2,0(r2)
   14098:	e0bffc15 	stw	r2,-16(fp)
      sp->timeout = (timeout >= 2 && timeout < INT_MAX) ? timeout : INT_MAX - 1;
   1409c:	e0bffc17 	ldw	r2,-16(fp)
   140a0:	10800090 	cmplti	r2,r2,2
   140a4:	1000061e 	bne	r2,zero,140c0 <altera_avalon_jtag_uart_ioctl+0x7c>
   140a8:	e0fffc17 	ldw	r3,-16(fp)
   140ac:	00a00034 	movhi	r2,32768
   140b0:	10bfffc4 	addi	r2,r2,-1
   140b4:	18800226 	beq	r3,r2,140c0 <altera_avalon_jtag_uart_ioctl+0x7c>
   140b8:	e0bffc17 	ldw	r2,-16(fp)
   140bc:	00000206 	br	140c8 <altera_avalon_jtag_uart_ioctl+0x84>
   140c0:	00a00034 	movhi	r2,32768
   140c4:	10bfff84 	addi	r2,r2,-2
   140c8:	e0fffd17 	ldw	r3,-12(fp)
   140cc:	18800115 	stw	r2,4(r3)
      rc = 0;
   140d0:	e03ffb15 	stw	zero,-20(fp)
    }
    break;
   140d4:	00000f06 	br	14114 <altera_avalon_jtag_uart_ioctl+0xd0>

  case TIOCGCONNECTED:
    /* Find out whether host is connected */
    if (sp->timeout != INT_MAX)
   140d8:	e0bffd17 	ldw	r2,-12(fp)
   140dc:	10c00117 	ldw	r3,4(r2)
   140e0:	00a00034 	movhi	r2,32768
   140e4:	10bfffc4 	addi	r2,r2,-1
   140e8:	18800c26 	beq	r3,r2,1411c <altera_avalon_jtag_uart_ioctl+0xd8>
    {
      *((int *)arg) = (sp->host_inactive < sp->timeout) ? 1 : 0;
   140ec:	e0bffd17 	ldw	r2,-12(fp)
   140f0:	10c00917 	ldw	r3,36(r2)
   140f4:	e0bffd17 	ldw	r2,-12(fp)
   140f8:	10800117 	ldw	r2,4(r2)
   140fc:	1885803a 	cmpltu	r2,r3,r2
   14100:	10c03fcc 	andi	r3,r2,255
   14104:	e0bfff17 	ldw	r2,-4(fp)
   14108:	10c00015 	stw	r3,0(r2)
      rc = 0;
   1410c:	e03ffb15 	stw	zero,-20(fp)
    }
    break;
   14110:	00000206 	br	1411c <altera_avalon_jtag_uart_ioctl+0xd8>
    {
      int timeout = *((int *)arg);
      sp->timeout = (timeout >= 2 && timeout < INT_MAX) ? timeout : INT_MAX - 1;
      rc = 0;
    }
    break;
   14114:	0001883a 	nop
   14118:	00000106 	br	14120 <altera_avalon_jtag_uart_ioctl+0xdc>
    if (sp->timeout != INT_MAX)
    {
      *((int *)arg) = (sp->host_inactive < sp->timeout) ? 1 : 0;
      rc = 0;
    }
    break;
   1411c:	0001883a 	nop

  default:
    break;
  }

  return rc;
   14120:	e0bffb17 	ldw	r2,-20(fp)
}
   14124:	e037883a 	mov	sp,fp
   14128:	df000017 	ldw	fp,0(sp)
   1412c:	dec00104 	addi	sp,sp,4
   14130:	f800283a 	ret

00014134 <altera_avalon_jtag_uart_read>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_read(altera_avalon_jtag_uart_state* sp, 
  char * buffer, int space, int flags)
{
   14134:	defff304 	addi	sp,sp,-52
   14138:	dfc00c15 	stw	ra,48(sp)
   1413c:	df000b15 	stw	fp,44(sp)
   14140:	df000b04 	addi	fp,sp,44
   14144:	e13ffc15 	stw	r4,-16(fp)
   14148:	e17ffd15 	stw	r5,-12(fp)
   1414c:	e1bffe15 	stw	r6,-8(fp)
   14150:	e1ffff15 	stw	r7,-4(fp)
  char * ptr = buffer;
   14154:	e0bffd17 	ldw	r2,-12(fp)
   14158:	e0bff515 	stw	r2,-44(fp)
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);

  while (space > 0)
   1415c:	00004706 	br	1427c <altera_avalon_jtag_uart_read+0x148>
    unsigned int in, out;

    /* Read as much data as possible */
    do
    {
      in  = sp->rx_in;
   14160:	e0bffc17 	ldw	r2,-16(fp)
   14164:	10800a17 	ldw	r2,40(r2)
   14168:	e0bff715 	stw	r2,-36(fp)
      out = sp->rx_out;
   1416c:	e0bffc17 	ldw	r2,-16(fp)
   14170:	10800b17 	ldw	r2,44(r2)
   14174:	e0bff815 	stw	r2,-32(fp)

      if (in >= out)
   14178:	e0fff717 	ldw	r3,-36(fp)
   1417c:	e0bff817 	ldw	r2,-32(fp)
   14180:	18800536 	bltu	r3,r2,14198 <altera_avalon_jtag_uart_read+0x64>
        n = in - out;
   14184:	e0fff717 	ldw	r3,-36(fp)
   14188:	e0bff817 	ldw	r2,-32(fp)
   1418c:	1885c83a 	sub	r2,r3,r2
   14190:	e0bff615 	stw	r2,-40(fp)
   14194:	00000406 	br	141a8 <altera_avalon_jtag_uart_read+0x74>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - out;
   14198:	00c20004 	movi	r3,2048
   1419c:	e0bff817 	ldw	r2,-32(fp)
   141a0:	1885c83a 	sub	r2,r3,r2
   141a4:	e0bff615 	stw	r2,-40(fp)

      if (n == 0)
   141a8:	e0bff617 	ldw	r2,-40(fp)
   141ac:	10001e26 	beq	r2,zero,14228 <altera_avalon_jtag_uart_read+0xf4>
        break; /* No more data available */

      if (n > space)
   141b0:	e0fffe17 	ldw	r3,-8(fp)
   141b4:	e0bff617 	ldw	r2,-40(fp)
   141b8:	1880022e 	bgeu	r3,r2,141c4 <altera_avalon_jtag_uart_read+0x90>
        n = space;
   141bc:	e0bffe17 	ldw	r2,-8(fp)
   141c0:	e0bff615 	stw	r2,-40(fp)

      memcpy(ptr, sp->rx_buf + out, n);
   141c4:	e0bffc17 	ldw	r2,-16(fp)
   141c8:	10c00e04 	addi	r3,r2,56
   141cc:	e0bff817 	ldw	r2,-32(fp)
   141d0:	1885883a 	add	r2,r3,r2
   141d4:	e1bff617 	ldw	r6,-40(fp)
   141d8:	100b883a 	mov	r5,r2
   141dc:	e13ff517 	ldw	r4,-44(fp)
   141e0:	00117400 	call	11740 <memcpy>
      ptr   += n;
   141e4:	e0fff517 	ldw	r3,-44(fp)
   141e8:	e0bff617 	ldw	r2,-40(fp)
   141ec:	1885883a 	add	r2,r3,r2
   141f0:	e0bff515 	stw	r2,-44(fp)
      space -= n;
   141f4:	e0fffe17 	ldw	r3,-8(fp)
   141f8:	e0bff617 	ldw	r2,-40(fp)
   141fc:	1885c83a 	sub	r2,r3,r2
   14200:	e0bffe15 	stw	r2,-8(fp)

      sp->rx_out = (out + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
   14204:	e0fff817 	ldw	r3,-32(fp)
   14208:	e0bff617 	ldw	r2,-40(fp)
   1420c:	1885883a 	add	r2,r3,r2
   14210:	10c1ffcc 	andi	r3,r2,2047
   14214:	e0bffc17 	ldw	r2,-16(fp)
   14218:	10c00b15 	stw	r3,44(r2)
    }
    while (space > 0);
   1421c:	e0bffe17 	ldw	r2,-8(fp)
   14220:	00bfcf16 	blt	zero,r2,14160 <__alt_data_end+0xffff4160>
   14224:	00000106 	br	1422c <altera_avalon_jtag_uart_read+0xf8>
        n = in - out;
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - out;

      if (n == 0)
        break; /* No more data available */
   14228:	0001883a 	nop
      sp->rx_out = (out + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
    }
    while (space > 0);

    /* If we read any data then return it */
    if (ptr != buffer)
   1422c:	e0fff517 	ldw	r3,-44(fp)
   14230:	e0bffd17 	ldw	r2,-12(fp)
   14234:	1880141e 	bne	r3,r2,14288 <altera_avalon_jtag_uart_read+0x154>
      break;

    /* If in non-blocking mode then return error */
    if (flags & O_NONBLOCK)
   14238:	e0bfff17 	ldw	r2,-4(fp)
   1423c:	1090000c 	andi	r2,r2,16384
   14240:	1000131e 	bne	r2,zero,14290 <altera_avalon_jtag_uart_read+0x15c>
      while (in == sp->rx_in && sp->host_inactive < sp->timeout)
        ;
    }
#else
    /* No OS: Always spin */
    while (in == sp->rx_in && sp->host_inactive < sp->timeout)
   14244:	0001883a 	nop
   14248:	e0bffc17 	ldw	r2,-16(fp)
   1424c:	10c00a17 	ldw	r3,40(r2)
   14250:	e0bff717 	ldw	r2,-36(fp)
   14254:	1880051e 	bne	r3,r2,1426c <altera_avalon_jtag_uart_read+0x138>
   14258:	e0bffc17 	ldw	r2,-16(fp)
   1425c:	10c00917 	ldw	r3,36(r2)
   14260:	e0bffc17 	ldw	r2,-16(fp)
   14264:	10800117 	ldw	r2,4(r2)
   14268:	18bff736 	bltu	r3,r2,14248 <__alt_data_end+0xffff4248>
      ;
#endif /* __ucosii__ */

    if (in == sp->rx_in)
   1426c:	e0bffc17 	ldw	r2,-16(fp)
   14270:	10c00a17 	ldw	r3,40(r2)
   14274:	e0bff717 	ldw	r2,-36(fp)
   14278:	18800726 	beq	r3,r2,14298 <altera_avalon_jtag_uart_read+0x164>
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);

  while (space > 0)
   1427c:	e0bffe17 	ldw	r2,-8(fp)
   14280:	00bfb716 	blt	zero,r2,14160 <__alt_data_end+0xffff4160>
   14284:	00000506 	br	1429c <altera_avalon_jtag_uart_read+0x168>
    }
    while (space > 0);

    /* If we read any data then return it */
    if (ptr != buffer)
      break;
   14288:	0001883a 	nop
   1428c:	00000306 	br	1429c <altera_avalon_jtag_uart_read+0x168>

    /* If in non-blocking mode then return error */
    if (flags & O_NONBLOCK)
      break;
   14290:	0001883a 	nop
   14294:	00000106 	br	1429c <altera_avalon_jtag_uart_read+0x168>
    while (in == sp->rx_in && sp->host_inactive < sp->timeout)
      ;
#endif /* __ucosii__ */

    if (in == sp->rx_in)
      break;
   14298:	0001883a 	nop
   * semaphore so that other threads can access the buffer.
   */

  ALT_SEM_POST (sp->read_lock);

  if (ptr != buffer)
   1429c:	e0fff517 	ldw	r3,-44(fp)
   142a0:	e0bffd17 	ldw	r2,-12(fp)
   142a4:	18801826 	beq	r3,r2,14308 <altera_avalon_jtag_uart_read+0x1d4>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   142a8:	0005303a 	rdctl	r2,status
   142ac:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   142b0:	e0fffb17 	ldw	r3,-20(fp)
   142b4:	00bfff84 	movi	r2,-2
   142b8:	1884703a 	and	r2,r3,r2
   142bc:	1001703a 	wrctl	status,r2
  
  return context;
   142c0:	e0bffb17 	ldw	r2,-20(fp)
  {
    /* If we read any data then there is space in the buffer so enable interrupts */
    context = alt_irq_disable_all();
   142c4:	e0bffa15 	stw	r2,-24(fp)
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
   142c8:	e0bffc17 	ldw	r2,-16(fp)
   142cc:	10800817 	ldw	r2,32(r2)
   142d0:	10c00054 	ori	r3,r2,1
   142d4:	e0bffc17 	ldw	r2,-16(fp)
   142d8:	10c00815 	stw	r3,32(r2)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
   142dc:	e0bffc17 	ldw	r2,-16(fp)
   142e0:	10800017 	ldw	r2,0(r2)
   142e4:	10800104 	addi	r2,r2,4
   142e8:	1007883a 	mov	r3,r2
   142ec:	e0bffc17 	ldw	r2,-16(fp)
   142f0:	10800817 	ldw	r2,32(r2)
   142f4:	18800035 	stwio	r2,0(r3)
   142f8:	e0bffa17 	ldw	r2,-24(fp)
   142fc:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   14300:	e0bff917 	ldw	r2,-28(fp)
   14304:	1001703a 	wrctl	status,r2
    alt_irq_enable_all(context);
  }

  if (ptr != buffer)
   14308:	e0fff517 	ldw	r3,-44(fp)
   1430c:	e0bffd17 	ldw	r2,-12(fp)
   14310:	18800426 	beq	r3,r2,14324 <altera_avalon_jtag_uart_read+0x1f0>
    return ptr - buffer;
   14314:	e0fff517 	ldw	r3,-44(fp)
   14318:	e0bffd17 	ldw	r2,-12(fp)
   1431c:	1885c83a 	sub	r2,r3,r2
   14320:	00000606 	br	1433c <altera_avalon_jtag_uart_read+0x208>
  else if (flags & O_NONBLOCK)
   14324:	e0bfff17 	ldw	r2,-4(fp)
   14328:	1090000c 	andi	r2,r2,16384
   1432c:	10000226 	beq	r2,zero,14338 <altera_avalon_jtag_uart_read+0x204>
    return -EWOULDBLOCK;
   14330:	00bffd44 	movi	r2,-11
   14334:	00000106 	br	1433c <altera_avalon_jtag_uart_read+0x208>
  else
    return -EIO;
   14338:	00bffec4 	movi	r2,-5
}
   1433c:	e037883a 	mov	sp,fp
   14340:	dfc00117 	ldw	ra,4(sp)
   14344:	df000017 	ldw	fp,0(sp)
   14348:	dec00204 	addi	sp,sp,8
   1434c:	f800283a 	ret

00014350 <altera_avalon_jtag_uart_write>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_write(altera_avalon_jtag_uart_state* sp, 
  const char * ptr, int count, int flags)
{
   14350:	defff304 	addi	sp,sp,-52
   14354:	dfc00c15 	stw	ra,48(sp)
   14358:	df000b15 	stw	fp,44(sp)
   1435c:	df000b04 	addi	fp,sp,44
   14360:	e13ffc15 	stw	r4,-16(fp)
   14364:	e17ffd15 	stw	r5,-12(fp)
   14368:	e1bffe15 	stw	r6,-8(fp)
   1436c:	e1ffff15 	stw	r7,-4(fp)
  /* Remove warning at optimisation level 03 by seting out to 0 */
  unsigned int in, out=0;
   14370:	e03ff515 	stw	zero,-44(fp)
  unsigned int n;
  alt_irq_context context;

  const char * start = ptr;
   14374:	e0bffd17 	ldw	r2,-12(fp)
   14378:	e0bff715 	stw	r2,-36(fp)
  ALT_SEM_PEND (sp->write_lock, 0);

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
   1437c:	00003706 	br	1445c <altera_avalon_jtag_uart_write+0x10c>
    {
      /* We need a stable value of the out pointer to calculate the space available */
      in  = sp->tx_in;
   14380:	e0bffc17 	ldw	r2,-16(fp)
   14384:	10800c17 	ldw	r2,48(r2)
   14388:	e0bff915 	stw	r2,-28(fp)
      out = sp->tx_out;
   1438c:	e0bffc17 	ldw	r2,-16(fp)
   14390:	10800d17 	ldw	r2,52(r2)
   14394:	e0bff515 	stw	r2,-44(fp)

      if (in < out)
   14398:	e0fff917 	ldw	r3,-28(fp)
   1439c:	e0bff517 	ldw	r2,-44(fp)
   143a0:	1880062e 	bgeu	r3,r2,143bc <altera_avalon_jtag_uart_write+0x6c>
        n = out - 1 - in;
   143a4:	e0fff517 	ldw	r3,-44(fp)
   143a8:	e0bff917 	ldw	r2,-28(fp)
   143ac:	1885c83a 	sub	r2,r3,r2
   143b0:	10bfffc4 	addi	r2,r2,-1
   143b4:	e0bff615 	stw	r2,-40(fp)
   143b8:	00000b06 	br	143e8 <altera_avalon_jtag_uart_write+0x98>
      else if (out > 0)
   143bc:	e0bff517 	ldw	r2,-44(fp)
   143c0:	10000526 	beq	r2,zero,143d8 <altera_avalon_jtag_uart_write+0x88>
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - in;
   143c4:	00c20004 	movi	r3,2048
   143c8:	e0bff917 	ldw	r2,-28(fp)
   143cc:	1885c83a 	sub	r2,r3,r2
   143d0:	e0bff615 	stw	r2,-40(fp)
   143d4:	00000406 	br	143e8 <altera_avalon_jtag_uart_write+0x98>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - 1 - in;
   143d8:	00c1ffc4 	movi	r3,2047
   143dc:	e0bff917 	ldw	r2,-28(fp)
   143e0:	1885c83a 	sub	r2,r3,r2
   143e4:	e0bff615 	stw	r2,-40(fp)

      if (n == 0)
   143e8:	e0bff617 	ldw	r2,-40(fp)
   143ec:	10001e26 	beq	r2,zero,14468 <altera_avalon_jtag_uart_write+0x118>
        break;

      if (n > count)
   143f0:	e0fffe17 	ldw	r3,-8(fp)
   143f4:	e0bff617 	ldw	r2,-40(fp)
   143f8:	1880022e 	bgeu	r3,r2,14404 <altera_avalon_jtag_uart_write+0xb4>
        n = count;
   143fc:	e0bffe17 	ldw	r2,-8(fp)
   14400:	e0bff615 	stw	r2,-40(fp)

      memcpy(sp->tx_buf + in, ptr, n);
   14404:	e0bffc17 	ldw	r2,-16(fp)
   14408:	10c20e04 	addi	r3,r2,2104
   1440c:	e0bff917 	ldw	r2,-28(fp)
   14410:	1885883a 	add	r2,r3,r2
   14414:	e1bff617 	ldw	r6,-40(fp)
   14418:	e17ffd17 	ldw	r5,-12(fp)
   1441c:	1009883a 	mov	r4,r2
   14420:	00117400 	call	11740 <memcpy>
      ptr   += n;
   14424:	e0fffd17 	ldw	r3,-12(fp)
   14428:	e0bff617 	ldw	r2,-40(fp)
   1442c:	1885883a 	add	r2,r3,r2
   14430:	e0bffd15 	stw	r2,-12(fp)
      count -= n;
   14434:	e0fffe17 	ldw	r3,-8(fp)
   14438:	e0bff617 	ldw	r2,-40(fp)
   1443c:	1885c83a 	sub	r2,r3,r2
   14440:	e0bffe15 	stw	r2,-8(fp)

      sp->tx_in = (in + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
   14444:	e0fff917 	ldw	r3,-28(fp)
   14448:	e0bff617 	ldw	r2,-40(fp)
   1444c:	1885883a 	add	r2,r3,r2
   14450:	10c1ffcc 	andi	r3,r2,2047
   14454:	e0bffc17 	ldw	r2,-16(fp)
   14458:	10c00c15 	stw	r3,48(r2)
  ALT_SEM_PEND (sp->write_lock, 0);

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
   1445c:	e0bffe17 	ldw	r2,-8(fp)
   14460:	00bfc716 	blt	zero,r2,14380 <__alt_data_end+0xffff4380>
   14464:	00000106 	br	1446c <altera_avalon_jtag_uart_write+0x11c>
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - in;
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - 1 - in;

      if (n == 0)
        break;
   14468:	0001883a 	nop
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   1446c:	0005303a 	rdctl	r2,status
   14470:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   14474:	e0fffb17 	ldw	r3,-20(fp)
   14478:	00bfff84 	movi	r2,-2
   1447c:	1884703a 	and	r2,r3,r2
   14480:	1001703a 	wrctl	status,r2
  
  return context;
   14484:	e0bffb17 	ldw	r2,-20(fp)
     * to enable interrupts if there is no space left in the FIFO
     *
     * For now kick the interrupt routine every time to make it transmit 
     * the data 
     */
    context = alt_irq_disable_all();
   14488:	e0bffa15 	stw	r2,-24(fp)
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
   1448c:	e0bffc17 	ldw	r2,-16(fp)
   14490:	10800817 	ldw	r2,32(r2)
   14494:	10c00094 	ori	r3,r2,2
   14498:	e0bffc17 	ldw	r2,-16(fp)
   1449c:	10c00815 	stw	r3,32(r2)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
   144a0:	e0bffc17 	ldw	r2,-16(fp)
   144a4:	10800017 	ldw	r2,0(r2)
   144a8:	10800104 	addi	r2,r2,4
   144ac:	1007883a 	mov	r3,r2
   144b0:	e0bffc17 	ldw	r2,-16(fp)
   144b4:	10800817 	ldw	r2,32(r2)
   144b8:	18800035 	stwio	r2,0(r3)
   144bc:	e0bffa17 	ldw	r2,-24(fp)
   144c0:	e0bff815 	stw	r2,-32(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   144c4:	e0bff817 	ldw	r2,-32(fp)
   144c8:	1001703a 	wrctl	status,r2
    /* 
     * If there is any data left then either return now or block until 
     * some has been sent 
     */
    /* consider: test whether there is anything there while doing this and delay for at most 2s. */
    if (count > 0)
   144cc:	e0bffe17 	ldw	r2,-8(fp)
   144d0:	0080100e 	bge	zero,r2,14514 <altera_avalon_jtag_uart_write+0x1c4>
    {
      if (flags & O_NONBLOCK)
   144d4:	e0bfff17 	ldw	r2,-4(fp)
   144d8:	1090000c 	andi	r2,r2,16384
   144dc:	1000101e 	bne	r2,zero,14520 <altera_avalon_jtag_uart_write+0x1d0>
      /*
       * No OS present: Always wait for data to be removed from buffer.  Once
       * the interrupt routine has removed some data then we will be able to
       * insert some more.
       */
      while (out == sp->tx_out && sp->host_inactive < sp->timeout)
   144e0:	0001883a 	nop
   144e4:	e0bffc17 	ldw	r2,-16(fp)
   144e8:	10c00d17 	ldw	r3,52(r2)
   144ec:	e0bff517 	ldw	r2,-44(fp)
   144f0:	1880051e 	bne	r3,r2,14508 <altera_avalon_jtag_uart_write+0x1b8>
   144f4:	e0bffc17 	ldw	r2,-16(fp)
   144f8:	10c00917 	ldw	r3,36(r2)
   144fc:	e0bffc17 	ldw	r2,-16(fp)
   14500:	10800117 	ldw	r2,4(r2)
   14504:	18bff736 	bltu	r3,r2,144e4 <__alt_data_end+0xffff44e4>
        ;
#endif /* __ucosii__ */

      if  (sp->host_inactive)
   14508:	e0bffc17 	ldw	r2,-16(fp)
   1450c:	10800917 	ldw	r2,36(r2)
   14510:	1000051e 	bne	r2,zero,14528 <altera_avalon_jtag_uart_write+0x1d8>
         break;
    }
  }
  while (count > 0);
   14514:	e0bffe17 	ldw	r2,-8(fp)
   14518:	00bfd016 	blt	zero,r2,1445c <__alt_data_end+0xffff445c>
   1451c:	00000306 	br	1452c <altera_avalon_jtag_uart_write+0x1dc>
     */
    /* consider: test whether there is anything there while doing this and delay for at most 2s. */
    if (count > 0)
    {
      if (flags & O_NONBLOCK)
        break;
   14520:	0001883a 	nop
   14524:	00000106 	br	1452c <altera_avalon_jtag_uart_write+0x1dc>
      while (out == sp->tx_out && sp->host_inactive < sp->timeout)
        ;
#endif /* __ucosii__ */

      if  (sp->host_inactive)
         break;
   14528:	0001883a 	nop
   * Now that access to the circular buffer is complete, release the write
   * semaphore so that other threads can access the buffer.
   */
  ALT_SEM_POST (sp->write_lock);

  if (ptr != start)
   1452c:	e0fffd17 	ldw	r3,-12(fp)
   14530:	e0bff717 	ldw	r2,-36(fp)
   14534:	18800426 	beq	r3,r2,14548 <altera_avalon_jtag_uart_write+0x1f8>
    return ptr - start;
   14538:	e0fffd17 	ldw	r3,-12(fp)
   1453c:	e0bff717 	ldw	r2,-36(fp)
   14540:	1885c83a 	sub	r2,r3,r2
   14544:	00000606 	br	14560 <altera_avalon_jtag_uart_write+0x210>
  else if (flags & O_NONBLOCK)
   14548:	e0bfff17 	ldw	r2,-4(fp)
   1454c:	1090000c 	andi	r2,r2,16384
   14550:	10000226 	beq	r2,zero,1455c <altera_avalon_jtag_uart_write+0x20c>
    return -EWOULDBLOCK;
   14554:	00bffd44 	movi	r2,-11
   14558:	00000106 	br	14560 <altera_avalon_jtag_uart_write+0x210>
    sp->tx_out = sp->tx_in = 0;
    return ptr - start + count;
  }
#endif
  else
    return -EIO; /* Host not connected */
   1455c:	00bffec4 	movi	r2,-5
}
   14560:	e037883a 	mov	sp,fp
   14564:	dfc00117 	ldw	ra,4(sp)
   14568:	df000017 	ldw	fp,0(sp)
   1456c:	dec00204 	addi	sp,sp,8
   14570:	f800283a 	ret

00014574 <alt_avalon_timer_sc_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void alt_avalon_timer_sc_irq (void* base)
#else
static void alt_avalon_timer_sc_irq (void* base, alt_u32 id)
#endif
{
   14574:	defffa04 	addi	sp,sp,-24
   14578:	dfc00515 	stw	ra,20(sp)
   1457c:	df000415 	stw	fp,16(sp)
   14580:	df000404 	addi	fp,sp,16
   14584:	e13fff15 	stw	r4,-4(fp)
  alt_irq_context cpu_sr;
  
  /* clear the interrupt */
  IOWR_ALTERA_AVALON_TIMER_STATUS (base, 0);
   14588:	0007883a 	mov	r3,zero
   1458c:	e0bfff17 	ldw	r2,-4(fp)
   14590:	10c00035 	stwio	r3,0(r2)
  /* 
   * Dummy read to ensure IRQ is negated before the ISR returns.
   * The control register is read because reading the status
   * register has side-effects per the register map documentation.
   */
  IORD_ALTERA_AVALON_TIMER_CONTROL (base);
   14594:	e0bfff17 	ldw	r2,-4(fp)
   14598:	10800104 	addi	r2,r2,4
   1459c:	10800037 	ldwio	r2,0(r2)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   145a0:	0005303a 	rdctl	r2,status
   145a4:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   145a8:	e0fffd17 	ldw	r3,-12(fp)
   145ac:	00bfff84 	movi	r2,-2
   145b0:	1884703a 	and	r2,r3,r2
   145b4:	1001703a 	wrctl	status,r2
  
  return context;
   145b8:	e0bffd17 	ldw	r2,-12(fp)

  /* 
   * Notify the system of a clock tick. disable interrupts 
   * during this time to safely support ISR preemption
   */
  cpu_sr = alt_irq_disable_all();
   145bc:	e0bffc15 	stw	r2,-16(fp)
  alt_tick ();
   145c0:	00151d80 	call	151d8 <alt_tick>
   145c4:	e0bffc17 	ldw	r2,-16(fp)
   145c8:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   145cc:	e0bffe17 	ldw	r2,-8(fp)
   145d0:	1001703a 	wrctl	status,r2
  alt_irq_enable_all(cpu_sr);
}
   145d4:	0001883a 	nop
   145d8:	e037883a 	mov	sp,fp
   145dc:	dfc00117 	ldw	ra,4(sp)
   145e0:	df000017 	ldw	fp,0(sp)
   145e4:	dec00204 	addi	sp,sp,8
   145e8:	f800283a 	ret

000145ec <alt_avalon_timer_sc_init>:
 * auto-generated alt_sys_init() function.
 */

void alt_avalon_timer_sc_init (void* base, alt_u32 irq_controller_id, 
                                alt_u32 irq, alt_u32 freq)
{
   145ec:	defff804 	addi	sp,sp,-32
   145f0:	dfc00715 	stw	ra,28(sp)
   145f4:	df000615 	stw	fp,24(sp)
   145f8:	df000604 	addi	fp,sp,24
   145fc:	e13ffc15 	stw	r4,-16(fp)
   14600:	e17ffd15 	stw	r5,-12(fp)
   14604:	e1bffe15 	stw	r6,-8(fp)
   14608:	e1ffff15 	stw	r7,-4(fp)
   1460c:	e0bfff17 	ldw	r2,-4(fp)
   14610:	e0bffb15 	stw	r2,-20(fp)
 * in order to initialise the value of the clock frequency.
 */

static ALT_INLINE int ALT_ALWAYS_INLINE alt_sysclk_init (alt_u32 nticks)
{
  if (! _alt_tick_rate)
   14614:	d0a6b117 	ldw	r2,-25916(gp)
   14618:	1000021e 	bne	r2,zero,14624 <alt_avalon_timer_sc_init+0x38>
  {
    _alt_tick_rate = nticks;
   1461c:	e0bffb17 	ldw	r2,-20(fp)
   14620:	d0a6b115 	stw	r2,-25916(gp)
  
  alt_sysclk_init (freq);
  
  /* set to free running mode */
  
  IOWR_ALTERA_AVALON_TIMER_CONTROL (base, 
   14624:	e0bffc17 	ldw	r2,-16(fp)
   14628:	10800104 	addi	r2,r2,4
   1462c:	00c001c4 	movi	r3,7
   14630:	10c00035 	stwio	r3,0(r2)
            ALTERA_AVALON_TIMER_CONTROL_CONT_MSK |
            ALTERA_AVALON_TIMER_CONTROL_START_MSK);

  /* register the interrupt handler, and enable the interrupt */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
  alt_ic_isr_register(irq_controller_id, irq, alt_avalon_timer_sc_irq, 
   14634:	d8000015 	stw	zero,0(sp)
   14638:	e1fffc17 	ldw	r7,-16(fp)
   1463c:	01800074 	movhi	r6,1
   14640:	31915d04 	addi	r6,r6,17780
   14644:	e17ffe17 	ldw	r5,-8(fp)
   14648:	e13ffd17 	ldw	r4,-12(fp)
   1464c:	0014b080 	call	14b08 <alt_ic_isr_register>
                      base, NULL);
#else
  alt_irq_register (irq, base, alt_avalon_timer_sc_irq);
#endif  
}
   14650:	0001883a 	nop
   14654:	e037883a 	mov	sp,fp
   14658:	dfc00117 	ldw	ra,4(sp)
   1465c:	df000017 	ldw	fp,0(sp)
   14660:	dec00204 	addi	sp,sp,8
   14664:	f800283a 	ret

00014668 <alt_alarm_start>:
 */ 

int alt_alarm_start (alt_alarm* alarm, alt_u32 nticks,
                     alt_u32 (*callback) (void* context),
                     void* context)
{
   14668:	defff504 	addi	sp,sp,-44
   1466c:	df000a15 	stw	fp,40(sp)
   14670:	df000a04 	addi	fp,sp,40
   14674:	e13ffc15 	stw	r4,-16(fp)
   14678:	e17ffd15 	stw	r5,-12(fp)
   1467c:	e1bffe15 	stw	r6,-8(fp)
   14680:	e1ffff15 	stw	r7,-4(fp)
  alt_irq_context irq_context;
  alt_u32 current_nticks = 0;
   14684:	e03ff615 	stw	zero,-40(fp)
 * Obtain the system clock rate in ticks/s. 
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_ticks_per_second (void)
{
  return _alt_tick_rate;
   14688:	d0a6b117 	ldw	r2,-25916(gp)
  
  if (alt_ticks_per_second ())
   1468c:	10003c26 	beq	r2,zero,14780 <alt_alarm_start+0x118>
  {
    if (alarm)
   14690:	e0bffc17 	ldw	r2,-16(fp)
   14694:	10003826 	beq	r2,zero,14778 <alt_alarm_start+0x110>
    {
      alarm->callback = callback;
   14698:	e0bffc17 	ldw	r2,-16(fp)
   1469c:	e0fffe17 	ldw	r3,-8(fp)
   146a0:	10c00315 	stw	r3,12(r2)
      alarm->context  = context;
   146a4:	e0bffc17 	ldw	r2,-16(fp)
   146a8:	e0ffff17 	ldw	r3,-4(fp)
   146ac:	10c00515 	stw	r3,20(r2)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   146b0:	0005303a 	rdctl	r2,status
   146b4:	e0bff915 	stw	r2,-28(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   146b8:	e0fff917 	ldw	r3,-28(fp)
   146bc:	00bfff84 	movi	r2,-2
   146c0:	1884703a 	and	r2,r3,r2
   146c4:	1001703a 	wrctl	status,r2
  
  return context;
   146c8:	e0bff917 	ldw	r2,-28(fp)
 
      irq_context = alt_irq_disable_all ();
   146cc:	e0bff815 	stw	r2,-32(fp)
 * alt_nticks() returns the elapsed number of system clock ticks since reset.
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_nticks (void)
{
  return _alt_nticks;
   146d0:	d0a6b217 	ldw	r2,-25912(gp)
      
      current_nticks = alt_nticks();
   146d4:	e0bff615 	stw	r2,-40(fp)
      
      alarm->time = nticks + current_nticks + 1; 
   146d8:	e0fffd17 	ldw	r3,-12(fp)
   146dc:	e0bff617 	ldw	r2,-40(fp)
   146e0:	1885883a 	add	r2,r3,r2
   146e4:	10c00044 	addi	r3,r2,1
   146e8:	e0bffc17 	ldw	r2,-16(fp)
   146ec:	10c00215 	stw	r3,8(r2)
      /* 
       * If the desired alarm time causes a roll-over, set the rollover
       * flag. This will prevent the subsequent tick event from causing
       * an alarm too early.
       */
      if(alarm->time < current_nticks)
   146f0:	e0bffc17 	ldw	r2,-16(fp)
   146f4:	10c00217 	ldw	r3,8(r2)
   146f8:	e0bff617 	ldw	r2,-40(fp)
   146fc:	1880042e 	bgeu	r3,r2,14710 <alt_alarm_start+0xa8>
      {
        alarm->rollover = 1;
   14700:	e0bffc17 	ldw	r2,-16(fp)
   14704:	00c00044 	movi	r3,1
   14708:	10c00405 	stb	r3,16(r2)
   1470c:	00000206 	br	14718 <alt_alarm_start+0xb0>
      }
      else
      {
        alarm->rollover = 0;
   14710:	e0bffc17 	ldw	r2,-16(fp)
   14714:	10000405 	stb	zero,16(r2)
      }
    
      alt_llist_insert (&alt_alarm_list, &alarm->llist);
   14718:	e0bffc17 	ldw	r2,-16(fp)
   1471c:	d0e00c04 	addi	r3,gp,-32720
   14720:	e0fffa15 	stw	r3,-24(fp)
   14724:	e0bffb15 	stw	r2,-20(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
   14728:	e0bffb17 	ldw	r2,-20(fp)
   1472c:	e0fffa17 	ldw	r3,-24(fp)
   14730:	10c00115 	stw	r3,4(r2)
  entry->next     = list->next;
   14734:	e0bffa17 	ldw	r2,-24(fp)
   14738:	10c00017 	ldw	r3,0(r2)
   1473c:	e0bffb17 	ldw	r2,-20(fp)
   14740:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
   14744:	e0bffa17 	ldw	r2,-24(fp)
   14748:	10800017 	ldw	r2,0(r2)
   1474c:	e0fffb17 	ldw	r3,-20(fp)
   14750:	10c00115 	stw	r3,4(r2)
  list->next           = entry;
   14754:	e0bffa17 	ldw	r2,-24(fp)
   14758:	e0fffb17 	ldw	r3,-20(fp)
   1475c:	10c00015 	stw	r3,0(r2)
   14760:	e0bff817 	ldw	r2,-32(fp)
   14764:	e0bff715 	stw	r2,-36(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   14768:	e0bff717 	ldw	r2,-36(fp)
   1476c:	1001703a 	wrctl	status,r2
      alt_irq_enable_all (irq_context);

      return 0;
   14770:	0005883a 	mov	r2,zero
   14774:	00000306 	br	14784 <alt_alarm_start+0x11c>
    }
    else
    {
      return -EINVAL;
   14778:	00bffa84 	movi	r2,-22
   1477c:	00000106 	br	14784 <alt_alarm_start+0x11c>
    }
  }
  else
  {
    return -ENOTSUP;
   14780:	00bfde84 	movi	r2,-134
  }
}
   14784:	e037883a 	mov	sp,fp
   14788:	df000017 	ldw	fp,0(sp)
   1478c:	dec00104 	addi	sp,sp,4
   14790:	f800283a 	ret

00014794 <alt_busy_sleep>:
#include "alt_types.h"

#include "priv/alt_busy_sleep.h"

unsigned int alt_busy_sleep (unsigned int us)
{
   14794:	defffa04 	addi	sp,sp,-24
   14798:	dfc00515 	stw	ra,20(sp)
   1479c:	df000415 	stw	fp,16(sp)
   147a0:	df000404 	addi	fp,sp,16
   147a4:	e13fff15 	stw	r4,-4(fp)
  {
    cycles_per_loop = 9;
  }
  else  
  {
    cycles_per_loop = 3;
   147a8:	008000c4 	movi	r2,3
   147ac:	e0bffd15 	stw	r2,-12(fp)
  }
  

  big_loops = us / (INT_MAX/
  (ALT_CPU_FREQ/(cycles_per_loop * 1000000)));
   147b0:	e0fffd17 	ldw	r3,-12(fp)
   147b4:	008003f4 	movhi	r2,15
   147b8:	10909004 	addi	r2,r2,16960
   147bc:	1885383a 	mul	r2,r3,r2
   147c0:	100b883a 	mov	r5,r2
   147c4:	0100bef4 	movhi	r4,763
   147c8:	213c2004 	addi	r4,r4,-3968
   147cc:	001300c0 	call	1300c <__udivsi3>
  {
    cycles_per_loop = 3;
  }
  

  big_loops = us / (INT_MAX/
   147d0:	100b883a 	mov	r5,r2
   147d4:	01200034 	movhi	r4,32768
   147d8:	213fffc4 	addi	r4,r4,-1
   147dc:	001300c0 	call	1300c <__udivsi3>
   147e0:	100b883a 	mov	r5,r2
   147e4:	e13fff17 	ldw	r4,-4(fp)
   147e8:	001300c0 	call	1300c <__udivsi3>
   147ec:	e0bffe15 	stw	r2,-8(fp)
  (ALT_CPU_FREQ/(cycles_per_loop * 1000000)));

  if (big_loops)
   147f0:	e0bffe17 	ldw	r2,-8(fp)
   147f4:	10002a26 	beq	r2,zero,148a0 <alt_busy_sleep+0x10c>
  {
    for(i=0;i<big_loops;i++)
   147f8:	e03ffc15 	stw	zero,-16(fp)
   147fc:	00001706 	br	1485c <alt_busy_sleep+0xc8>
      /*
      * Do NOT Try to single step the asm statement below 
      * (single step will never return)
      * Step out of this function or set a breakpoint after the asm statements
      */
      __asm__ volatile (
   14800:	00a00034 	movhi	r2,32768
   14804:	10bfffc4 	addi	r2,r2,-1
   14808:	10bfffc4 	addi	r2,r2,-1
   1480c:	103ffe1e 	bne	r2,zero,14808 <__alt_data_end+0xffff4808>
        "\n\t.pushsection .debug_alt_sim_info"
        "\n\t.int 4, 0, 0b, 1b"
        "\n\t.popsection"
        :: "r" (INT_MAX));
      us -= (INT_MAX/(ALT_CPU_FREQ/
      (cycles_per_loop * 1000000)));
   14810:	e0fffd17 	ldw	r3,-12(fp)
   14814:	008003f4 	movhi	r2,15
   14818:	10909004 	addi	r2,r2,16960
   1481c:	1885383a 	mul	r2,r3,r2
        "\n1:"
        "\n\t.pushsection .debug_alt_sim_info"
        "\n\t.int 4, 0, 0b, 1b"
        "\n\t.popsection"
        :: "r" (INT_MAX));
      us -= (INT_MAX/(ALT_CPU_FREQ/
   14820:	100b883a 	mov	r5,r2
   14824:	0100bef4 	movhi	r4,763
   14828:	213c2004 	addi	r4,r4,-3968
   1482c:	001300c0 	call	1300c <__udivsi3>
   14830:	100b883a 	mov	r5,r2
   14834:	01200034 	movhi	r4,32768
   14838:	213fffc4 	addi	r4,r4,-1
   1483c:	001300c0 	call	1300c <__udivsi3>
   14840:	1007883a 	mov	r3,r2
   14844:	e0bfff17 	ldw	r2,-4(fp)
   14848:	10c5c83a 	sub	r2,r2,r3
   1484c:	e0bfff15 	stw	r2,-4(fp)
  big_loops = us / (INT_MAX/
  (ALT_CPU_FREQ/(cycles_per_loop * 1000000)));

  if (big_loops)
  {
    for(i=0;i<big_loops;i++)
   14850:	e0bffc17 	ldw	r2,-16(fp)
   14854:	10800044 	addi	r2,r2,1
   14858:	e0bffc15 	stw	r2,-16(fp)
   1485c:	e0fffc17 	ldw	r3,-16(fp)
   14860:	e0bffe17 	ldw	r2,-8(fp)
   14864:	18bfe616 	blt	r3,r2,14800 <__alt_data_end+0xffff4800>
      "\n\tbne %0,zero,0b"
      "\n1:"
      "\n\t.pushsection .debug_alt_sim_info"
      "\n\t.int 4, 0, 0b, 1b"
      "\n\t.popsection"
      :: "r" (us*(ALT_CPU_FREQ/(cycles_per_loop * 1000000))));
   14868:	e0fffd17 	ldw	r3,-12(fp)
   1486c:	008003f4 	movhi	r2,15
   14870:	10909004 	addi	r2,r2,16960
   14874:	1885383a 	mul	r2,r3,r2
   14878:	100b883a 	mov	r5,r2
   1487c:	0100bef4 	movhi	r4,763
   14880:	213c2004 	addi	r4,r4,-3968
   14884:	001300c0 	call	1300c <__udivsi3>
   14888:	1007883a 	mov	r3,r2
   1488c:	e0bfff17 	ldw	r2,-4(fp)
   14890:	1885383a 	mul	r2,r3,r2
    /*
    * Do NOT Try to single step the asm statement below 
    * (single step will never return)
    * Step out of this function or set a breakpoint after the asm statements
    */
    __asm__ volatile (
   14894:	10bfffc4 	addi	r2,r2,-1
   14898:	103ffe1e 	bne	r2,zero,14894 <__alt_data_end+0xffff4894>
   1489c:	00000d06 	br	148d4 <alt_busy_sleep+0x140>
      "\n\tbgt %0,zero,0b"
      "\n1:"
      "\n\t.pushsection .debug_alt_sim_info"
      "\n\t.int 4, 0, 0b, 1b"
      "\n\t.popsection"
      :: "r" (us*(ALT_CPU_FREQ/(cycles_per_loop * 1000000))));
   148a0:	e0fffd17 	ldw	r3,-12(fp)
   148a4:	008003f4 	movhi	r2,15
   148a8:	10909004 	addi	r2,r2,16960
   148ac:	1885383a 	mul	r2,r3,r2
   148b0:	100b883a 	mov	r5,r2
   148b4:	0100bef4 	movhi	r4,763
   148b8:	213c2004 	addi	r4,r4,-3968
   148bc:	001300c0 	call	1300c <__udivsi3>
   148c0:	1007883a 	mov	r3,r2
   148c4:	e0bfff17 	ldw	r2,-4(fp)
   148c8:	1885383a 	mul	r2,r3,r2
    /*
    * Do NOT Try to single step the asm statement below 
    * (single step will never return)
    * Step out of this function or set a breakpoint after the asm statements
    */
    __asm__ volatile (
   148cc:	10bfffc4 	addi	r2,r2,-1
   148d0:	00bffe16 	blt	zero,r2,148cc <__alt_data_end+0xffff48cc>
      "\n\t.int 4, 0, 0b, 1b"
      "\n\t.popsection"
      :: "r" (us*(ALT_CPU_FREQ/(cycles_per_loop * 1000000))));
  }
#endif /* #ifndef ALT_SIM_OPTIMIZE */
  return 0;
   148d4:	0005883a 	mov	r2,zero
}
   148d8:	e037883a 	mov	sp,fp
   148dc:	dfc00117 	ldw	ra,4(sp)
   148e0:	df000017 	ldw	fp,0(sp)
   148e4:	dec00204 	addi	sp,sp,8
   148e8:	f800283a 	ret

000148ec <alt_dcache_flush_all>:
/*
 * alt_dcache_flush_all() is called to flush the entire data cache.
 */

void alt_dcache_flush_all (void)
{
   148ec:	defffe04 	addi	sp,sp,-8
   148f0:	df000115 	stw	fp,4(sp)
   148f4:	df000104 	addi	fp,sp,4
#if NIOS2_DCACHE_SIZE > 0
  char* i;
  
  for (i = (char*) 0; i < (char*) NIOS2_DCACHE_SIZE; i+= NIOS2_DCACHE_LINE_SIZE)
   148f8:	e03fff15 	stw	zero,-4(fp)
   148fc:	00000506 	br	14914 <alt_dcache_flush_all+0x28>
  { 
    __asm__ volatile ("flushd (%0)" :: "r" (i));
   14900:	e0bfff17 	ldw	r2,-4(fp)
   14904:	1000003b 	flushd	0(r2)
void alt_dcache_flush_all (void)
{
#if NIOS2_DCACHE_SIZE > 0
  char* i;
  
  for (i = (char*) 0; i < (char*) NIOS2_DCACHE_SIZE; i+= NIOS2_DCACHE_LINE_SIZE)
   14908:	e0bfff17 	ldw	r2,-4(fp)
   1490c:	10800804 	addi	r2,r2,32
   14910:	e0bfff15 	stw	r2,-4(fp)
   14914:	e0bfff17 	ldw	r2,-4(fp)
   14918:	10820030 	cmpltui	r2,r2,2048
   1491c:	103ff81e 	bne	r2,zero,14900 <__alt_data_end+0xffff4900>
  { 
    __asm__ volatile ("flushd (%0)" :: "r" (i));
  }
#endif /* NIOS2_DCACHE_SIZE > 0 */
}
   14920:	0001883a 	nop
   14924:	e037883a 	mov	sp,fp
   14928:	df000017 	ldw	fp,0(sp)
   1492c:	dec00104 	addi	sp,sp,4
   14930:	f800283a 	ret

00014934 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   14934:	defffe04 	addi	sp,sp,-8
   14938:	dfc00115 	stw	ra,4(sp)
   1493c:	df000015 	stw	fp,0(sp)
   14940:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   14944:	d0a00917 	ldw	r2,-32732(gp)
   14948:	10000326 	beq	r2,zero,14958 <alt_get_errno+0x24>
   1494c:	d0a00917 	ldw	r2,-32732(gp)
   14950:	103ee83a 	callr	r2
   14954:	00000106 	br	1495c <alt_get_errno+0x28>
   14958:	d0a6ac04 	addi	r2,gp,-25936
}
   1495c:	e037883a 	mov	sp,fp
   14960:	dfc00117 	ldw	ra,4(sp)
   14964:	df000017 	ldw	fp,0(sp)
   14968:	dec00204 	addi	sp,sp,8
   1496c:	f800283a 	ret

00014970 <alt_dev_llist_insert>:
/*
 *
 */

int alt_dev_llist_insert (alt_dev_llist* dev, alt_llist* list)
{
   14970:	defffa04 	addi	sp,sp,-24
   14974:	dfc00515 	stw	ra,20(sp)
   14978:	df000415 	stw	fp,16(sp)
   1497c:	df000404 	addi	fp,sp,16
   14980:	e13ffe15 	stw	r4,-8(fp)
   14984:	e17fff15 	stw	r5,-4(fp)
  /*
   * check that the device exists, and that it has a valid name.
   */

  if (!dev || !dev->name)
   14988:	e0bffe17 	ldw	r2,-8(fp)
   1498c:	10000326 	beq	r2,zero,1499c <alt_dev_llist_insert+0x2c>
   14990:	e0bffe17 	ldw	r2,-8(fp)
   14994:	10800217 	ldw	r2,8(r2)
   14998:	1000061e 	bne	r2,zero,149b4 <alt_dev_llist_insert+0x44>
  {
    ALT_ERRNO = EINVAL;
   1499c:	00149340 	call	14934 <alt_get_errno>
   149a0:	1007883a 	mov	r3,r2
   149a4:	00800584 	movi	r2,22
   149a8:	18800015 	stw	r2,0(r3)
    return -EINVAL;
   149ac:	00bffa84 	movi	r2,-22
   149b0:	00001306 	br	14a00 <alt_dev_llist_insert+0x90>
  
  /*
   * register the device.
   */
  
  alt_llist_insert(list, &dev->llist);
   149b4:	e0bffe17 	ldw	r2,-8(fp)
   149b8:	e0ffff17 	ldw	r3,-4(fp)
   149bc:	e0fffc15 	stw	r3,-16(fp)
   149c0:	e0bffd15 	stw	r2,-12(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
   149c4:	e0bffd17 	ldw	r2,-12(fp)
   149c8:	e0fffc17 	ldw	r3,-16(fp)
   149cc:	10c00115 	stw	r3,4(r2)
  entry->next     = list->next;
   149d0:	e0bffc17 	ldw	r2,-16(fp)
   149d4:	10c00017 	ldw	r3,0(r2)
   149d8:	e0bffd17 	ldw	r2,-12(fp)
   149dc:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
   149e0:	e0bffc17 	ldw	r2,-16(fp)
   149e4:	10800017 	ldw	r2,0(r2)
   149e8:	e0fffd17 	ldw	r3,-12(fp)
   149ec:	10c00115 	stw	r3,4(r2)
  list->next           = entry;
   149f0:	e0bffc17 	ldw	r2,-16(fp)
   149f4:	e0fffd17 	ldw	r3,-12(fp)
   149f8:	10c00015 	stw	r3,0(r2)

  return 0;  
   149fc:	0005883a 	mov	r2,zero
}
   14a00:	e037883a 	mov	sp,fp
   14a04:	dfc00117 	ldw	ra,4(sp)
   14a08:	df000017 	ldw	fp,0(sp)
   14a0c:	dec00204 	addi	sp,sp,8
   14a10:	f800283a 	ret

00014a14 <_do_ctors>:
/*
 * Run the C++ static constructors.
 */

void _do_ctors(void)
{
   14a14:	defffd04 	addi	sp,sp,-12
   14a18:	dfc00215 	stw	ra,8(sp)
   14a1c:	df000115 	stw	fp,4(sp)
   14a20:	df000104 	addi	fp,sp,4
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
   14a24:	00800074 	movhi	r2,1
   14a28:	10967f04 	addi	r2,r2,23036
   14a2c:	e0bfff15 	stw	r2,-4(fp)
   14a30:	00000606 	br	14a4c <_do_ctors+0x38>
        (*ctor) (); 
   14a34:	e0bfff17 	ldw	r2,-4(fp)
   14a38:	10800017 	ldw	r2,0(r2)
   14a3c:	103ee83a 	callr	r2

void _do_ctors(void)
{
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
   14a40:	e0bfff17 	ldw	r2,-4(fp)
   14a44:	10bfff04 	addi	r2,r2,-4
   14a48:	e0bfff15 	stw	r2,-4(fp)
   14a4c:	e0ffff17 	ldw	r3,-4(fp)
   14a50:	00800074 	movhi	r2,1
   14a54:	10968004 	addi	r2,r2,23040
   14a58:	18bff62e 	bgeu	r3,r2,14a34 <__alt_data_end+0xffff4a34>
        (*ctor) (); 
}
   14a5c:	0001883a 	nop
   14a60:	e037883a 	mov	sp,fp
   14a64:	dfc00117 	ldw	ra,4(sp)
   14a68:	df000017 	ldw	fp,0(sp)
   14a6c:	dec00204 	addi	sp,sp,8
   14a70:	f800283a 	ret

00014a74 <_do_dtors>:
/*
 * Run the C++ static destructors.
 */

void _do_dtors(void)
{
   14a74:	defffd04 	addi	sp,sp,-12
   14a78:	dfc00215 	stw	ra,8(sp)
   14a7c:	df000115 	stw	fp,4(sp)
   14a80:	df000104 	addi	fp,sp,4
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
   14a84:	00800074 	movhi	r2,1
   14a88:	10967f04 	addi	r2,r2,23036
   14a8c:	e0bfff15 	stw	r2,-4(fp)
   14a90:	00000606 	br	14aac <_do_dtors+0x38>
        (*dtor) (); 
   14a94:	e0bfff17 	ldw	r2,-4(fp)
   14a98:	10800017 	ldw	r2,0(r2)
   14a9c:	103ee83a 	callr	r2

void _do_dtors(void)
{
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
   14aa0:	e0bfff17 	ldw	r2,-4(fp)
   14aa4:	10bfff04 	addi	r2,r2,-4
   14aa8:	e0bfff15 	stw	r2,-4(fp)
   14aac:	e0ffff17 	ldw	r3,-4(fp)
   14ab0:	00800074 	movhi	r2,1
   14ab4:	10968004 	addi	r2,r2,23040
   14ab8:	18bff62e 	bgeu	r3,r2,14a94 <__alt_data_end+0xffff4a94>
        (*dtor) (); 
}
   14abc:	0001883a 	nop
   14ac0:	e037883a 	mov	sp,fp
   14ac4:	dfc00117 	ldw	ra,4(sp)
   14ac8:	df000017 	ldw	fp,0(sp)
   14acc:	dec00204 	addi	sp,sp,8
   14ad0:	f800283a 	ret

00014ad4 <alt_icache_flush_all>:
/*
 * alt_icache_flush_all() is called to flush the entire instruction cache.
 */

void alt_icache_flush_all (void)
{
   14ad4:	defffe04 	addi	sp,sp,-8
   14ad8:	dfc00115 	stw	ra,4(sp)
   14adc:	df000015 	stw	fp,0(sp)
   14ae0:	d839883a 	mov	fp,sp
#if NIOS2_ICACHE_SIZE > 0
  alt_icache_flush (0, NIOS2_ICACHE_SIZE);
   14ae4:	01440004 	movi	r5,4096
   14ae8:	0009883a 	mov	r4,zero
   14aec:	00155400 	call	15540 <alt_icache_flush>
#endif
}
   14af0:	0001883a 	nop
   14af4:	e037883a 	mov	sp,fp
   14af8:	dfc00117 	ldw	ra,4(sp)
   14afc:	df000017 	ldw	fp,0(sp)
   14b00:	dec00204 	addi	sp,sp,8
   14b04:	f800283a 	ret

00014b08 <alt_ic_isr_register>:
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
   14b08:	defff904 	addi	sp,sp,-28
   14b0c:	dfc00615 	stw	ra,24(sp)
   14b10:	df000515 	stw	fp,20(sp)
   14b14:	df000504 	addi	fp,sp,20
   14b18:	e13ffc15 	stw	r4,-16(fp)
   14b1c:	e17ffd15 	stw	r5,-12(fp)
   14b20:	e1bffe15 	stw	r6,-8(fp)
   14b24:	e1ffff15 	stw	r7,-4(fp)
    return alt_iic_isr_register(ic_id, irq, isr, isr_context, flags);
   14b28:	e0800217 	ldw	r2,8(fp)
   14b2c:	d8800015 	stw	r2,0(sp)
   14b30:	e1ffff17 	ldw	r7,-4(fp)
   14b34:	e1bffe17 	ldw	r6,-8(fp)
   14b38:	e17ffd17 	ldw	r5,-12(fp)
   14b3c:	e13ffc17 	ldw	r4,-16(fp)
   14b40:	0014cb80 	call	14cb8 <alt_iic_isr_register>
}  
   14b44:	e037883a 	mov	sp,fp
   14b48:	dfc00117 	ldw	ra,4(sp)
   14b4c:	df000017 	ldw	fp,0(sp)
   14b50:	dec00204 	addi	sp,sp,8
   14b54:	f800283a 	ret

00014b58 <alt_ic_irq_enable>:
  * @param ic_id            Ignored.
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_enable (alt_u32 ic_id, alt_u32 irq)
{
   14b58:	defff904 	addi	sp,sp,-28
   14b5c:	df000615 	stw	fp,24(sp)
   14b60:	df000604 	addi	fp,sp,24
   14b64:	e13ffe15 	stw	r4,-8(fp)
   14b68:	e17fff15 	stw	r5,-4(fp)
   14b6c:	e0bfff17 	ldw	r2,-4(fp)
   14b70:	e0bffa15 	stw	r2,-24(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   14b74:	0005303a 	rdctl	r2,status
   14b78:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   14b7c:	e0fffb17 	ldw	r3,-20(fp)
   14b80:	00bfff84 	movi	r2,-2
   14b84:	1884703a 	and	r2,r3,r2
   14b88:	1001703a 	wrctl	status,r2
  
  return context;
   14b8c:	e0bffb17 	ldw	r2,-20(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_enable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
   14b90:	e0bffc15 	stw	r2,-16(fp)

  alt_irq_active |= (1 << id);
   14b94:	00c00044 	movi	r3,1
   14b98:	e0bffa17 	ldw	r2,-24(fp)
   14b9c:	1884983a 	sll	r2,r3,r2
   14ba0:	1007883a 	mov	r3,r2
   14ba4:	d0a6b017 	ldw	r2,-25920(gp)
   14ba8:	1884b03a 	or	r2,r3,r2
   14bac:	d0a6b015 	stw	r2,-25920(gp)
  NIOS2_WRITE_IENABLE (alt_irq_active);
   14bb0:	d0a6b017 	ldw	r2,-25920(gp)
   14bb4:	100170fa 	wrctl	ienable,r2
   14bb8:	e0bffc17 	ldw	r2,-16(fp)
   14bbc:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   14bc0:	e0bffd17 	ldw	r2,-12(fp)
   14bc4:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
   14bc8:	0005883a 	mov	r2,zero
    return alt_irq_enable(irq);
   14bcc:	0001883a 	nop
}
   14bd0:	e037883a 	mov	sp,fp
   14bd4:	df000017 	ldw	fp,0(sp)
   14bd8:	dec00104 	addi	sp,sp,4
   14bdc:	f800283a 	ret

00014be0 <alt_ic_irq_disable>:
  * @param ic_id            Ignored.
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_disable(alt_u32 ic_id, alt_u32 irq)
{
   14be0:	defff904 	addi	sp,sp,-28
   14be4:	df000615 	stw	fp,24(sp)
   14be8:	df000604 	addi	fp,sp,24
   14bec:	e13ffe15 	stw	r4,-8(fp)
   14bf0:	e17fff15 	stw	r5,-4(fp)
   14bf4:	e0bfff17 	ldw	r2,-4(fp)
   14bf8:	e0bffa15 	stw	r2,-24(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   14bfc:	0005303a 	rdctl	r2,status
   14c00:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   14c04:	e0fffb17 	ldw	r3,-20(fp)
   14c08:	00bfff84 	movi	r2,-2
   14c0c:	1884703a 	and	r2,r3,r2
   14c10:	1001703a 	wrctl	status,r2
  
  return context;
   14c14:	e0bffb17 	ldw	r2,-20(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_disable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
   14c18:	e0bffc15 	stw	r2,-16(fp)

  alt_irq_active &= ~(1 << id);
   14c1c:	00c00044 	movi	r3,1
   14c20:	e0bffa17 	ldw	r2,-24(fp)
   14c24:	1884983a 	sll	r2,r3,r2
   14c28:	0084303a 	nor	r2,zero,r2
   14c2c:	1007883a 	mov	r3,r2
   14c30:	d0a6b017 	ldw	r2,-25920(gp)
   14c34:	1884703a 	and	r2,r3,r2
   14c38:	d0a6b015 	stw	r2,-25920(gp)
  NIOS2_WRITE_IENABLE (alt_irq_active);
   14c3c:	d0a6b017 	ldw	r2,-25920(gp)
   14c40:	100170fa 	wrctl	ienable,r2
   14c44:	e0bffc17 	ldw	r2,-16(fp)
   14c48:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   14c4c:	e0bffd17 	ldw	r2,-12(fp)
   14c50:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
   14c54:	0005883a 	mov	r2,zero
    return alt_irq_disable(irq);
   14c58:	0001883a 	nop
}
   14c5c:	e037883a 	mov	sp,fp
   14c60:	df000017 	ldw	fp,0(sp)
   14c64:	dec00104 	addi	sp,sp,4
   14c68:	f800283a 	ret

00014c6c <alt_ic_irq_enabled>:
  * @param irq              IRQ number
  * @return                 Zero if corresponding interrupt is disabled and
  *                         non-zero otherwise.
  */
alt_u32 alt_ic_irq_enabled(alt_u32 ic_id, alt_u32 irq)
{
   14c6c:	defffc04 	addi	sp,sp,-16
   14c70:	df000315 	stw	fp,12(sp)
   14c74:	df000304 	addi	fp,sp,12
   14c78:	e13ffe15 	stw	r4,-8(fp)
   14c7c:	e17fff15 	stw	r5,-4(fp)
    alt_u32 irq_enabled;

    NIOS2_READ_IENABLE(irq_enabled);
   14c80:	000530fa 	rdctl	r2,ienable
   14c84:	e0bffd15 	stw	r2,-12(fp)

    return (irq_enabled & (1 << irq)) ? 1: 0;
   14c88:	00c00044 	movi	r3,1
   14c8c:	e0bfff17 	ldw	r2,-4(fp)
   14c90:	1884983a 	sll	r2,r3,r2
   14c94:	1007883a 	mov	r3,r2
   14c98:	e0bffd17 	ldw	r2,-12(fp)
   14c9c:	1884703a 	and	r2,r3,r2
   14ca0:	1004c03a 	cmpne	r2,r2,zero
   14ca4:	10803fcc 	andi	r2,r2,255
}
   14ca8:	e037883a 	mov	sp,fp
   14cac:	df000017 	ldw	fp,0(sp)
   14cb0:	dec00104 	addi	sp,sp,4
   14cb4:	f800283a 	ret

00014cb8 <alt_iic_isr_register>:
  * @param flags            
  * @return                 0 if successful, else error (-1)
  */
int alt_iic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
   14cb8:	defff504 	addi	sp,sp,-44
   14cbc:	dfc00a15 	stw	ra,40(sp)
   14cc0:	df000915 	stw	fp,36(sp)
   14cc4:	df000904 	addi	fp,sp,36
   14cc8:	e13ffc15 	stw	r4,-16(fp)
   14ccc:	e17ffd15 	stw	r5,-12(fp)
   14cd0:	e1bffe15 	stw	r6,-8(fp)
   14cd4:	e1ffff15 	stw	r7,-4(fp)
  int rc = -EINVAL;  
   14cd8:	00bffa84 	movi	r2,-22
   14cdc:	e0bff715 	stw	r2,-36(fp)
  int id = irq;             /* IRQ interpreted as the interrupt ID. */
   14ce0:	e0bffd17 	ldw	r2,-12(fp)
   14ce4:	e0bff815 	stw	r2,-32(fp)
  alt_irq_context status;

  if (id < ALT_NIRQ)
   14ce8:	e0bff817 	ldw	r2,-32(fp)
   14cec:	10800808 	cmpgei	r2,r2,32
   14cf0:	1000271e 	bne	r2,zero,14d90 <alt_iic_isr_register+0xd8>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   14cf4:	0005303a 	rdctl	r2,status
   14cf8:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   14cfc:	e0fffb17 	ldw	r3,-20(fp)
   14d00:	00bfff84 	movi	r2,-2
   14d04:	1884703a 	and	r2,r3,r2
   14d08:	1001703a 	wrctl	status,r2
  
  return context;
   14d0c:	e0bffb17 	ldw	r2,-20(fp)
     * interrupts are disabled while the handler tables are updated to ensure
     * that an interrupt doesn't occur while the tables are in an inconsistant
     * state.
     */

    status = alt_irq_disable_all();
   14d10:	e0bffa15 	stw	r2,-24(fp)

    alt_irq[id].handler = isr;
   14d14:	008000b4 	movhi	r2,2
   14d18:	10a3dd04 	addi	r2,r2,-28812
   14d1c:	e0fff817 	ldw	r3,-32(fp)
   14d20:	180690fa 	slli	r3,r3,3
   14d24:	10c5883a 	add	r2,r2,r3
   14d28:	e0fffe17 	ldw	r3,-8(fp)
   14d2c:	10c00015 	stw	r3,0(r2)
    alt_irq[id].context = isr_context;
   14d30:	008000b4 	movhi	r2,2
   14d34:	10a3dd04 	addi	r2,r2,-28812
   14d38:	e0fff817 	ldw	r3,-32(fp)
   14d3c:	180690fa 	slli	r3,r3,3
   14d40:	10c5883a 	add	r2,r2,r3
   14d44:	10800104 	addi	r2,r2,4
   14d48:	e0ffff17 	ldw	r3,-4(fp)
   14d4c:	10c00015 	stw	r3,0(r2)

    rc = (isr) ? alt_ic_irq_enable(ic_id, id) : alt_ic_irq_disable(ic_id, id);
   14d50:	e0bffe17 	ldw	r2,-8(fp)
   14d54:	10000526 	beq	r2,zero,14d6c <alt_iic_isr_register+0xb4>
   14d58:	e0bff817 	ldw	r2,-32(fp)
   14d5c:	100b883a 	mov	r5,r2
   14d60:	e13ffc17 	ldw	r4,-16(fp)
   14d64:	0014b580 	call	14b58 <alt_ic_irq_enable>
   14d68:	00000406 	br	14d7c <alt_iic_isr_register+0xc4>
   14d6c:	e0bff817 	ldw	r2,-32(fp)
   14d70:	100b883a 	mov	r5,r2
   14d74:	e13ffc17 	ldw	r4,-16(fp)
   14d78:	0014be00 	call	14be0 <alt_ic_irq_disable>
   14d7c:	e0bff715 	stw	r2,-36(fp)
   14d80:	e0bffa17 	ldw	r2,-24(fp)
   14d84:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   14d88:	e0bff917 	ldw	r2,-28(fp)
   14d8c:	1001703a 	wrctl	status,r2

    alt_irq_enable_all(status);
  }

  return rc; 
   14d90:	e0bff717 	ldw	r2,-36(fp)
}
   14d94:	e037883a 	mov	sp,fp
   14d98:	dfc00117 	ldw	ra,4(sp)
   14d9c:	df000017 	ldw	fp,0(sp)
   14da0:	dec00204 	addi	sp,sp,8
   14da4:	f800283a 	ret

00014da8 <alt_open_fd>:
 * If the device can not be succesfully opened, then the input file descriptor
 * remains unchanged.
 */

static void alt_open_fd(alt_fd* fd, const char* name, int flags, int mode)
{
   14da8:	defff904 	addi	sp,sp,-28
   14dac:	dfc00615 	stw	ra,24(sp)
   14db0:	df000515 	stw	fp,20(sp)
   14db4:	df000504 	addi	fp,sp,20
   14db8:	e13ffc15 	stw	r4,-16(fp)
   14dbc:	e17ffd15 	stw	r5,-12(fp)
   14dc0:	e1bffe15 	stw	r6,-8(fp)
   14dc4:	e1ffff15 	stw	r7,-4(fp)
  int old;

  old = open (name, flags, mode);
   14dc8:	e1bfff17 	ldw	r6,-4(fp)
   14dcc:	e17ffe17 	ldw	r5,-8(fp)
   14dd0:	e13ffd17 	ldw	r4,-12(fp)
   14dd4:	0014fe80 	call	14fe8 <open>
   14dd8:	e0bffb15 	stw	r2,-20(fp)

  if (old >= 0)
   14ddc:	e0bffb17 	ldw	r2,-20(fp)
   14de0:	10001c16 	blt	r2,zero,14e54 <alt_open_fd+0xac>
  {
    fd->dev      = alt_fd_list[old].dev;
   14de4:	00800074 	movhi	r2,1
   14de8:	1098a704 	addi	r2,r2,25244
   14dec:	e0fffb17 	ldw	r3,-20(fp)
   14df0:	18c00324 	muli	r3,r3,12
   14df4:	10c5883a 	add	r2,r2,r3
   14df8:	10c00017 	ldw	r3,0(r2)
   14dfc:	e0bffc17 	ldw	r2,-16(fp)
   14e00:	10c00015 	stw	r3,0(r2)
    fd->priv     = alt_fd_list[old].priv;
   14e04:	00800074 	movhi	r2,1
   14e08:	1098a704 	addi	r2,r2,25244
   14e0c:	e0fffb17 	ldw	r3,-20(fp)
   14e10:	18c00324 	muli	r3,r3,12
   14e14:	10c5883a 	add	r2,r2,r3
   14e18:	10800104 	addi	r2,r2,4
   14e1c:	10c00017 	ldw	r3,0(r2)
   14e20:	e0bffc17 	ldw	r2,-16(fp)
   14e24:	10c00115 	stw	r3,4(r2)
    fd->fd_flags = alt_fd_list[old].fd_flags;
   14e28:	00800074 	movhi	r2,1
   14e2c:	1098a704 	addi	r2,r2,25244
   14e30:	e0fffb17 	ldw	r3,-20(fp)
   14e34:	18c00324 	muli	r3,r3,12
   14e38:	10c5883a 	add	r2,r2,r3
   14e3c:	10800204 	addi	r2,r2,8
   14e40:	10c00017 	ldw	r3,0(r2)
   14e44:	e0bffc17 	ldw	r2,-16(fp)
   14e48:	10c00215 	stw	r3,8(r2)

    alt_release_fd (old);
   14e4c:	e13ffb17 	ldw	r4,-20(fp)
   14e50:	00137c40 	call	137c4 <alt_release_fd>
  }
} 
   14e54:	0001883a 	nop
   14e58:	e037883a 	mov	sp,fp
   14e5c:	dfc00117 	ldw	ra,4(sp)
   14e60:	df000017 	ldw	fp,0(sp)
   14e64:	dec00204 	addi	sp,sp,8
   14e68:	f800283a 	ret

00014e6c <alt_io_redirect>:
 */
 
void alt_io_redirect(const char* stdout_dev, 
                     const char* stdin_dev, 
                     const char* stderr_dev)
{
   14e6c:	defffb04 	addi	sp,sp,-20
   14e70:	dfc00415 	stw	ra,16(sp)
   14e74:	df000315 	stw	fp,12(sp)
   14e78:	df000304 	addi	fp,sp,12
   14e7c:	e13ffd15 	stw	r4,-12(fp)
   14e80:	e17ffe15 	stw	r5,-8(fp)
   14e84:	e1bfff15 	stw	r6,-4(fp)
  /* Redirect the channels */

  alt_open_fd (&alt_fd_list[STDOUT_FILENO], stdout_dev, O_WRONLY, 0777);
   14e88:	01c07fc4 	movi	r7,511
   14e8c:	01800044 	movi	r6,1
   14e90:	e17ffd17 	ldw	r5,-12(fp)
   14e94:	01000074 	movhi	r4,1
   14e98:	2118aa04 	addi	r4,r4,25256
   14e9c:	0014da80 	call	14da8 <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDIN_FILENO], stdin_dev, O_RDONLY, 0777);
   14ea0:	01c07fc4 	movi	r7,511
   14ea4:	000d883a 	mov	r6,zero
   14ea8:	e17ffe17 	ldw	r5,-8(fp)
   14eac:	01000074 	movhi	r4,1
   14eb0:	2118a704 	addi	r4,r4,25244
   14eb4:	0014da80 	call	14da8 <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDERR_FILENO], stderr_dev, O_WRONLY, 0777);
   14eb8:	01c07fc4 	movi	r7,511
   14ebc:	01800044 	movi	r6,1
   14ec0:	e17fff17 	ldw	r5,-4(fp)
   14ec4:	01000074 	movhi	r4,1
   14ec8:	2118ad04 	addi	r4,r4,25268
   14ecc:	0014da80 	call	14da8 <alt_open_fd>
}  
   14ed0:	0001883a 	nop
   14ed4:	e037883a 	mov	sp,fp
   14ed8:	dfc00117 	ldw	ra,4(sp)
   14edc:	df000017 	ldw	fp,0(sp)
   14ee0:	dec00204 	addi	sp,sp,8
   14ee4:	f800283a 	ret

00014ee8 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   14ee8:	defffe04 	addi	sp,sp,-8
   14eec:	dfc00115 	stw	ra,4(sp)
   14ef0:	df000015 	stw	fp,0(sp)
   14ef4:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   14ef8:	d0a00917 	ldw	r2,-32732(gp)
   14efc:	10000326 	beq	r2,zero,14f0c <alt_get_errno+0x24>
   14f00:	d0a00917 	ldw	r2,-32732(gp)
   14f04:	103ee83a 	callr	r2
   14f08:	00000106 	br	14f10 <alt_get_errno+0x28>
   14f0c:	d0a6ac04 	addi	r2,gp,-25936
}
   14f10:	e037883a 	mov	sp,fp
   14f14:	dfc00117 	ldw	ra,4(sp)
   14f18:	df000017 	ldw	fp,0(sp)
   14f1c:	dec00204 	addi	sp,sp,8
   14f20:	f800283a 	ret

00014f24 <alt_file_locked>:
 * performed for devices. Filesystems are required to handle the ioctl() call
 * themselves, and report the error from the filesystems open() function. 
 */ 

static int alt_file_locked (alt_fd* fd)
{
   14f24:	defffd04 	addi	sp,sp,-12
   14f28:	df000215 	stw	fp,8(sp)
   14f2c:	df000204 	addi	fp,sp,8
   14f30:	e13fff15 	stw	r4,-4(fp)

  /*
   * Mark the file descriptor as belonging to a device.
   */

  fd->fd_flags |= ALT_FD_DEV;
   14f34:	e0bfff17 	ldw	r2,-4(fp)
   14f38:	10800217 	ldw	r2,8(r2)
   14f3c:	10d00034 	orhi	r3,r2,16384
   14f40:	e0bfff17 	ldw	r2,-4(fp)
   14f44:	10c00215 	stw	r3,8(r2)
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
   14f48:	e03ffe15 	stw	zero,-8(fp)
   14f4c:	00001d06 	br	14fc4 <alt_file_locked+0xa0>
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
   14f50:	00800074 	movhi	r2,1
   14f54:	1098a704 	addi	r2,r2,25244
   14f58:	e0fffe17 	ldw	r3,-8(fp)
   14f5c:	18c00324 	muli	r3,r3,12
   14f60:	10c5883a 	add	r2,r2,r3
   14f64:	10c00017 	ldw	r3,0(r2)
   14f68:	e0bfff17 	ldw	r2,-4(fp)
   14f6c:	10800017 	ldw	r2,0(r2)
   14f70:	1880111e 	bne	r3,r2,14fb8 <alt_file_locked+0x94>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
   14f74:	00800074 	movhi	r2,1
   14f78:	1098a704 	addi	r2,r2,25244
   14f7c:	e0fffe17 	ldw	r3,-8(fp)
   14f80:	18c00324 	muli	r3,r3,12
   14f84:	10c5883a 	add	r2,r2,r3
   14f88:	10800204 	addi	r2,r2,8
   14f8c:	10800017 	ldw	r2,0(r2)
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
   14f90:	1000090e 	bge	r2,zero,14fb8 <alt_file_locked+0x94>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
        (&alt_fd_list[i] != fd))
   14f94:	e0bffe17 	ldw	r2,-8(fp)
   14f98:	10c00324 	muli	r3,r2,12
   14f9c:	00800074 	movhi	r2,1
   14fa0:	1098a704 	addi	r2,r2,25244
   14fa4:	1887883a 	add	r3,r3,r2
   */

  for (i = 0; i <= alt_max_fd; i++)
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
   14fa8:	e0bfff17 	ldw	r2,-4(fp)
   14fac:	18800226 	beq	r3,r2,14fb8 <alt_file_locked+0x94>
        (&alt_fd_list[i] != fd))
    {
      return -EACCES;
   14fb0:	00bffcc4 	movi	r2,-13
   14fb4:	00000806 	br	14fd8 <alt_file_locked+0xb4>
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
   14fb8:	e0bffe17 	ldw	r2,-8(fp)
   14fbc:	10800044 	addi	r2,r2,1
   14fc0:	e0bffe15 	stw	r2,-8(fp)
   14fc4:	d0a00817 	ldw	r2,-32736(gp)
   14fc8:	1007883a 	mov	r3,r2
   14fcc:	e0bffe17 	ldw	r2,-8(fp)
   14fd0:	18bfdf2e 	bgeu	r3,r2,14f50 <__alt_data_end+0xffff4f50>
    }
  }
  
  /* The device is not locked */
 
  return 0;
   14fd4:	0005883a 	mov	r2,zero
}
   14fd8:	e037883a 	mov	sp,fp
   14fdc:	df000017 	ldw	fp,0(sp)
   14fe0:	dec00104 	addi	sp,sp,4
   14fe4:	f800283a 	ret

00014fe8 <open>:
 *
 * ALT_OPEN is mapped onto the open() system call in alt_syscall.h
 */
 
int ALT_OPEN (const char* file, int flags, int mode)
{ 
   14fe8:	defff604 	addi	sp,sp,-40
   14fec:	dfc00915 	stw	ra,36(sp)
   14ff0:	df000815 	stw	fp,32(sp)
   14ff4:	df000804 	addi	fp,sp,32
   14ff8:	e13ffd15 	stw	r4,-12(fp)
   14ffc:	e17ffe15 	stw	r5,-8(fp)
   15000:	e1bfff15 	stw	r6,-4(fp)
  alt_dev* dev;
  alt_fd*  fd;
  int index  = -1;
   15004:	00bfffc4 	movi	r2,-1
   15008:	e0bff915 	stw	r2,-28(fp)
  int status = -ENODEV;
   1500c:	00bffb44 	movi	r2,-19
   15010:	e0bffa15 	stw	r2,-24(fp)
  int isafs = 0;
   15014:	e03ffb15 	stw	zero,-20(fp)
  /* 
   * Check the device list, to see if a device with a matching name is 
   * registered.
   */
  
  if (!(dev = alt_find_dev (file, &alt_dev_list)))
   15018:	d1600604 	addi	r5,gp,-32744
   1501c:	e13ffd17 	ldw	r4,-12(fp)
   15020:	00153040 	call	15304 <alt_find_dev>
   15024:	e0bff815 	stw	r2,-32(fp)
   15028:	e0bff817 	ldw	r2,-32(fp)
   1502c:	1000051e 	bne	r2,zero,15044 <open+0x5c>
  {
    /* No matching device, so try the filesystem list */

    dev   = alt_find_file (file);
   15030:	e13ffd17 	ldw	r4,-12(fp)
   15034:	00153940 	call	15394 <alt_find_file>
   15038:	e0bff815 	stw	r2,-32(fp)
    isafs = 1;
   1503c:	00800044 	movi	r2,1
   15040:	e0bffb15 	stw	r2,-20(fp)

  /* 
   * If a matching device or filesystem is found, allocate a file descriptor. 
   */

  if (dev)
   15044:	e0bff817 	ldw	r2,-32(fp)
   15048:	10002926 	beq	r2,zero,150f0 <open+0x108>
  {
    if ((index = alt_get_fd (dev)) < 0)
   1504c:	e13ff817 	ldw	r4,-32(fp)
   15050:	001549c0 	call	1549c <alt_get_fd>
   15054:	e0bff915 	stw	r2,-28(fp)
   15058:	e0bff917 	ldw	r2,-28(fp)
   1505c:	1000030e 	bge	r2,zero,1506c <open+0x84>
    {
      status = index;
   15060:	e0bff917 	ldw	r2,-28(fp)
   15064:	e0bffa15 	stw	r2,-24(fp)
   15068:	00002306 	br	150f8 <open+0x110>
    }
    else
    {
      fd = &alt_fd_list[index];
   1506c:	e0bff917 	ldw	r2,-28(fp)
   15070:	10c00324 	muli	r3,r2,12
   15074:	00800074 	movhi	r2,1
   15078:	1098a704 	addi	r2,r2,25244
   1507c:	1885883a 	add	r2,r3,r2
   15080:	e0bffc15 	stw	r2,-16(fp)
      fd->fd_flags = (flags & ~ALT_FD_FLAGS_MASK);
   15084:	e0fffe17 	ldw	r3,-8(fp)
   15088:	00900034 	movhi	r2,16384
   1508c:	10bfffc4 	addi	r2,r2,-1
   15090:	1886703a 	and	r3,r3,r2
   15094:	e0bffc17 	ldw	r2,-16(fp)
   15098:	10c00215 	stw	r3,8(r2)
      
      /* If this is a device, ensure it isn't already locked */

      if (isafs || ((status = alt_file_locked (fd)) >= 0))
   1509c:	e0bffb17 	ldw	r2,-20(fp)
   150a0:	1000051e 	bne	r2,zero,150b8 <open+0xd0>
   150a4:	e13ffc17 	ldw	r4,-16(fp)
   150a8:	0014f240 	call	14f24 <alt_file_locked>
   150ac:	e0bffa15 	stw	r2,-24(fp)
   150b0:	e0bffa17 	ldw	r2,-24(fp)
   150b4:	10001016 	blt	r2,zero,150f8 <open+0x110>
        /* 
         * If the device or filesystem provides an open() callback function,
         * call it now to perform any device/filesystem specific operations.
         */
    
        status = (dev->open) ? dev->open(fd, file, flags, mode): 0;
   150b8:	e0bff817 	ldw	r2,-32(fp)
   150bc:	10800317 	ldw	r2,12(r2)
   150c0:	10000826 	beq	r2,zero,150e4 <open+0xfc>
   150c4:	e0bff817 	ldw	r2,-32(fp)
   150c8:	10800317 	ldw	r2,12(r2)
   150cc:	e1ffff17 	ldw	r7,-4(fp)
   150d0:	e1bffe17 	ldw	r6,-8(fp)
   150d4:	e17ffd17 	ldw	r5,-12(fp)
   150d8:	e13ffc17 	ldw	r4,-16(fp)
   150dc:	103ee83a 	callr	r2
   150e0:	00000106 	br	150e8 <open+0x100>
   150e4:	0005883a 	mov	r2,zero
   150e8:	e0bffa15 	stw	r2,-24(fp)
   150ec:	00000206 	br	150f8 <open+0x110>
      }
    }
  }
  else
  {
    status = -ENODEV;
   150f0:	00bffb44 	movi	r2,-19
   150f4:	e0bffa15 	stw	r2,-24(fp)
  }

  /* Allocation failed, so clean up and return an error */ 

  if (status < 0)
   150f8:	e0bffa17 	ldw	r2,-24(fp)
   150fc:	1000090e 	bge	r2,zero,15124 <open+0x13c>
  {
    alt_release_fd (index);  
   15100:	e13ff917 	ldw	r4,-28(fp)
   15104:	00137c40 	call	137c4 <alt_release_fd>
    ALT_ERRNO = -status;
   15108:	0014ee80 	call	14ee8 <alt_get_errno>
   1510c:	1007883a 	mov	r3,r2
   15110:	e0bffa17 	ldw	r2,-24(fp)
   15114:	0085c83a 	sub	r2,zero,r2
   15118:	18800015 	stw	r2,0(r3)
    return -1;
   1511c:	00bfffc4 	movi	r2,-1
   15120:	00000106 	br	15128 <open+0x140>
  }
  
  /* return the reference upon success */

  return index;
   15124:	e0bff917 	ldw	r2,-28(fp)
}
   15128:	e037883a 	mov	sp,fp
   1512c:	dfc00117 	ldw	ra,4(sp)
   15130:	df000017 	ldw	fp,0(sp)
   15134:	dec00204 	addi	sp,sp,8
   15138:	f800283a 	ret

0001513c <alt_alarm_stop>:
 * alarms. Alternatively an alarm can unregister itself by returning zero when 
 * the alarm executes.
 */

void alt_alarm_stop (alt_alarm* alarm)
{
   1513c:	defffa04 	addi	sp,sp,-24
   15140:	df000515 	stw	fp,20(sp)
   15144:	df000504 	addi	fp,sp,20
   15148:	e13fff15 	stw	r4,-4(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   1514c:	0005303a 	rdctl	r2,status
   15150:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   15154:	e0fffc17 	ldw	r3,-16(fp)
   15158:	00bfff84 	movi	r2,-2
   1515c:	1884703a 	and	r2,r3,r2
   15160:	1001703a 	wrctl	status,r2
  
  return context;
   15164:	e0bffc17 	ldw	r2,-16(fp)
  alt_irq_context irq_context;

  irq_context = alt_irq_disable_all();
   15168:	e0bffb15 	stw	r2,-20(fp)
  alt_llist_remove (&alarm->llist);
   1516c:	e0bfff17 	ldw	r2,-4(fp)
   15170:	e0bffd15 	stw	r2,-12(fp)
 * input argument is the element to remove.
 */
     
static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_remove(alt_llist* entry)
{
  entry->next->previous = entry->previous;
   15174:	e0bffd17 	ldw	r2,-12(fp)
   15178:	10800017 	ldw	r2,0(r2)
   1517c:	e0fffd17 	ldw	r3,-12(fp)
   15180:	18c00117 	ldw	r3,4(r3)
   15184:	10c00115 	stw	r3,4(r2)
  entry->previous->next = entry->next;
   15188:	e0bffd17 	ldw	r2,-12(fp)
   1518c:	10800117 	ldw	r2,4(r2)
   15190:	e0fffd17 	ldw	r3,-12(fp)
   15194:	18c00017 	ldw	r3,0(r3)
   15198:	10c00015 	stw	r3,0(r2)
  /* 
   * Set the entry to point to itself, so that any further calls to
   * alt_llist_remove() are harmless.
   */

  entry->previous = entry;
   1519c:	e0bffd17 	ldw	r2,-12(fp)
   151a0:	e0fffd17 	ldw	r3,-12(fp)
   151a4:	10c00115 	stw	r3,4(r2)
  entry->next     = entry;
   151a8:	e0bffd17 	ldw	r2,-12(fp)
   151ac:	e0fffd17 	ldw	r3,-12(fp)
   151b0:	10c00015 	stw	r3,0(r2)
   151b4:	e0bffb17 	ldw	r2,-20(fp)
   151b8:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   151bc:	e0bffe17 	ldw	r2,-8(fp)
   151c0:	1001703a 	wrctl	status,r2
  alt_irq_enable_all (irq_context);
}
   151c4:	0001883a 	nop
   151c8:	e037883a 	mov	sp,fp
   151cc:	df000017 	ldw	fp,0(sp)
   151d0:	dec00104 	addi	sp,sp,4
   151d4:	f800283a 	ret

000151d8 <alt_tick>:
 * 
 * alt_tick() is expected to run at interrupt level.
 */

void alt_tick (void)
{
   151d8:	defffb04 	addi	sp,sp,-20
   151dc:	dfc00415 	stw	ra,16(sp)
   151e0:	df000315 	stw	fp,12(sp)
   151e4:	df000304 	addi	fp,sp,12
  alt_alarm* next;
  alt_alarm* alarm = (alt_alarm*) alt_alarm_list.next;
   151e8:	d0a00c17 	ldw	r2,-32720(gp)
   151ec:	e0bffd15 	stw	r2,-12(fp)

  alt_u32    next_callback;

  /* update the tick counter */

  _alt_nticks++;
   151f0:	d0a6b217 	ldw	r2,-25912(gp)
   151f4:	10800044 	addi	r2,r2,1
   151f8:	d0a6b215 	stw	r2,-25912(gp)

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
   151fc:	00002e06 	br	152b8 <alt_tick+0xe0>
  {
    next = (alt_alarm*) alarm->llist.next;
   15200:	e0bffd17 	ldw	r2,-12(fp)
   15204:	10800017 	ldw	r2,0(r2)
   15208:	e0bffe15 	stw	r2,-8(fp)
    /* 
     * Upon the tick-counter rolling over it is safe to clear the 
     * roll-over flag; once the flag is cleared this (or subsequnt)
     * tick events are enabled to generate an alarm event. 
     */
    if ((alarm->rollover) && (_alt_nticks == 0))
   1520c:	e0bffd17 	ldw	r2,-12(fp)
   15210:	10800403 	ldbu	r2,16(r2)
   15214:	10803fcc 	andi	r2,r2,255
   15218:	10000426 	beq	r2,zero,1522c <alt_tick+0x54>
   1521c:	d0a6b217 	ldw	r2,-25912(gp)
   15220:	1000021e 	bne	r2,zero,1522c <alt_tick+0x54>
    {
      alarm->rollover = 0;
   15224:	e0bffd17 	ldw	r2,-12(fp)
   15228:	10000405 	stb	zero,16(r2)
    }
    
    /* if the alarm period has expired, make the callback */    
    if ((alarm->time <= _alt_nticks) && (alarm->rollover == 0))
   1522c:	e0bffd17 	ldw	r2,-12(fp)
   15230:	10800217 	ldw	r2,8(r2)
   15234:	d0e6b217 	ldw	r3,-25912(gp)
   15238:	18801d36 	bltu	r3,r2,152b0 <alt_tick+0xd8>
   1523c:	e0bffd17 	ldw	r2,-12(fp)
   15240:	10800403 	ldbu	r2,16(r2)
   15244:	10803fcc 	andi	r2,r2,255
   15248:	1000191e 	bne	r2,zero,152b0 <alt_tick+0xd8>
    {
      next_callback = alarm->callback (alarm->context);
   1524c:	e0bffd17 	ldw	r2,-12(fp)
   15250:	10800317 	ldw	r2,12(r2)
   15254:	e0fffd17 	ldw	r3,-12(fp)
   15258:	18c00517 	ldw	r3,20(r3)
   1525c:	1809883a 	mov	r4,r3
   15260:	103ee83a 	callr	r2
   15264:	e0bfff15 	stw	r2,-4(fp)

      /* deactivate the alarm if the return value is zero */

      if (next_callback == 0)
   15268:	e0bfff17 	ldw	r2,-4(fp)
   1526c:	1000031e 	bne	r2,zero,1527c <alt_tick+0xa4>
      {
        alt_alarm_stop (alarm);
   15270:	e13ffd17 	ldw	r4,-12(fp)
   15274:	001513c0 	call	1513c <alt_alarm_stop>
   15278:	00000d06 	br	152b0 <alt_tick+0xd8>
      }
      else
      {
        alarm->time += next_callback;
   1527c:	e0bffd17 	ldw	r2,-12(fp)
   15280:	10c00217 	ldw	r3,8(r2)
   15284:	e0bfff17 	ldw	r2,-4(fp)
   15288:	1887883a 	add	r3,r3,r2
   1528c:	e0bffd17 	ldw	r2,-12(fp)
   15290:	10c00215 	stw	r3,8(r2)
        /* 
         * If the desired alarm time causes a roll-over, set the rollover
         * flag. This will prevent the subsequent tick event from causing
         * an alarm too early.
         */
        if(alarm->time < _alt_nticks)
   15294:	e0bffd17 	ldw	r2,-12(fp)
   15298:	10c00217 	ldw	r3,8(r2)
   1529c:	d0a6b217 	ldw	r2,-25912(gp)
   152a0:	1880032e 	bgeu	r3,r2,152b0 <alt_tick+0xd8>
        {
          alarm->rollover = 1;
   152a4:	e0bffd17 	ldw	r2,-12(fp)
   152a8:	00c00044 	movi	r3,1
   152ac:	10c00405 	stb	r3,16(r2)
        }
      }
    }
    alarm = next;
   152b0:	e0bffe17 	ldw	r2,-8(fp)
   152b4:	e0bffd15 	stw	r2,-12(fp)

  _alt_nticks++;

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
   152b8:	e0fffd17 	ldw	r3,-12(fp)
   152bc:	d0a00c04 	addi	r2,gp,-32720
   152c0:	18bfcf1e 	bne	r3,r2,15200 <__alt_data_end+0xffff5200>

  /* 
   * Update the operating system specific timer facilities.
   */

  ALT_OS_TIME_TICK();
   152c4:	0001883a 	nop
}
   152c8:	0001883a 	nop
   152cc:	e037883a 	mov	sp,fp
   152d0:	dfc00117 	ldw	ra,4(sp)
   152d4:	df000017 	ldw	fp,0(sp)
   152d8:	dec00204 	addi	sp,sp,8
   152dc:	f800283a 	ret

000152e0 <altera_nios2_gen2_irq_init>:
/*
 * To initialize the internal interrupt controller, just clear the IENABLE
 * register so that all possible IRQs are disabled.
 */
void altera_nios2_gen2_irq_init(void) 
{
   152e0:	deffff04 	addi	sp,sp,-4
   152e4:	df000015 	stw	fp,0(sp)
   152e8:	d839883a 	mov	fp,sp
    NIOS2_WRITE_IENABLE(0);
   152ec:	000170fa 	wrctl	ienable,zero
}
   152f0:	0001883a 	nop
   152f4:	e037883a 	mov	sp,fp
   152f8:	df000017 	ldw	fp,0(sp)
   152fc:	dec00104 	addi	sp,sp,4
   15300:	f800283a 	ret

00015304 <alt_find_dev>:
 * "name" must be an exact match for the devices registered name for a match to
 * be found.
 */
 
alt_dev* alt_find_dev(const char* name, alt_llist* llist)
{
   15304:	defffa04 	addi	sp,sp,-24
   15308:	dfc00515 	stw	ra,20(sp)
   1530c:	df000415 	stw	fp,16(sp)
   15310:	df000404 	addi	fp,sp,16
   15314:	e13ffe15 	stw	r4,-8(fp)
   15318:	e17fff15 	stw	r5,-4(fp)
  alt_dev* next = (alt_dev*) llist->next;
   1531c:	e0bfff17 	ldw	r2,-4(fp)
   15320:	10800017 	ldw	r2,0(r2)
   15324:	e0bffc15 	stw	r2,-16(fp)
  alt_32 len;

  len  = strlen(name) + 1;
   15328:	e13ffe17 	ldw	r4,-8(fp)
   1532c:	00103d40 	call	103d4 <strlen>
   15330:	10800044 	addi	r2,r2,1
   15334:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
   15338:	00000d06 	br	15370 <alt_find_dev+0x6c>
    /* 
     * memcmp() is used here rather than strcmp() in order to reduce the size
     * of the executable.
     */

    if (!memcmp (next->name, name, len))
   1533c:	e0bffc17 	ldw	r2,-16(fp)
   15340:	10800217 	ldw	r2,8(r2)
   15344:	e0fffd17 	ldw	r3,-12(fp)
   15348:	180d883a 	mov	r6,r3
   1534c:	e17ffe17 	ldw	r5,-8(fp)
   15350:	1009883a 	mov	r4,r2
   15354:	00156b80 	call	156b8 <memcmp>
   15358:	1000021e 	bne	r2,zero,15364 <alt_find_dev+0x60>
    {
      /* match found */

      return next;
   1535c:	e0bffc17 	ldw	r2,-16(fp)
   15360:	00000706 	br	15380 <alt_find_dev+0x7c>
    }
    next = (alt_dev*) next->llist.next;
   15364:	e0bffc17 	ldw	r2,-16(fp)
   15368:	10800017 	ldw	r2,0(r2)
   1536c:	e0bffc15 	stw	r2,-16(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
   15370:	e0fffc17 	ldw	r3,-16(fp)
   15374:	e0bfff17 	ldw	r2,-4(fp)
   15378:	18bff01e 	bne	r3,r2,1533c <__alt_data_end+0xffff533c>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;
   1537c:	0005883a 	mov	r2,zero
}
   15380:	e037883a 	mov	sp,fp
   15384:	dfc00117 	ldw	ra,4(sp)
   15388:	df000017 	ldw	fp,0(sp)
   1538c:	dec00204 	addi	sp,sp,8
   15390:	f800283a 	ret

00015394 <alt_find_file>:
 * either '/' or '\0' is the prefix of the filename. For example the filename:
 * "/myfilesystem/junk.txt" would match: "/myfilesystem", but not: "/myfile". 
 */
 
alt_dev* alt_find_file (const char* name)
{
   15394:	defffb04 	addi	sp,sp,-20
   15398:	dfc00415 	stw	ra,16(sp)
   1539c:	df000315 	stw	fp,12(sp)
   153a0:	df000304 	addi	fp,sp,12
   153a4:	e13fff15 	stw	r4,-4(fp)
  alt_dev* next = (alt_dev*) alt_fs_list.next;   
   153a8:	d0a00417 	ldw	r2,-32752(gp)
   153ac:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
   153b0:	00003106 	br	15478 <alt_find_file+0xe4>
  {
    len = strlen(next->name);
   153b4:	e0bffd17 	ldw	r2,-12(fp)
   153b8:	10800217 	ldw	r2,8(r2)
   153bc:	1009883a 	mov	r4,r2
   153c0:	00103d40 	call	103d4 <strlen>
   153c4:	e0bffe15 	stw	r2,-8(fp)
    
    if (next->name[len-1] == '/')
   153c8:	e0bffd17 	ldw	r2,-12(fp)
   153cc:	10c00217 	ldw	r3,8(r2)
   153d0:	e0bffe17 	ldw	r2,-8(fp)
   153d4:	10bfffc4 	addi	r2,r2,-1
   153d8:	1885883a 	add	r2,r3,r2
   153dc:	10800003 	ldbu	r2,0(r2)
   153e0:	10803fcc 	andi	r2,r2,255
   153e4:	1080201c 	xori	r2,r2,128
   153e8:	10bfe004 	addi	r2,r2,-128
   153ec:	10800bd8 	cmpnei	r2,r2,47
   153f0:	1000031e 	bne	r2,zero,15400 <alt_find_file+0x6c>
    {
      len -= 1;
   153f4:	e0bffe17 	ldw	r2,-8(fp)
   153f8:	10bfffc4 	addi	r2,r2,-1
   153fc:	e0bffe15 	stw	r2,-8(fp)
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
   15400:	e0bffe17 	ldw	r2,-8(fp)
   15404:	e0ffff17 	ldw	r3,-4(fp)
   15408:	1885883a 	add	r2,r3,r2
   1540c:	10800003 	ldbu	r2,0(r2)
   15410:	10803fcc 	andi	r2,r2,255
   15414:	1080201c 	xori	r2,r2,128
   15418:	10bfe004 	addi	r2,r2,-128
   1541c:	10800be0 	cmpeqi	r2,r2,47
   15420:	1000081e 	bne	r2,zero,15444 <alt_find_file+0xb0>
   15424:	e0bffe17 	ldw	r2,-8(fp)
   15428:	e0ffff17 	ldw	r3,-4(fp)
   1542c:	1885883a 	add	r2,r3,r2
   15430:	10800003 	ldbu	r2,0(r2)
   15434:	10803fcc 	andi	r2,r2,255
   15438:	1080201c 	xori	r2,r2,128
   1543c:	10bfe004 	addi	r2,r2,-128
   15440:	10000a1e 	bne	r2,zero,1546c <alt_find_file+0xd8>
        !memcmp (next->name, name, len))
   15444:	e0bffd17 	ldw	r2,-12(fp)
   15448:	10800217 	ldw	r2,8(r2)
   1544c:	e0fffe17 	ldw	r3,-8(fp)
   15450:	180d883a 	mov	r6,r3
   15454:	e17fff17 	ldw	r5,-4(fp)
   15458:	1009883a 	mov	r4,r2
   1545c:	00156b80 	call	156b8 <memcmp>
    if (next->name[len-1] == '/')
    {
      len -= 1;
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
   15460:	1000021e 	bne	r2,zero,1546c <alt_find_file+0xd8>
        !memcmp (next->name, name, len))
    {
      /* match found */

      return next;
   15464:	e0bffd17 	ldw	r2,-12(fp)
   15468:	00000706 	br	15488 <alt_find_file+0xf4>
    }
    next = (alt_dev*) next->llist.next;
   1546c:	e0bffd17 	ldw	r2,-12(fp)
   15470:	10800017 	ldw	r2,0(r2)
   15474:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
   15478:	e0fffd17 	ldw	r3,-12(fp)
   1547c:	d0a00404 	addi	r2,gp,-32752
   15480:	18bfcc1e 	bne	r3,r2,153b4 <__alt_data_end+0xffff53b4>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;     
   15484:	0005883a 	mov	r2,zero
}
   15488:	e037883a 	mov	sp,fp
   1548c:	dfc00117 	ldw	ra,4(sp)
   15490:	df000017 	ldw	fp,0(sp)
   15494:	dec00204 	addi	sp,sp,8
   15498:	f800283a 	ret

0001549c <alt_get_fd>:
 * the offset of the file descriptor within the file descriptor array). A
 * negative value indicates failure.
 */

int alt_get_fd (alt_dev* dev)
{
   1549c:	defffc04 	addi	sp,sp,-16
   154a0:	df000315 	stw	fp,12(sp)
   154a4:	df000304 	addi	fp,sp,12
   154a8:	e13fff15 	stw	r4,-4(fp)
  alt_32 i;
  int rc = -EMFILE;
   154ac:	00bffa04 	movi	r2,-24
   154b0:	e0bffe15 	stw	r2,-8(fp)
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
   154b4:	e03ffd15 	stw	zero,-12(fp)
   154b8:	00001906 	br	15520 <alt_get_fd+0x84>
  {
    if (!alt_fd_list[i].dev)
   154bc:	00800074 	movhi	r2,1
   154c0:	1098a704 	addi	r2,r2,25244
   154c4:	e0fffd17 	ldw	r3,-12(fp)
   154c8:	18c00324 	muli	r3,r3,12
   154cc:	10c5883a 	add	r2,r2,r3
   154d0:	10800017 	ldw	r2,0(r2)
   154d4:	10000f1e 	bne	r2,zero,15514 <alt_get_fd+0x78>
    {
      alt_fd_list[i].dev = dev;
   154d8:	00800074 	movhi	r2,1
   154dc:	1098a704 	addi	r2,r2,25244
   154e0:	e0fffd17 	ldw	r3,-12(fp)
   154e4:	18c00324 	muli	r3,r3,12
   154e8:	10c5883a 	add	r2,r2,r3
   154ec:	e0ffff17 	ldw	r3,-4(fp)
   154f0:	10c00015 	stw	r3,0(r2)
      if (i > alt_max_fd)
   154f4:	d0e00817 	ldw	r3,-32736(gp)
   154f8:	e0bffd17 	ldw	r2,-12(fp)
   154fc:	1880020e 	bge	r3,r2,15508 <alt_get_fd+0x6c>
      {
        alt_max_fd = i;
   15500:	e0bffd17 	ldw	r2,-12(fp)
   15504:	d0a00815 	stw	r2,-32736(gp)
      }
      rc = i;
   15508:	e0bffd17 	ldw	r2,-12(fp)
   1550c:	e0bffe15 	stw	r2,-8(fp)
      goto alt_get_fd_exit;
   15510:	00000606 	br	1552c <alt_get_fd+0x90>
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
   15514:	e0bffd17 	ldw	r2,-12(fp)
   15518:	10800044 	addi	r2,r2,1
   1551c:	e0bffd15 	stw	r2,-12(fp)
   15520:	e0bffd17 	ldw	r2,-12(fp)
   15524:	10800810 	cmplti	r2,r2,32
   15528:	103fe41e 	bne	r2,zero,154bc <__alt_data_end+0xffff54bc>
   * file descriptor pool.
   */

  ALT_SEM_POST(alt_fd_list_lock);

  return rc;
   1552c:	e0bffe17 	ldw	r2,-8(fp)
}
   15530:	e037883a 	mov	sp,fp
   15534:	df000017 	ldw	fp,0(sp)
   15538:	dec00104 	addi	sp,sp,4
   1553c:	f800283a 	ret

00015540 <alt_icache_flush>:
 * alt_icache_flush() is called to flush the instruction cache for a memory
 * region of length "len" bytes, starting at address "start".
 */

void alt_icache_flush (void* start, alt_u32 len)
{
   15540:	defffb04 	addi	sp,sp,-20
   15544:	df000415 	stw	fp,16(sp)
   15548:	df000404 	addi	fp,sp,16
   1554c:	e13ffe15 	stw	r4,-8(fp)
   15550:	e17fff15 	stw	r5,-4(fp)

  /*
   * This is the most we would ever need to flush.
   */
 
  if (len > NIOS2_ICACHE_SIZE)
   15554:	e0bfff17 	ldw	r2,-4(fp)
   15558:	10840070 	cmpltui	r2,r2,4097
   1555c:	1000021e 	bne	r2,zero,15568 <alt_icache_flush+0x28>
  {
    len = NIOS2_ICACHE_SIZE;
   15560:	00840004 	movi	r2,4096
   15564:	e0bfff15 	stw	r2,-4(fp)
  }

  end = ((char*) start) + len;
   15568:	e0fffe17 	ldw	r3,-8(fp)
   1556c:	e0bfff17 	ldw	r2,-4(fp)
   15570:	1885883a 	add	r2,r3,r2
   15574:	e0bffd15 	stw	r2,-12(fp)

  for (i = start; i < end; i+= NIOS2_ICACHE_LINE_SIZE)
   15578:	e0bffe17 	ldw	r2,-8(fp)
   1557c:	e0bffc15 	stw	r2,-16(fp)
   15580:	00000506 	br	15598 <alt_icache_flush+0x58>
  { 
    __asm__ volatile ("flushi %0" :: "r" (i)); 
   15584:	e0bffc17 	ldw	r2,-16(fp)
   15588:	1000603a 	flushi	r2
    len = NIOS2_ICACHE_SIZE;
  }

  end = ((char*) start) + len;

  for (i = start; i < end; i+= NIOS2_ICACHE_LINE_SIZE)
   1558c:	e0bffc17 	ldw	r2,-16(fp)
   15590:	10800804 	addi	r2,r2,32
   15594:	e0bffc15 	stw	r2,-16(fp)
   15598:	e0fffc17 	ldw	r3,-16(fp)
   1559c:	e0bffd17 	ldw	r2,-12(fp)
   155a0:	18bff836 	bltu	r3,r2,15584 <__alt_data_end+0xffff5584>
   * For an unaligned flush request, we've got one more line left.
   * Note that this is dependent on NIOS2_ICACHE_LINE_SIZE to be a 
   * multiple of 2 (which it always is).
   */

  if (((alt_u32) start) & (NIOS2_ICACHE_LINE_SIZE - 1))
   155a4:	e0bffe17 	ldw	r2,-8(fp)
   155a8:	108007cc 	andi	r2,r2,31
   155ac:	10000226 	beq	r2,zero,155b8 <alt_icache_flush+0x78>
  {
    __asm__ volatile ("flushi %0" :: "r" (i));
   155b0:	e0bffc17 	ldw	r2,-16(fp)
   155b4:	1000603a 	flushi	r2
  /* 
   * Having flushed the cache, flush any stale instructions in the 
   * pipeline 
   */

  __asm__ volatile ("flushp");
   155b8:	0000203a 	flushp

#endif /* NIOS2_ICACHE_SIZE > 0 */
}
   155bc:	0001883a 	nop
   155c0:	e037883a 	mov	sp,fp
   155c4:	df000017 	ldw	fp,0(sp)
   155c8:	dec00104 	addi	sp,sp,4
   155cc:	f800283a 	ret

000155d0 <alt_exception_cause_generated_bad_addr>:
 * Return: 1: BADADDR (bad_addr argument to handler) is valid
 *         0: BADADDR is not valid
 */
int 
alt_exception_cause_generated_bad_addr(alt_exception_cause cause)
{
   155d0:	defffe04 	addi	sp,sp,-8
   155d4:	df000115 	stw	fp,4(sp)
   155d8:	df000104 	addi	fp,sp,4
   155dc:	e13fff15 	stw	r4,-4(fp)
  switch (cause) {
   155e0:	e0bfff17 	ldw	r2,-4(fp)
   155e4:	10bffe84 	addi	r2,r2,-6
   155e8:	10c00428 	cmpgeui	r3,r2,16
   155ec:	18001a1e 	bne	r3,zero,15658 <alt_exception_cause_generated_bad_addr+0x88>
   155f0:	100690ba 	slli	r3,r2,2
   155f4:	00800074 	movhi	r2,1
   155f8:	10958204 	addi	r2,r2,22024
   155fc:	1885883a 	add	r2,r3,r2
   15600:	10800017 	ldw	r2,0(r2)
   15604:	1000683a 	jmp	r2
   15608:	00015648 	cmpgei	zero,zero,1369
   1560c:	00015648 	cmpgei	zero,zero,1369
   15610:	00015658 	cmpnei	zero,zero,1369
   15614:	00015658 	cmpnei	zero,zero,1369
   15618:	00015658 	cmpnei	zero,zero,1369
   1561c:	00015648 	cmpgei	zero,zero,1369
   15620:	00015650 	cmplti	zero,zero,1369
   15624:	00015658 	cmpnei	zero,zero,1369
   15628:	00015648 	cmpgei	zero,zero,1369
   1562c:	00015648 	cmpgei	zero,zero,1369
   15630:	00015658 	cmpnei	zero,zero,1369
   15634:	00015648 	cmpgei	zero,zero,1369
   15638:	00015650 	cmplti	zero,zero,1369
   1563c:	00015658 	cmpnei	zero,zero,1369
   15640:	00015658 	cmpnei	zero,zero,1369
   15644:	00015648 	cmpgei	zero,zero,1369
  case NIOS2_EXCEPTION_MISALIGNED_TARGET_PC:
  case NIOS2_EXCEPTION_TLB_READ_PERM_VIOLATION:
  case NIOS2_EXCEPTION_TLB_WRITE_PERM_VIOLATION:
  case NIOS2_EXCEPTION_MPU_DATA_REGION_VIOLATION:
  case NIOS2_EXCEPTION_ECC_DATA_ERR:
    return 1;
   15648:	00800044 	movi	r2,1
   1564c:	00000306 	br	1565c <alt_exception_cause_generated_bad_addr+0x8c>

  case NIOS2_EXCEPTION_TLB_MISS:
  case NIOS2_EXCEPTION_ECC_TLB_ERR:
    return 0;
   15650:	0005883a 	mov	r2,zero
   15654:	00000106 	br	1565c <alt_exception_cause_generated_bad_addr+0x8c>

  default:
    return 0;
   15658:	0005883a 	mov	r2,zero
  }
}
   1565c:	e037883a 	mov	sp,fp
   15660:	df000017 	ldw	fp,0(sp)
   15664:	dec00104 	addi	sp,sp,4
   15668:	f800283a 	ret

0001566c <atexit>:
   1566c:	200b883a 	mov	r5,r4
   15670:	000f883a 	mov	r7,zero
   15674:	000d883a 	mov	r6,zero
   15678:	0009883a 	mov	r4,zero
   1567c:	00157341 	jmpi	15734 <__register_exitproc>

00015680 <exit>:
   15680:	defffe04 	addi	sp,sp,-8
   15684:	000b883a 	mov	r5,zero
   15688:	dc000015 	stw	r16,0(sp)
   1568c:	dfc00115 	stw	ra,4(sp)
   15690:	2021883a 	mov	r16,r4
   15694:	001584c0 	call	1584c <__call_exitprocs>
   15698:	00800074 	movhi	r2,1
   1569c:	109d1f04 	addi	r2,r2,29820
   156a0:	11000017 	ldw	r4,0(r2)
   156a4:	20800f17 	ldw	r2,60(r4)
   156a8:	10000126 	beq	r2,zero,156b0 <exit+0x30>
   156ac:	103ee83a 	callr	r2
   156b0:	8009883a 	mov	r4,r16
   156b4:	00159cc0 	call	159cc <_exit>

000156b8 <memcmp>:
   156b8:	01c000c4 	movi	r7,3
   156bc:	3980192e 	bgeu	r7,r6,15724 <memcmp+0x6c>
   156c0:	2144b03a 	or	r2,r4,r5
   156c4:	11c4703a 	and	r2,r2,r7
   156c8:	10000f26 	beq	r2,zero,15708 <memcmp+0x50>
   156cc:	20800003 	ldbu	r2,0(r4)
   156d0:	28c00003 	ldbu	r3,0(r5)
   156d4:	10c0151e 	bne	r2,r3,1572c <memcmp+0x74>
   156d8:	31bfff84 	addi	r6,r6,-2
   156dc:	01ffffc4 	movi	r7,-1
   156e0:	00000406 	br	156f4 <memcmp+0x3c>
   156e4:	20800003 	ldbu	r2,0(r4)
   156e8:	28c00003 	ldbu	r3,0(r5)
   156ec:	31bfffc4 	addi	r6,r6,-1
   156f0:	10c00e1e 	bne	r2,r3,1572c <memcmp+0x74>
   156f4:	21000044 	addi	r4,r4,1
   156f8:	29400044 	addi	r5,r5,1
   156fc:	31fff91e 	bne	r6,r7,156e4 <__alt_data_end+0xffff56e4>
   15700:	0005883a 	mov	r2,zero
   15704:	f800283a 	ret
   15708:	20c00017 	ldw	r3,0(r4)
   1570c:	28800017 	ldw	r2,0(r5)
   15710:	18bfee1e 	bne	r3,r2,156cc <__alt_data_end+0xffff56cc>
   15714:	31bfff04 	addi	r6,r6,-4
   15718:	21000104 	addi	r4,r4,4
   1571c:	29400104 	addi	r5,r5,4
   15720:	39bff936 	bltu	r7,r6,15708 <__alt_data_end+0xffff5708>
   15724:	303fe91e 	bne	r6,zero,156cc <__alt_data_end+0xffff56cc>
   15728:	003ff506 	br	15700 <__alt_data_end+0xffff5700>
   1572c:	10c5c83a 	sub	r2,r2,r3
   15730:	f800283a 	ret

00015734 <__register_exitproc>:
   15734:	defffa04 	addi	sp,sp,-24
   15738:	dc000315 	stw	r16,12(sp)
   1573c:	04000074 	movhi	r16,1
   15740:	841d1f04 	addi	r16,r16,29820
   15744:	80c00017 	ldw	r3,0(r16)
   15748:	dc400415 	stw	r17,16(sp)
   1574c:	dfc00515 	stw	ra,20(sp)
   15750:	18805217 	ldw	r2,328(r3)
   15754:	2023883a 	mov	r17,r4
   15758:	10003726 	beq	r2,zero,15838 <__register_exitproc+0x104>
   1575c:	10c00117 	ldw	r3,4(r2)
   15760:	010007c4 	movi	r4,31
   15764:	20c00e16 	blt	r4,r3,157a0 <__register_exitproc+0x6c>
   15768:	1a000044 	addi	r8,r3,1
   1576c:	8800221e 	bne	r17,zero,157f8 <__register_exitproc+0xc4>
   15770:	18c00084 	addi	r3,r3,2
   15774:	18c7883a 	add	r3,r3,r3
   15778:	18c7883a 	add	r3,r3,r3
   1577c:	12000115 	stw	r8,4(r2)
   15780:	10c7883a 	add	r3,r2,r3
   15784:	19400015 	stw	r5,0(r3)
   15788:	0005883a 	mov	r2,zero
   1578c:	dfc00517 	ldw	ra,20(sp)
   15790:	dc400417 	ldw	r17,16(sp)
   15794:	dc000317 	ldw	r16,12(sp)
   15798:	dec00604 	addi	sp,sp,24
   1579c:	f800283a 	ret
   157a0:	00800034 	movhi	r2,0
   157a4:	10800004 	addi	r2,r2,0
   157a8:	10002626 	beq	r2,zero,15844 <__register_exitproc+0x110>
   157ac:	01006404 	movi	r4,400
   157b0:	d9400015 	stw	r5,0(sp)
   157b4:	d9800115 	stw	r6,4(sp)
   157b8:	d9c00215 	stw	r7,8(sp)
   157bc:	00000000 	call	0 <__reset-0x10000>
   157c0:	d9400017 	ldw	r5,0(sp)
   157c4:	d9800117 	ldw	r6,4(sp)
   157c8:	d9c00217 	ldw	r7,8(sp)
   157cc:	10001d26 	beq	r2,zero,15844 <__register_exitproc+0x110>
   157d0:	81000017 	ldw	r4,0(r16)
   157d4:	10000115 	stw	zero,4(r2)
   157d8:	02000044 	movi	r8,1
   157dc:	22405217 	ldw	r9,328(r4)
   157e0:	0007883a 	mov	r3,zero
   157e4:	12400015 	stw	r9,0(r2)
   157e8:	20805215 	stw	r2,328(r4)
   157ec:	10006215 	stw	zero,392(r2)
   157f0:	10006315 	stw	zero,396(r2)
   157f4:	883fde26 	beq	r17,zero,15770 <__alt_data_end+0xffff5770>
   157f8:	18c9883a 	add	r4,r3,r3
   157fc:	2109883a 	add	r4,r4,r4
   15800:	1109883a 	add	r4,r2,r4
   15804:	21802215 	stw	r6,136(r4)
   15808:	01800044 	movi	r6,1
   1580c:	12406217 	ldw	r9,392(r2)
   15810:	30cc983a 	sll	r6,r6,r3
   15814:	4992b03a 	or	r9,r9,r6
   15818:	12406215 	stw	r9,392(r2)
   1581c:	21c04215 	stw	r7,264(r4)
   15820:	01000084 	movi	r4,2
   15824:	893fd21e 	bne	r17,r4,15770 <__alt_data_end+0xffff5770>
   15828:	11006317 	ldw	r4,396(r2)
   1582c:	218cb03a 	or	r6,r4,r6
   15830:	11806315 	stw	r6,396(r2)
   15834:	003fce06 	br	15770 <__alt_data_end+0xffff5770>
   15838:	18805304 	addi	r2,r3,332
   1583c:	18805215 	stw	r2,328(r3)
   15840:	003fc606 	br	1575c <__alt_data_end+0xffff575c>
   15844:	00bfffc4 	movi	r2,-1
   15848:	003fd006 	br	1578c <__alt_data_end+0xffff578c>

0001584c <__call_exitprocs>:
   1584c:	defff504 	addi	sp,sp,-44
   15850:	df000915 	stw	fp,36(sp)
   15854:	dd400615 	stw	r21,24(sp)
   15858:	dc800315 	stw	r18,12(sp)
   1585c:	dfc00a15 	stw	ra,40(sp)
   15860:	ddc00815 	stw	r23,32(sp)
   15864:	dd800715 	stw	r22,28(sp)
   15868:	dd000515 	stw	r20,20(sp)
   1586c:	dcc00415 	stw	r19,16(sp)
   15870:	dc400215 	stw	r17,8(sp)
   15874:	dc000115 	stw	r16,4(sp)
   15878:	d9000015 	stw	r4,0(sp)
   1587c:	2839883a 	mov	fp,r5
   15880:	04800044 	movi	r18,1
   15884:	057fffc4 	movi	r21,-1
   15888:	00800074 	movhi	r2,1
   1588c:	109d1f04 	addi	r2,r2,29820
   15890:	12000017 	ldw	r8,0(r2)
   15894:	45005217 	ldw	r20,328(r8)
   15898:	44c05204 	addi	r19,r8,328
   1589c:	a0001c26 	beq	r20,zero,15910 <__call_exitprocs+0xc4>
   158a0:	a0800117 	ldw	r2,4(r20)
   158a4:	15ffffc4 	addi	r23,r2,-1
   158a8:	b8000d16 	blt	r23,zero,158e0 <__call_exitprocs+0x94>
   158ac:	14000044 	addi	r16,r2,1
   158b0:	8421883a 	add	r16,r16,r16
   158b4:	8421883a 	add	r16,r16,r16
   158b8:	84402004 	addi	r17,r16,128
   158bc:	a463883a 	add	r17,r20,r17
   158c0:	a421883a 	add	r16,r20,r16
   158c4:	e0001e26 	beq	fp,zero,15940 <__call_exitprocs+0xf4>
   158c8:	80804017 	ldw	r2,256(r16)
   158cc:	e0801c26 	beq	fp,r2,15940 <__call_exitprocs+0xf4>
   158d0:	bdffffc4 	addi	r23,r23,-1
   158d4:	843fff04 	addi	r16,r16,-4
   158d8:	8c7fff04 	addi	r17,r17,-4
   158dc:	bd7ff91e 	bne	r23,r21,158c4 <__alt_data_end+0xffff58c4>
   158e0:	00800034 	movhi	r2,0
   158e4:	10800004 	addi	r2,r2,0
   158e8:	10000926 	beq	r2,zero,15910 <__call_exitprocs+0xc4>
   158ec:	a0800117 	ldw	r2,4(r20)
   158f0:	1000301e 	bne	r2,zero,159b4 <__call_exitprocs+0x168>
   158f4:	a0800017 	ldw	r2,0(r20)
   158f8:	10003226 	beq	r2,zero,159c4 <__call_exitprocs+0x178>
   158fc:	a009883a 	mov	r4,r20
   15900:	98800015 	stw	r2,0(r19)
   15904:	00000000 	call	0 <__reset-0x10000>
   15908:	9d000017 	ldw	r20,0(r19)
   1590c:	a03fe41e 	bne	r20,zero,158a0 <__alt_data_end+0xffff58a0>
   15910:	dfc00a17 	ldw	ra,40(sp)
   15914:	df000917 	ldw	fp,36(sp)
   15918:	ddc00817 	ldw	r23,32(sp)
   1591c:	dd800717 	ldw	r22,28(sp)
   15920:	dd400617 	ldw	r21,24(sp)
   15924:	dd000517 	ldw	r20,20(sp)
   15928:	dcc00417 	ldw	r19,16(sp)
   1592c:	dc800317 	ldw	r18,12(sp)
   15930:	dc400217 	ldw	r17,8(sp)
   15934:	dc000117 	ldw	r16,4(sp)
   15938:	dec00b04 	addi	sp,sp,44
   1593c:	f800283a 	ret
   15940:	a0800117 	ldw	r2,4(r20)
   15944:	80c00017 	ldw	r3,0(r16)
   15948:	10bfffc4 	addi	r2,r2,-1
   1594c:	15c01426 	beq	r2,r23,159a0 <__call_exitprocs+0x154>
   15950:	80000015 	stw	zero,0(r16)
   15954:	183fde26 	beq	r3,zero,158d0 <__alt_data_end+0xffff58d0>
   15958:	95c8983a 	sll	r4,r18,r23
   1595c:	a0806217 	ldw	r2,392(r20)
   15960:	a5800117 	ldw	r22,4(r20)
   15964:	2084703a 	and	r2,r4,r2
   15968:	10000b26 	beq	r2,zero,15998 <__call_exitprocs+0x14c>
   1596c:	a0806317 	ldw	r2,396(r20)
   15970:	2088703a 	and	r4,r4,r2
   15974:	20000c1e 	bne	r4,zero,159a8 <__call_exitprocs+0x15c>
   15978:	89400017 	ldw	r5,0(r17)
   1597c:	d9000017 	ldw	r4,0(sp)
   15980:	183ee83a 	callr	r3
   15984:	a0800117 	ldw	r2,4(r20)
   15988:	15bfbf1e 	bne	r2,r22,15888 <__alt_data_end+0xffff5888>
   1598c:	98800017 	ldw	r2,0(r19)
   15990:	153fcf26 	beq	r2,r20,158d0 <__alt_data_end+0xffff58d0>
   15994:	003fbc06 	br	15888 <__alt_data_end+0xffff5888>
   15998:	183ee83a 	callr	r3
   1599c:	003ff906 	br	15984 <__alt_data_end+0xffff5984>
   159a0:	a5c00115 	stw	r23,4(r20)
   159a4:	003feb06 	br	15954 <__alt_data_end+0xffff5954>
   159a8:	89000017 	ldw	r4,0(r17)
   159ac:	183ee83a 	callr	r3
   159b0:	003ff406 	br	15984 <__alt_data_end+0xffff5984>
   159b4:	a0800017 	ldw	r2,0(r20)
   159b8:	a027883a 	mov	r19,r20
   159bc:	1029883a 	mov	r20,r2
   159c0:	003fb606 	br	1589c <__alt_data_end+0xffff589c>
   159c4:	0005883a 	mov	r2,zero
   159c8:	003ffb06 	br	159b8 <__alt_data_end+0xffff59b8>

000159cc <_exit>:
 *
 * ALT_EXIT is mapped onto the _exit() system call in alt_syscall.h
 */

void ALT_EXIT (int exit_code)
{
   159cc:	defffd04 	addi	sp,sp,-12
   159d0:	df000215 	stw	fp,8(sp)
   159d4:	df000204 	addi	fp,sp,8
   159d8:	e13fff15 	stw	r4,-4(fp)
  ALT_LOG_PRINT_BOOT("[alt_exit.c] Entering _exit() function.\r\n");
  ALT_LOG_PRINT_BOOT("[alt_exit.c] Exit code from main was %d.\r\n",exit_code);
  /* Stop all other threads */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Calling ALT_OS_STOP().\r\n");
  ALT_OS_STOP();
   159dc:	0001883a 	nop
   159e0:	e0bfff17 	ldw	r2,-4(fp)
   159e4:	e0bffe15 	stw	r2,-8(fp)
/*
 * Routine called on exit.
 */
static ALT_INLINE ALT_ALWAYS_INLINE void alt_sim_halt(int exit_code)
{
  register int r2 asm ("r2") = exit_code;
   159e8:	e0bffe17 	ldw	r2,-8(fp)
  __asm__ volatile ("\n0:\n\taddi %0,%0, -1\n\tbgt %0,zero,0b" : : "r" (ALT_CPU_FREQ/100) ); /* Delay for >30ms */

  __asm__ volatile ("break 2" : : "r"(r2), "r"(r3) ALT_GMON_DATA );

#else /* !DEBUG_STUB */
  if (r2) {
   159ec:	10000226 	beq	r2,zero,159f8 <_exit+0x2c>
    ALT_SIM_FAIL();
   159f0:	002af070 	cmpltui	zero,zero,43969
   159f4:	00000106 	br	159fc <_exit+0x30>
  } else {
    ALT_SIM_PASS();
   159f8:	002af0b0 	cmpltui	zero,zero,43970
  ALT_SIM_HALT(exit_code);

  /* spin forever, since there's no where to go back to */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Spinning forever.\r\n");
  while (1);
   159fc:	003fff06 	br	159fc <__alt_data_end+0xffff59fc>
